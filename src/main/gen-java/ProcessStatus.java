/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProcessStatus implements org.apache.thrift.TBase<ProcessStatus, ProcessStatus._Fields>, java.io.Serializable, Cloneable, Comparable<ProcessStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcessStatus");

  private static final org.apache.thrift.protocol.TField SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("seq", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PROCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("process", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField COORDINATOR_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinator_pid", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField FORK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fork_time", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("start_time", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("stop_time", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField RETURN_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("return_code", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProcessStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProcessStatusTupleSchemeFactory());
  }

  private long seq; // required
  private String process; // required
  private ProcessState state; // required
  private int coordinator_pid; // required
  private double fork_time; // required
  private double start_time; // required
  private int pid; // required
  private double stop_time; // required
  private int return_code; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEQ((short)1, "seq"),
    PROCESS((short)3, "process"),
    /**
     * 
     * @see ProcessState
     */
    STATE((short)5, "state"),
    COORDINATOR_PID((short)10, "coordinator_pid"),
    FORK_TIME((short)11, "fork_time"),
    START_TIME((short)6, "start_time"),
    PID((short)7, "pid"),
    STOP_TIME((short)8, "stop_time"),
    RETURN_CODE((short)9, "return_code");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEQ
          return SEQ;
        case 3: // PROCESS
          return PROCESS;
        case 5: // STATE
          return STATE;
        case 10: // COORDINATOR_PID
          return COORDINATOR_PID;
        case 11: // FORK_TIME
          return FORK_TIME;
        case 6: // START_TIME
          return START_TIME;
        case 7: // PID
          return PID;
        case 8: // STOP_TIME
          return STOP_TIME;
        case 9: // RETURN_CODE
          return RETURN_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQ_ISSET_ID = 0;
  private static final int __COORDINATOR_PID_ISSET_ID = 1;
  private static final int __FORK_TIME_ISSET_ID = 2;
  private static final int __START_TIME_ISSET_ID = 3;
  private static final int __PID_ISSET_ID = 4;
  private static final int __STOP_TIME_ISSET_ID = 5;
  private static final int __RETURN_CODE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEQ, new org.apache.thrift.meta_data.FieldMetaData("seq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROCESS, new org.apache.thrift.meta_data.FieldMetaData("process", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProcessState.class)));
    tmpMap.put(_Fields.COORDINATOR_PID, new org.apache.thrift.meta_data.FieldMetaData("coordinator_pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FORK_TIME, new org.apache.thrift.meta_data.FieldMetaData("fork_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("start_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("stop_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RETURN_CODE, new org.apache.thrift.meta_data.FieldMetaData("return_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcessStatus.class, metaDataMap);
  }

  public ProcessStatus() {
  }

  public ProcessStatus(
    long seq,
    String process,
    ProcessState state,
    int coordinator_pid,
    double fork_time,
    double start_time,
    int pid,
    double stop_time,
    int return_code)
  {
    this();
    this.seq = seq;
    setSeqIsSet(true);
    this.process = process;
    this.state = state;
    this.coordinator_pid = coordinator_pid;
    setCoordinator_pidIsSet(true);
    this.fork_time = fork_time;
    setFork_timeIsSet(true);
    this.start_time = start_time;
    setStart_timeIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.stop_time = stop_time;
    setStop_timeIsSet(true);
    this.return_code = return_code;
    setReturn_codeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProcessStatus(ProcessStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    this.seq = other.seq;
    if (other.isSetProcess()) {
      this.process = other.process;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.coordinator_pid = other.coordinator_pid;
    this.fork_time = other.fork_time;
    this.start_time = other.start_time;
    this.pid = other.pid;
    this.stop_time = other.stop_time;
    this.return_code = other.return_code;
  }

  public ProcessStatus deepCopy() {
    return new ProcessStatus(this);
  }

  @Override
  public void clear() {
    setSeqIsSet(false);
    this.seq = 0;
    this.process = null;
    this.state = null;
    setCoordinator_pidIsSet(false);
    this.coordinator_pid = 0;
    setFork_timeIsSet(false);
    this.fork_time = 0.0;
    setStart_timeIsSet(false);
    this.start_time = 0.0;
    setPidIsSet(false);
    this.pid = 0;
    setStop_timeIsSet(false);
    this.stop_time = 0.0;
    setReturn_codeIsSet(false);
    this.return_code = 0;
  }

  public long getSeq() {
    return this.seq;
  }

  public ProcessStatus setSeq(long seq) {
    this.seq = seq;
    setSeqIsSet(true);
    return this;
  }

  public void unsetSeq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQ_ISSET_ID);
  }

  /** Returns true if field seq is set (has been assigned a value) and false otherwise */
  public boolean isSetSeq() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQ_ISSET_ID);
  }

  public void setSeqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQ_ISSET_ID, value);
  }

  public String getProcess() {
    return this.process;
  }

  public ProcessStatus setProcess(String process) {
    this.process = process;
    return this;
  }

  public void unsetProcess() {
    this.process = null;
  }

  /** Returns true if field process is set (has been assigned a value) and false otherwise */
  public boolean isSetProcess() {
    return this.process != null;
  }

  public void setProcessIsSet(boolean value) {
    if (!value) {
      this.process = null;
    }
  }

  /**
   * 
   * @see ProcessState
   */
  public ProcessState getState() {
    return this.state;
  }

  /**
   * 
   * @see ProcessState
   */
  public ProcessStatus setState(ProcessState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public int getCoordinator_pid() {
    return this.coordinator_pid;
  }

  public ProcessStatus setCoordinator_pid(int coordinator_pid) {
    this.coordinator_pid = coordinator_pid;
    setCoordinator_pidIsSet(true);
    return this;
  }

  public void unsetCoordinator_pid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COORDINATOR_PID_ISSET_ID);
  }

  /** Returns true if field coordinator_pid is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinator_pid() {
    return EncodingUtils.testBit(__isset_bitfield, __COORDINATOR_PID_ISSET_ID);
  }

  public void setCoordinator_pidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COORDINATOR_PID_ISSET_ID, value);
  }

  public double getFork_time() {
    return this.fork_time;
  }

  public ProcessStatus setFork_time(double fork_time) {
    this.fork_time = fork_time;
    setFork_timeIsSet(true);
    return this;
  }

  public void unsetFork_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORK_TIME_ISSET_ID);
  }

  /** Returns true if field fork_time is set (has been assigned a value) and false otherwise */
  public boolean isSetFork_time() {
    return EncodingUtils.testBit(__isset_bitfield, __FORK_TIME_ISSET_ID);
  }

  public void setFork_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORK_TIME_ISSET_ID, value);
  }

  public double getStart_time() {
    return this.start_time;
  }

  public ProcessStatus setStart_time(double start_time) {
    this.start_time = start_time;
    setStart_timeIsSet(true);
    return this;
  }

  public void unsetStart_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_TIME_ISSET_ID);
  }

  /** Returns true if field start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_time() {
    return EncodingUtils.testBit(__isset_bitfield, __START_TIME_ISSET_ID);
  }

  public void setStart_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_TIME_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public ProcessStatus setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public double getStop_time() {
    return this.stop_time;
  }

  public ProcessStatus setStop_time(double stop_time) {
    this.stop_time = stop_time;
    setStop_timeIsSet(true);
    return this;
  }

  public void unsetStop_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOP_TIME_ISSET_ID);
  }

  /** Returns true if field stop_time is set (has been assigned a value) and false otherwise */
  public boolean isSetStop_time() {
    return EncodingUtils.testBit(__isset_bitfield, __STOP_TIME_ISSET_ID);
  }

  public void setStop_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOP_TIME_ISSET_ID, value);
  }

  public int getReturn_code() {
    return this.return_code;
  }

  public ProcessStatus setReturn_code(int return_code) {
    this.return_code = return_code;
    setReturn_codeIsSet(true);
    return this;
  }

  public void unsetReturn_code() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURN_CODE_ISSET_ID);
  }

  /** Returns true if field return_code is set (has been assigned a value) and false otherwise */
  public boolean isSetReturn_code() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURN_CODE_ISSET_ID);
  }

  public void setReturn_codeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURN_CODE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEQ:
      if (value == null) {
        unsetSeq();
      } else {
        setSeq((Long)value);
      }
      break;

    case PROCESS:
      if (value == null) {
        unsetProcess();
      } else {
        setProcess((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((ProcessState)value);
      }
      break;

    case COORDINATOR_PID:
      if (value == null) {
        unsetCoordinator_pid();
      } else {
        setCoordinator_pid((Integer)value);
      }
      break;

    case FORK_TIME:
      if (value == null) {
        unsetFork_time();
      } else {
        setFork_time((Double)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStart_time();
      } else {
        setStart_time((Double)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case STOP_TIME:
      if (value == null) {
        unsetStop_time();
      } else {
        setStop_time((Double)value);
      }
      break;

    case RETURN_CODE:
      if (value == null) {
        unsetReturn_code();
      } else {
        setReturn_code((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEQ:
      return Long.valueOf(getSeq());

    case PROCESS:
      return getProcess();

    case STATE:
      return getState();

    case COORDINATOR_PID:
      return Integer.valueOf(getCoordinator_pid());

    case FORK_TIME:
      return Double.valueOf(getFork_time());

    case START_TIME:
      return Double.valueOf(getStart_time());

    case PID:
      return Integer.valueOf(getPid());

    case STOP_TIME:
      return Double.valueOf(getStop_time());

    case RETURN_CODE:
      return Integer.valueOf(getReturn_code());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEQ:
      return isSetSeq();
    case PROCESS:
      return isSetProcess();
    case STATE:
      return isSetState();
    case COORDINATOR_PID:
      return isSetCoordinator_pid();
    case FORK_TIME:
      return isSetFork_time();
    case START_TIME:
      return isSetStart_time();
    case PID:
      return isSetPid();
    case STOP_TIME:
      return isSetStop_time();
    case RETURN_CODE:
      return isSetReturn_code();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProcessStatus)
      return this.equals((ProcessStatus)that);
    return false;
  }

  public boolean equals(ProcessStatus that) {
    if (that == null)
      return false;

    boolean this_present_seq = true;
    boolean that_present_seq = true;
    if (this_present_seq || that_present_seq) {
      if (!(this_present_seq && that_present_seq))
        return false;
      if (this.seq != that.seq)
        return false;
    }

    boolean this_present_process = true && this.isSetProcess();
    boolean that_present_process = true && that.isSetProcess();
    if (this_present_process || that_present_process) {
      if (!(this_present_process && that_present_process))
        return false;
      if (!this.process.equals(that.process))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_coordinator_pid = true;
    boolean that_present_coordinator_pid = true;
    if (this_present_coordinator_pid || that_present_coordinator_pid) {
      if (!(this_present_coordinator_pid && that_present_coordinator_pid))
        return false;
      if (this.coordinator_pid != that.coordinator_pid)
        return false;
    }

    boolean this_present_fork_time = true;
    boolean that_present_fork_time = true;
    if (this_present_fork_time || that_present_fork_time) {
      if (!(this_present_fork_time && that_present_fork_time))
        return false;
      if (this.fork_time != that.fork_time)
        return false;
    }

    boolean this_present_start_time = true;
    boolean that_present_start_time = true;
    if (this_present_start_time || that_present_start_time) {
      if (!(this_present_start_time && that_present_start_time))
        return false;
      if (this.start_time != that.start_time)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_stop_time = true;
    boolean that_present_stop_time = true;
    if (this_present_stop_time || that_present_stop_time) {
      if (!(this_present_stop_time && that_present_stop_time))
        return false;
      if (this.stop_time != that.stop_time)
        return false;
    }

    boolean this_present_return_code = true;
    boolean that_present_return_code = true;
    if (this_present_return_code || that_present_return_code) {
      if (!(this_present_return_code && that_present_return_code))
        return false;
      if (this.return_code != that.return_code)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_seq = true;
    builder.append(present_seq);
    if (present_seq)
      builder.append(seq);

    boolean present_process = true && (isSetProcess());
    builder.append(present_process);
    if (present_process)
      builder.append(process);

    boolean present_state = true && (isSetState());
    builder.append(present_state);
    if (present_state)
      builder.append(state.getValue());

    boolean present_coordinator_pid = true;
    builder.append(present_coordinator_pid);
    if (present_coordinator_pid)
      builder.append(coordinator_pid);

    boolean present_fork_time = true;
    builder.append(present_fork_time);
    if (present_fork_time)
      builder.append(fork_time);

    boolean present_start_time = true;
    builder.append(present_start_time);
    if (present_start_time)
      builder.append(start_time);

    boolean present_pid = true;
    builder.append(present_pid);
    if (present_pid)
      builder.append(pid);

    boolean present_stop_time = true;
    builder.append(present_stop_time);
    if (present_stop_time)
      builder.append(stop_time);

    boolean present_return_code = true;
    builder.append(present_return_code);
    if (present_return_code)
      builder.append(return_code);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(ProcessStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSeq()).compareTo(other.isSetSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq, other.seq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcess()).compareTo(other.isSetProcess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.process, other.process);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoordinator_pid()).compareTo(other.isSetCoordinator_pid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinator_pid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinator_pid, other.coordinator_pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFork_time()).compareTo(other.isSetFork_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFork_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fork_time, other.fork_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_time()).compareTo(other.isSetStart_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_time, other.start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStop_time()).compareTo(other.isSetStop_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStop_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop_time, other.stop_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturn_code()).compareTo(other.isSetReturn_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturn_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.return_code, other.return_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProcessStatus(");
    boolean first = true;

    sb.append("seq:");
    sb.append(this.seq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("process:");
    if (this.process == null) {
      sb.append("null");
    } else {
      sb.append(this.process);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coordinator_pid:");
    sb.append(this.coordinator_pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fork_time:");
    sb.append(this.fork_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_time:");
    sb.append(this.start_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stop_time:");
    sb.append(this.stop_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("return_code:");
    sb.append(this.return_code);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProcessStatusStandardSchemeFactory implements SchemeFactory {
    public ProcessStatusStandardScheme getScheme() {
      return new ProcessStatusStandardScheme();
    }
  }

  private static class ProcessStatusStandardScheme extends StandardScheme<ProcessStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProcessStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seq = iprot.readI64();
              struct.setSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.process = iprot.readString();
              struct.setProcessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = ProcessState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COORDINATOR_PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coordinator_pid = iprot.readI32();
              struct.setCoordinator_pidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FORK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fork_time = iprot.readDouble();
              struct.setFork_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.start_time = iprot.readDouble();
              struct.setStart_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.stop_time = iprot.readDouble();
              struct.setStop_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RETURN_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.return_code = iprot.readI32();
              struct.setReturn_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProcessStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI64(struct.seq);
      oprot.writeFieldEnd();
      if (struct.process != null) {
        oprot.writeFieldBegin(PROCESS_FIELD_DESC);
        oprot.writeString(struct.process);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeDouble(struct.start_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STOP_TIME_FIELD_DESC);
      oprot.writeDouble(struct.stop_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RETURN_CODE_FIELD_DESC);
      oprot.writeI32(struct.return_code);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COORDINATOR_PID_FIELD_DESC);
      oprot.writeI32(struct.coordinator_pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORK_TIME_FIELD_DESC);
      oprot.writeDouble(struct.fork_time);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProcessStatusTupleSchemeFactory implements SchemeFactory {
    public ProcessStatusTupleScheme getScheme() {
      return new ProcessStatusTupleScheme();
    }
  }

  private static class ProcessStatusTupleScheme extends TupleScheme<ProcessStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProcessStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSeq()) {
        optionals.set(0);
      }
      if (struct.isSetProcess()) {
        optionals.set(1);
      }
      if (struct.isSetState()) {
        optionals.set(2);
      }
      if (struct.isSetCoordinator_pid()) {
        optionals.set(3);
      }
      if (struct.isSetFork_time()) {
        optionals.set(4);
      }
      if (struct.isSetStart_time()) {
        optionals.set(5);
      }
      if (struct.isSetPid()) {
        optionals.set(6);
      }
      if (struct.isSetStop_time()) {
        optionals.set(7);
      }
      if (struct.isSetReturn_code()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetSeq()) {
        oprot.writeI64(struct.seq);
      }
      if (struct.isSetProcess()) {
        oprot.writeString(struct.process);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetCoordinator_pid()) {
        oprot.writeI32(struct.coordinator_pid);
      }
      if (struct.isSetFork_time()) {
        oprot.writeDouble(struct.fork_time);
      }
      if (struct.isSetStart_time()) {
        oprot.writeDouble(struct.start_time);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetStop_time()) {
        oprot.writeDouble(struct.stop_time);
      }
      if (struct.isSetReturn_code()) {
        oprot.writeI32(struct.return_code);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProcessStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.seq = iprot.readI64();
        struct.setSeqIsSet(true);
      }
      if (incoming.get(1)) {
        struct.process = iprot.readString();
        struct.setProcessIsSet(true);
      }
      if (incoming.get(2)) {
        struct.state = ProcessState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.coordinator_pid = iprot.readI32();
        struct.setCoordinator_pidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fork_time = iprot.readDouble();
        struct.setFork_timeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.start_time = iprot.readDouble();
        struct.setStart_timeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.stop_time = iprot.readDouble();
        struct.setStop_timeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.return_code = iprot.readI32();
        struct.setReturn_codeIsSet(true);
      }
    }
  }

}

