/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RunnerHeader implements org.apache.thrift.TBase<RunnerHeader, RunnerHeader._Fields>, java.io.Serializable, Cloneable, Comparable<RunnerHeader> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunnerHeader");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("task_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LAUNCH_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("launch_time_ms", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SANDBOX_FIELD_DESC = new org.apache.thrift.protocol.TField("sandbox", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOG_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("log_dir", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("ports", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RunnerHeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RunnerHeaderTupleSchemeFactory());
  }

  private String task_id; // required
  private long launch_time_ms; // required
  private String sandbox; // required
  private String log_dir; // required
  private String hostname; // required
  private String user; // required
  private int uid; // required
  private Map<String,Long> ports; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "task_id"),
    LAUNCH_TIME_MS((short)2, "launch_time_ms"),
    SANDBOX((short)3, "sandbox"),
    LOG_DIR((short)7, "log_dir"),
    HOSTNAME((short)4, "hostname"),
    USER((short)5, "user"),
    UID((short)8, "uid"),
    PORTS((short)6, "ports");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // LAUNCH_TIME_MS
          return LAUNCH_TIME_MS;
        case 3: // SANDBOX
          return SANDBOX;
        case 7: // LOG_DIR
          return LOG_DIR;
        case 4: // HOSTNAME
          return HOSTNAME;
        case 5: // USER
          return USER;
        case 8: // UID
          return UID;
        case 6: // PORTS
          return PORTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LAUNCH_TIME_MS_ISSET_ID = 0;
  private static final int __UID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("task_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAUNCH_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("launch_time_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SANDBOX, new org.apache.thrift.meta_data.FieldMetaData("sandbox", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_DIR, new org.apache.thrift.meta_data.FieldMetaData("log_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PORTS, new org.apache.thrift.meta_data.FieldMetaData("ports", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunnerHeader.class, metaDataMap);
  }

  public RunnerHeader() {
  }

  public RunnerHeader(
    String task_id,
    long launch_time_ms,
    String sandbox,
    String log_dir,
    String hostname,
    String user,
    int uid,
    Map<String,Long> ports)
  {
    this();
    this.task_id = task_id;
    this.launch_time_ms = launch_time_ms;
    setLaunch_time_msIsSet(true);
    this.sandbox = sandbox;
    this.log_dir = log_dir;
    this.hostname = hostname;
    this.user = user;
    this.uid = uid;
    setUidIsSet(true);
    this.ports = ports;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RunnerHeader(RunnerHeader other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTask_id()) {
      this.task_id = other.task_id;
    }
    this.launch_time_ms = other.launch_time_ms;
    if (other.isSetSandbox()) {
      this.sandbox = other.sandbox;
    }
    if (other.isSetLog_dir()) {
      this.log_dir = other.log_dir;
    }
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    this.uid = other.uid;
    if (other.isSetPorts()) {
      Map<String,Long> __this__ports = new HashMap<String,Long>(other.ports);
      this.ports = __this__ports;
    }
  }

  public RunnerHeader deepCopy() {
    return new RunnerHeader(this);
  }

  @Override
  public void clear() {
    this.task_id = null;
    setLaunch_time_msIsSet(false);
    this.launch_time_ms = 0;
    this.sandbox = null;
    this.log_dir = null;
    this.hostname = null;
    this.user = null;
    setUidIsSet(false);
    this.uid = 0;
    this.ports = null;
  }

  public String getTask_id() {
    return this.task_id;
  }

  public RunnerHeader setTask_id(String task_id) {
    this.task_id = task_id;
    return this;
  }

  public void unsetTask_id() {
    this.task_id = null;
  }

  /** Returns true if field task_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_id() {
    return this.task_id != null;
  }

  public void setTask_idIsSet(boolean value) {
    if (!value) {
      this.task_id = null;
    }
  }

  public long getLaunch_time_ms() {
    return this.launch_time_ms;
  }

  public RunnerHeader setLaunch_time_ms(long launch_time_ms) {
    this.launch_time_ms = launch_time_ms;
    setLaunch_time_msIsSet(true);
    return this;
  }

  public void unsetLaunch_time_ms() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAUNCH_TIME_MS_ISSET_ID);
  }

  /** Returns true if field launch_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetLaunch_time_ms() {
    return EncodingUtils.testBit(__isset_bitfield, __LAUNCH_TIME_MS_ISSET_ID);
  }

  public void setLaunch_time_msIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAUNCH_TIME_MS_ISSET_ID, value);
  }

  public String getSandbox() {
    return this.sandbox;
  }

  public RunnerHeader setSandbox(String sandbox) {
    this.sandbox = sandbox;
    return this;
  }

  public void unsetSandbox() {
    this.sandbox = null;
  }

  /** Returns true if field sandbox is set (has been assigned a value) and false otherwise */
  public boolean isSetSandbox() {
    return this.sandbox != null;
  }

  public void setSandboxIsSet(boolean value) {
    if (!value) {
      this.sandbox = null;
    }
  }

  public String getLog_dir() {
    return this.log_dir;
  }

  public RunnerHeader setLog_dir(String log_dir) {
    this.log_dir = log_dir;
    return this;
  }

  public void unsetLog_dir() {
    this.log_dir = null;
  }

  /** Returns true if field log_dir is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_dir() {
    return this.log_dir != null;
  }

  public void setLog_dirIsSet(boolean value) {
    if (!value) {
      this.log_dir = null;
    }
  }

  public String getHostname() {
    return this.hostname;
  }

  public RunnerHeader setHostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public String getUser() {
    return this.user;
  }

  public RunnerHeader setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public int getUid() {
    return this.uid;
  }

  public RunnerHeader setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getPortsSize() {
    return (this.ports == null) ? 0 : this.ports.size();
  }

  public void putToPorts(String key, long val) {
    if (this.ports == null) {
      this.ports = new HashMap<String,Long>();
    }
    this.ports.put(key, val);
  }

  public Map<String,Long> getPorts() {
    return this.ports;
  }

  public RunnerHeader setPorts(Map<String,Long> ports) {
    this.ports = ports;
    return this;
  }

  public void unsetPorts() {
    this.ports = null;
  }

  /** Returns true if field ports is set (has been assigned a value) and false otherwise */
  public boolean isSetPorts() {
    return this.ports != null;
  }

  public void setPortsIsSet(boolean value) {
    if (!value) {
      this.ports = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTask_id();
      } else {
        setTask_id((String)value);
      }
      break;

    case LAUNCH_TIME_MS:
      if (value == null) {
        unsetLaunch_time_ms();
      } else {
        setLaunch_time_ms((Long)value);
      }
      break;

    case SANDBOX:
      if (value == null) {
        unsetSandbox();
      } else {
        setSandbox((String)value);
      }
      break;

    case LOG_DIR:
      if (value == null) {
        unsetLog_dir();
      } else {
        setLog_dir((String)value);
      }
      break;

    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case PORTS:
      if (value == null) {
        unsetPorts();
      } else {
        setPorts((Map<String,Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return getTask_id();

    case LAUNCH_TIME_MS:
      return Long.valueOf(getLaunch_time_ms());

    case SANDBOX:
      return getSandbox();

    case LOG_DIR:
      return getLog_dir();

    case HOSTNAME:
      return getHostname();

    case USER:
      return getUser();

    case UID:
      return Integer.valueOf(getUid());

    case PORTS:
      return getPorts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTask_id();
    case LAUNCH_TIME_MS:
      return isSetLaunch_time_ms();
    case SANDBOX:
      return isSetSandbox();
    case LOG_DIR:
      return isSetLog_dir();
    case HOSTNAME:
      return isSetHostname();
    case USER:
      return isSetUser();
    case UID:
      return isSetUid();
    case PORTS:
      return isSetPorts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RunnerHeader)
      return this.equals((RunnerHeader)that);
    return false;
  }

  public boolean equals(RunnerHeader that) {
    if (that == null)
      return false;

    boolean this_present_task_id = true && this.isSetTask_id();
    boolean that_present_task_id = true && that.isSetTask_id();
    if (this_present_task_id || that_present_task_id) {
      if (!(this_present_task_id && that_present_task_id))
        return false;
      if (!this.task_id.equals(that.task_id))
        return false;
    }

    boolean this_present_launch_time_ms = true;
    boolean that_present_launch_time_ms = true;
    if (this_present_launch_time_ms || that_present_launch_time_ms) {
      if (!(this_present_launch_time_ms && that_present_launch_time_ms))
        return false;
      if (this.launch_time_ms != that.launch_time_ms)
        return false;
    }

    boolean this_present_sandbox = true && this.isSetSandbox();
    boolean that_present_sandbox = true && that.isSetSandbox();
    if (this_present_sandbox || that_present_sandbox) {
      if (!(this_present_sandbox && that_present_sandbox))
        return false;
      if (!this.sandbox.equals(that.sandbox))
        return false;
    }

    boolean this_present_log_dir = true && this.isSetLog_dir();
    boolean that_present_log_dir = true && that.isSetLog_dir();
    if (this_present_log_dir || that_present_log_dir) {
      if (!(this_present_log_dir && that_present_log_dir))
        return false;
      if (!this.log_dir.equals(that.log_dir))
        return false;
    }

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_ports = true && this.isSetPorts();
    boolean that_present_ports = true && that.isSetPorts();
    if (this_present_ports || that_present_ports) {
      if (!(this_present_ports && that_present_ports))
        return false;
      if (!this.ports.equals(that.ports))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_task_id = true && (isSetTask_id());
    builder.append(present_task_id);
    if (present_task_id)
      builder.append(task_id);

    boolean present_launch_time_ms = true;
    builder.append(present_launch_time_ms);
    if (present_launch_time_ms)
      builder.append(launch_time_ms);

    boolean present_sandbox = true && (isSetSandbox());
    builder.append(present_sandbox);
    if (present_sandbox)
      builder.append(sandbox);

    boolean present_log_dir = true && (isSetLog_dir());
    builder.append(present_log_dir);
    if (present_log_dir)
      builder.append(log_dir);

    boolean present_hostname = true && (isSetHostname());
    builder.append(present_hostname);
    if (present_hostname)
      builder.append(hostname);

    boolean present_user = true && (isSetUser());
    builder.append(present_user);
    if (present_user)
      builder.append(user);

    boolean present_uid = true;
    builder.append(present_uid);
    if (present_uid)
      builder.append(uid);

    boolean present_ports = true && (isSetPorts());
    builder.append(present_ports);
    if (present_ports)
      builder.append(ports);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(RunnerHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTask_id()).compareTo(other.isSetTask_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_id, other.task_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLaunch_time_ms()).compareTo(other.isSetLaunch_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLaunch_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.launch_time_ms, other.launch_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSandbox()).compareTo(other.isSetSandbox());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSandbox()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sandbox, other.sandbox);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog_dir()).compareTo(other.isSetLog_dir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_dir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_dir, other.log_dir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPorts()).compareTo(other.isSetPorts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPorts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ports, other.ports);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RunnerHeader(");
    boolean first = true;

    sb.append("task_id:");
    if (this.task_id == null) {
      sb.append("null");
    } else {
      sb.append(this.task_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("launch_time_ms:");
    sb.append(this.launch_time_ms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sandbox:");
    if (this.sandbox == null) {
      sb.append("null");
    } else {
      sb.append(this.sandbox);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("log_dir:");
    if (this.log_dir == null) {
      sb.append("null");
    } else {
      sb.append(this.log_dir);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostname:");
    if (this.hostname == null) {
      sb.append("null");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ports:");
    if (this.ports == null) {
      sb.append("null");
    } else {
      sb.append(this.ports);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RunnerHeaderStandardSchemeFactory implements SchemeFactory {
    public RunnerHeaderStandardScheme getScheme() {
      return new RunnerHeaderStandardScheme();
    }
  }

  private static class RunnerHeaderStandardScheme extends StandardScheme<RunnerHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RunnerHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.task_id = iprot.readString();
              struct.setTask_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAUNCH_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.launch_time_ms = iprot.readI64();
              struct.setLaunch_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SANDBOX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sandbox = iprot.readString();
              struct.setSandboxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOG_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.log_dir = iprot.readString();
              struct.setLog_dirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uid = iprot.readI32();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.ports = new HashMap<String,Long>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2;
                  long _val3;
                  _key2 = iprot.readString();
                  _val3 = iprot.readI64();
                  struct.ports.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setPortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RunnerHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.task_id != null) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeString(struct.task_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAUNCH_TIME_MS_FIELD_DESC);
      oprot.writeI64(struct.launch_time_ms);
      oprot.writeFieldEnd();
      if (struct.sandbox != null) {
        oprot.writeFieldBegin(SANDBOX_FIELD_DESC);
        oprot.writeString(struct.sandbox);
        oprot.writeFieldEnd();
      }
      if (struct.hostname != null) {
        oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
        oprot.writeString(struct.hostname);
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.ports != null) {
        oprot.writeFieldBegin(PORTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.ports.size()));
          for (Map.Entry<String, Long> _iter4 : struct.ports.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeI64(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.log_dir != null) {
        oprot.writeFieldBegin(LOG_DIR_FIELD_DESC);
        oprot.writeString(struct.log_dir);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI32(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RunnerHeaderTupleSchemeFactory implements SchemeFactory {
    public RunnerHeaderTupleScheme getScheme() {
      return new RunnerHeaderTupleScheme();
    }
  }

  private static class RunnerHeaderTupleScheme extends TupleScheme<RunnerHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RunnerHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTask_id()) {
        optionals.set(0);
      }
      if (struct.isSetLaunch_time_ms()) {
        optionals.set(1);
      }
      if (struct.isSetSandbox()) {
        optionals.set(2);
      }
      if (struct.isSetLog_dir()) {
        optionals.set(3);
      }
      if (struct.isSetHostname()) {
        optionals.set(4);
      }
      if (struct.isSetUser()) {
        optionals.set(5);
      }
      if (struct.isSetUid()) {
        optionals.set(6);
      }
      if (struct.isSetPorts()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTask_id()) {
        oprot.writeString(struct.task_id);
      }
      if (struct.isSetLaunch_time_ms()) {
        oprot.writeI64(struct.launch_time_ms);
      }
      if (struct.isSetSandbox()) {
        oprot.writeString(struct.sandbox);
      }
      if (struct.isSetLog_dir()) {
        oprot.writeString(struct.log_dir);
      }
      if (struct.isSetHostname()) {
        oprot.writeString(struct.hostname);
      }
      if (struct.isSetUser()) {
        oprot.writeString(struct.user);
      }
      if (struct.isSetUid()) {
        oprot.writeI32(struct.uid);
      }
      if (struct.isSetPorts()) {
        {
          oprot.writeI32(struct.ports.size());
          for (Map.Entry<String, Long> _iter5 : struct.ports.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeI64(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RunnerHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.task_id = iprot.readString();
        struct.setTask_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.launch_time_ms = iprot.readI64();
        struct.setLaunch_time_msIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sandbox = iprot.readString();
        struct.setSandboxIsSet(true);
      }
      if (incoming.get(3)) {
        struct.log_dir = iprot.readString();
        struct.setLog_dirIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hostname = iprot.readString();
        struct.setHostnameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.user = iprot.readString();
        struct.setUserIsSet(true);
      }
      if (incoming.get(6)) {
        struct.uid = iprot.readI32();
        struct.setUidIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.ports = new HashMap<String,Long>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            String _key8;
            long _val9;
            _key8 = iprot.readString();
            _val9 = iprot.readI64();
            struct.ports.put(_key8, _val9);
          }
        }
        struct.setPortsIsSet(true);
      }
    }
  }

}

