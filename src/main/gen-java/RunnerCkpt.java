/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RunnerCkpt extends org.apache.thrift.TUnion<RunnerCkpt, RunnerCkpt._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunnerCkpt");
  private static final org.apache.thrift.protocol.TField RUNNER_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("runner_header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PROCESS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("process_status", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TASK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("task_status", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RUNNER_HEADER((short)1, "runner_header"),
    PROCESS_STATUS((short)2, "process_status"),
    TASK_STATUS((short)3, "task_status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RUNNER_HEADER
          return RUNNER_HEADER;
        case 2: // PROCESS_STATUS
          return PROCESS_STATUS;
        case 3: // TASK_STATUS
          return TASK_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RUNNER_HEADER, new org.apache.thrift.meta_data.FieldMetaData("runner_header", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RunnerHeader.class)));
    tmpMap.put(_Fields.PROCESS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("process_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProcessStatus.class)));
    tmpMap.put(_Fields.TASK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("task_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunnerCkpt.class, metaDataMap);
  }

  public RunnerCkpt() {
    super();
  }

  public RunnerCkpt(_Fields setField, Object value) {
    super(setField, value);
  }

  public RunnerCkpt(RunnerCkpt other) {
    super(other);
  }
  public RunnerCkpt deepCopy() {
    return new RunnerCkpt(this);
  }

  public static RunnerCkpt runner_header(RunnerHeader value) {
    RunnerCkpt x = new RunnerCkpt();
    x.setRunner_header(value);
    return x;
  }

  public static RunnerCkpt process_status(ProcessStatus value) {
    RunnerCkpt x = new RunnerCkpt();
    x.setProcess_status(value);
    return x;
  }

  public static RunnerCkpt task_status(TaskStatus value) {
    RunnerCkpt x = new RunnerCkpt();
    x.setTask_status(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case RUNNER_HEADER:
        if (value instanceof RunnerHeader) {
          break;
        }
        throw new ClassCastException("Was expecting value of type RunnerHeader for field 'runner_header', but got " + value.getClass().getSimpleName());
      case PROCESS_STATUS:
        if (value instanceof ProcessStatus) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ProcessStatus for field 'process_status', but got " + value.getClass().getSimpleName());
      case TASK_STATUS:
        if (value instanceof TaskStatus) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TaskStatus for field 'task_status', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case RUNNER_HEADER:
          if (field.type == RUNNER_HEADER_FIELD_DESC.type) {
            RunnerHeader runner_header;
            runner_header = new RunnerHeader();
            runner_header.read(iprot);
            return runner_header;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PROCESS_STATUS:
          if (field.type == PROCESS_STATUS_FIELD_DESC.type) {
            ProcessStatus process_status;
            process_status = new ProcessStatus();
            process_status.read(iprot);
            return process_status;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TASK_STATUS:
          if (field.type == TASK_STATUS_FIELD_DESC.type) {
            TaskStatus task_status;
            task_status = new TaskStatus();
            task_status.read(iprot);
            return task_status;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case RUNNER_HEADER:
        RunnerHeader runner_header = (RunnerHeader)value_;
        runner_header.write(oprot);
        return;
      case PROCESS_STATUS:
        ProcessStatus process_status = (ProcessStatus)value_;
        process_status.write(oprot);
        return;
      case TASK_STATUS:
        TaskStatus task_status = (TaskStatus)value_;
        task_status.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case RUNNER_HEADER:
          RunnerHeader runner_header;
          runner_header = new RunnerHeader();
          runner_header.read(iprot);
          return runner_header;
        case PROCESS_STATUS:
          ProcessStatus process_status;
          process_status = new ProcessStatus();
          process_status.read(iprot);
          return process_status;
        case TASK_STATUS:
          TaskStatus task_status;
          task_status = new TaskStatus();
          task_status.read(iprot);
          return task_status;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case RUNNER_HEADER:
        RunnerHeader runner_header = (RunnerHeader)value_;
        runner_header.write(oprot);
        return;
      case PROCESS_STATUS:
        ProcessStatus process_status = (ProcessStatus)value_;
        process_status.write(oprot);
        return;
      case TASK_STATUS:
        TaskStatus task_status = (TaskStatus)value_;
        task_status.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case RUNNER_HEADER:
        return RUNNER_HEADER_FIELD_DESC;
      case PROCESS_STATUS:
        return PROCESS_STATUS_FIELD_DESC;
      case TASK_STATUS:
        return TASK_STATUS_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public RunnerHeader getRunner_header() {
    if (getSetField() == _Fields.RUNNER_HEADER) {
      return (RunnerHeader)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'runner_header' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRunner_header(RunnerHeader value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RUNNER_HEADER;
    value_ = value;
  }

  public ProcessStatus getProcess_status() {
    if (getSetField() == _Fields.PROCESS_STATUS) {
      return (ProcessStatus)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'process_status' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setProcess_status(ProcessStatus value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PROCESS_STATUS;
    value_ = value;
  }

  public TaskStatus getTask_status() {
    if (getSetField() == _Fields.TASK_STATUS) {
      return (TaskStatus)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'task_status' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTask_status(TaskStatus value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TASK_STATUS;
    value_ = value;
  }

  public boolean isSetRunner_header() {
    return setField_ == _Fields.RUNNER_HEADER;
  }


  public boolean isSetProcess_status() {
    return setField_ == _Fields.PROCESS_STATUS;
  }


  public boolean isSetTask_status() {
    return setField_ == _Fields.TASK_STATUS;
  }


  public boolean equals(Object other) {
    if (other instanceof RunnerCkpt) {
      return equals((RunnerCkpt)other);
    } else {
      return false;
    }
  }

  public boolean equals(RunnerCkpt other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(RunnerCkpt other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
