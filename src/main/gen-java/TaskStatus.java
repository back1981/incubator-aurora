/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TaskStatus implements org.apache.thrift.TBase<TaskStatus, TaskStatus._Fields>, java.io.Serializable, Cloneable, Comparable<TaskStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskStatus");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp_ms", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RUNNER_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("runner_pid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RUNNER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("runner_uid", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskStatusTupleSchemeFactory());
  }

  private TaskState state; // required
  private long timestamp_ms; // required
  private int runner_pid; // required
  private int runner_uid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TaskState
     */
    STATE((short)1, "state"),
    TIMESTAMP_MS((short)2, "timestamp_ms"),
    RUNNER_PID((short)3, "runner_pid"),
    RUNNER_UID((short)4, "runner_uid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // TIMESTAMP_MS
          return TIMESTAMP_MS;
        case 3: // RUNNER_PID
          return RUNNER_PID;
        case 4: // RUNNER_UID
          return RUNNER_UID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_MS_ISSET_ID = 0;
  private static final int __RUNNER_PID_ISSET_ID = 1;
  private static final int __RUNNER_UID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TaskState.class)));
    tmpMap.put(_Fields.TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("timestamp_ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNNER_PID, new org.apache.thrift.meta_data.FieldMetaData("runner_pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RUNNER_UID, new org.apache.thrift.meta_data.FieldMetaData("runner_uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskStatus.class, metaDataMap);
  }

  public TaskStatus() {
  }

  public TaskStatus(
    TaskState state,
    long timestamp_ms,
    int runner_pid,
    int runner_uid)
  {
    this();
    this.state = state;
    this.timestamp_ms = timestamp_ms;
    setTimestamp_msIsSet(true);
    this.runner_pid = runner_pid;
    setRunner_pidIsSet(true);
    this.runner_uid = runner_uid;
    setRunner_uidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskStatus(TaskStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.timestamp_ms = other.timestamp_ms;
    this.runner_pid = other.runner_pid;
    this.runner_uid = other.runner_uid;
  }

  public TaskStatus deepCopy() {
    return new TaskStatus(this);
  }

  @Override
  public void clear() {
    this.state = null;
    setTimestamp_msIsSet(false);
    this.timestamp_ms = 0;
    setRunner_pidIsSet(false);
    this.runner_pid = 0;
    setRunner_uidIsSet(false);
    this.runner_uid = 0;
  }

  /**
   * 
   * @see TaskState
   */
  public TaskState getState() {
    return this.state;
  }

  /**
   * 
   * @see TaskState
   */
  public TaskStatus setState(TaskState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public long getTimestamp_ms() {
    return this.timestamp_ms;
  }

  public TaskStatus setTimestamp_ms(long timestamp_ms) {
    this.timestamp_ms = timestamp_ms;
    setTimestamp_msIsSet(true);
    return this;
  }

  public void unsetTimestamp_ms() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_MS_ISSET_ID);
  }

  /** Returns true if field timestamp_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp_ms() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_MS_ISSET_ID);
  }

  public void setTimestamp_msIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_MS_ISSET_ID, value);
  }

  public int getRunner_pid() {
    return this.runner_pid;
  }

  public TaskStatus setRunner_pid(int runner_pid) {
    this.runner_pid = runner_pid;
    setRunner_pidIsSet(true);
    return this;
  }

  public void unsetRunner_pid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUNNER_PID_ISSET_ID);
  }

  /** Returns true if field runner_pid is set (has been assigned a value) and false otherwise */
  public boolean isSetRunner_pid() {
    return EncodingUtils.testBit(__isset_bitfield, __RUNNER_PID_ISSET_ID);
  }

  public void setRunner_pidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUNNER_PID_ISSET_ID, value);
  }

  public int getRunner_uid() {
    return this.runner_uid;
  }

  public TaskStatus setRunner_uid(int runner_uid) {
    this.runner_uid = runner_uid;
    setRunner_uidIsSet(true);
    return this;
  }

  public void unsetRunner_uid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUNNER_UID_ISSET_ID);
  }

  /** Returns true if field runner_uid is set (has been assigned a value) and false otherwise */
  public boolean isSetRunner_uid() {
    return EncodingUtils.testBit(__isset_bitfield, __RUNNER_UID_ISSET_ID);
  }

  public void setRunner_uidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUNNER_UID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((TaskState)value);
      }
      break;

    case TIMESTAMP_MS:
      if (value == null) {
        unsetTimestamp_ms();
      } else {
        setTimestamp_ms((Long)value);
      }
      break;

    case RUNNER_PID:
      if (value == null) {
        unsetRunner_pid();
      } else {
        setRunner_pid((Integer)value);
      }
      break;

    case RUNNER_UID:
      if (value == null) {
        unsetRunner_uid();
      } else {
        setRunner_uid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return getState();

    case TIMESTAMP_MS:
      return Long.valueOf(getTimestamp_ms());

    case RUNNER_PID:
      return Integer.valueOf(getRunner_pid());

    case RUNNER_UID:
      return Integer.valueOf(getRunner_uid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case TIMESTAMP_MS:
      return isSetTimestamp_ms();
    case RUNNER_PID:
      return isSetRunner_pid();
    case RUNNER_UID:
      return isSetRunner_uid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskStatus)
      return this.equals((TaskStatus)that);
    return false;
  }

  public boolean equals(TaskStatus that) {
    if (that == null)
      return false;

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_timestamp_ms = true;
    boolean that_present_timestamp_ms = true;
    if (this_present_timestamp_ms || that_present_timestamp_ms) {
      if (!(this_present_timestamp_ms && that_present_timestamp_ms))
        return false;
      if (this.timestamp_ms != that.timestamp_ms)
        return false;
    }

    boolean this_present_runner_pid = true;
    boolean that_present_runner_pid = true;
    if (this_present_runner_pid || that_present_runner_pid) {
      if (!(this_present_runner_pid && that_present_runner_pid))
        return false;
      if (this.runner_pid != that.runner_pid)
        return false;
    }

    boolean this_present_runner_uid = true;
    boolean that_present_runner_uid = true;
    if (this_present_runner_uid || that_present_runner_uid) {
      if (!(this_present_runner_uid && that_present_runner_uid))
        return false;
      if (this.runner_uid != that.runner_uid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_state = true && (isSetState());
    builder.append(present_state);
    if (present_state)
      builder.append(state.getValue());

    boolean present_timestamp_ms = true;
    builder.append(present_timestamp_ms);
    if (present_timestamp_ms)
      builder.append(timestamp_ms);

    boolean present_runner_pid = true;
    builder.append(present_runner_pid);
    if (present_runner_pid)
      builder.append(runner_pid);

    boolean present_runner_uid = true;
    builder.append(present_runner_uid);
    if (present_runner_uid)
      builder.append(runner_uid);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(TaskStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp_ms()).compareTo(other.isSetTimestamp_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp_ms, other.timestamp_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunner_pid()).compareTo(other.isSetRunner_pid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunner_pid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runner_pid, other.runner_pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunner_uid()).compareTo(other.isSetRunner_uid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunner_uid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runner_uid, other.runner_uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskStatus(");
    boolean first = true;

    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp_ms:");
    sb.append(this.timestamp_ms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("runner_pid:");
    sb.append(this.runner_pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("runner_uid:");
    sb.append(this.runner_uid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskStatusStandardSchemeFactory implements SchemeFactory {
    public TaskStatusStandardScheme getScheme() {
      return new TaskStatusStandardScheme();
    }
  }

  private static class TaskStatusStandardScheme extends StandardScheme<TaskStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = TaskState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp_ms = iprot.readI64();
              struct.setTimestamp_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RUNNER_PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runner_pid = iprot.readI32();
              struct.setRunner_pidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RUNNER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runner_uid = iprot.readI32();
              struct.setRunner_uidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_MS_FIELD_DESC);
      oprot.writeI64(struct.timestamp_ms);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RUNNER_PID_FIELD_DESC);
      oprot.writeI32(struct.runner_pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RUNNER_UID_FIELD_DESC);
      oprot.writeI32(struct.runner_uid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskStatusTupleSchemeFactory implements SchemeFactory {
    public TaskStatusTupleScheme getScheme() {
      return new TaskStatusTupleScheme();
    }
  }

  private static class TaskStatusTupleScheme extends TupleScheme<TaskStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetState()) {
        optionals.set(0);
      }
      if (struct.isSetTimestamp_ms()) {
        optionals.set(1);
      }
      if (struct.isSetRunner_pid()) {
        optionals.set(2);
      }
      if (struct.isSetRunner_uid()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetTimestamp_ms()) {
        oprot.writeI64(struct.timestamp_ms);
      }
      if (struct.isSetRunner_pid()) {
        oprot.writeI32(struct.runner_pid);
      }
      if (struct.isSetRunner_uid()) {
        oprot.writeI32(struct.runner_uid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.state = TaskState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timestamp_ms = iprot.readI64();
        struct.setTimestamp_msIsSet(true);
      }
      if (incoming.get(2)) {
        struct.runner_pid = iprot.readI32();
        struct.setRunner_pidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.runner_uid = iprot.readI32();
        struct.setRunner_uidIsSet(true);
      }
    }
  }

}

