/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RunnerState implements org.apache.thrift.TBase<RunnerState, RunnerState._Fields>, java.io.Serializable, Cloneable, Comparable<RunnerState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunnerState");

  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PROCESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("processes", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RunnerStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RunnerStateTupleSchemeFactory());
  }

  private RunnerHeader header; // required
  private List<TaskStatus> statuses; // required
  private Map<String,List<ProcessStatus>> processes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEADER((short)1, "header"),
    STATUSES((short)2, "statuses"),
    PROCESSES((short)3, "processes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEADER
          return HEADER;
        case 2: // STATUSES
          return STATUSES;
        case 3: // PROCESSES
          return PROCESSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RunnerHeader.class)));
    tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskStatus.class))));
    tmpMap.put(_Fields.PROCESSES, new org.apache.thrift.meta_data.FieldMetaData("processes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProcessStatus.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunnerState.class, metaDataMap);
  }

  public RunnerState() {
  }

  public RunnerState(
    RunnerHeader header,
    List<TaskStatus> statuses,
    Map<String,List<ProcessStatus>> processes)
  {
    this();
    this.header = header;
    this.statuses = statuses;
    this.processes = processes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RunnerState(RunnerState other) {
    if (other.isSetHeader()) {
      this.header = new RunnerHeader(other.header);
    }
    if (other.isSetStatuses()) {
      List<TaskStatus> __this__statuses = new ArrayList<TaskStatus>(other.statuses.size());
      for (TaskStatus other_element : other.statuses) {
        __this__statuses.add(new TaskStatus(other_element));
      }
      this.statuses = __this__statuses;
    }
    if (other.isSetProcesses()) {
      Map<String,List<ProcessStatus>> __this__processes = new HashMap<String,List<ProcessStatus>>(other.processes.size());
      for (Map.Entry<String, List<ProcessStatus>> other_element : other.processes.entrySet()) {

        String other_element_key = other_element.getKey();
        List<ProcessStatus> other_element_value = other_element.getValue();

        String __this__processes_copy_key = other_element_key;

        List<ProcessStatus> __this__processes_copy_value = new ArrayList<ProcessStatus>(other_element_value.size());
        for (ProcessStatus other_element_value_element : other_element_value) {
          __this__processes_copy_value.add(new ProcessStatus(other_element_value_element));
        }

        __this__processes.put(__this__processes_copy_key, __this__processes_copy_value);
      }
      this.processes = __this__processes;
    }
  }

  public RunnerState deepCopy() {
    return new RunnerState(this);
  }

  @Override
  public void clear() {
    this.header = null;
    this.statuses = null;
    this.processes = null;
  }

  public RunnerHeader getHeader() {
    return this.header;
  }

  public RunnerState setHeader(RunnerHeader header) {
    this.header = header;
    return this;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  public int getStatusesSize() {
    return (this.statuses == null) ? 0 : this.statuses.size();
  }

  public java.util.Iterator<TaskStatus> getStatusesIterator() {
    return (this.statuses == null) ? null : this.statuses.iterator();
  }

  public void addToStatuses(TaskStatus elem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<TaskStatus>();
    }
    this.statuses.add(elem);
  }

  public List<TaskStatus> getStatuses() {
    return this.statuses;
  }

  public RunnerState setStatuses(List<TaskStatus> statuses) {
    this.statuses = statuses;
    return this;
  }

  public void unsetStatuses() {
    this.statuses = null;
  }

  /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
  public boolean isSetStatuses() {
    return this.statuses != null;
  }

  public void setStatusesIsSet(boolean value) {
    if (!value) {
      this.statuses = null;
    }
  }

  public int getProcessesSize() {
    return (this.processes == null) ? 0 : this.processes.size();
  }

  public void putToProcesses(String key, List<ProcessStatus> val) {
    if (this.processes == null) {
      this.processes = new HashMap<String,List<ProcessStatus>>();
    }
    this.processes.put(key, val);
  }

  public Map<String,List<ProcessStatus>> getProcesses() {
    return this.processes;
  }

  public RunnerState setProcesses(Map<String,List<ProcessStatus>> processes) {
    this.processes = processes;
    return this;
  }

  public void unsetProcesses() {
    this.processes = null;
  }

  /** Returns true if field processes is set (has been assigned a value) and false otherwise */
  public boolean isSetProcesses() {
    return this.processes != null;
  }

  public void setProcessesIsSet(boolean value) {
    if (!value) {
      this.processes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((RunnerHeader)value);
      }
      break;

    case STATUSES:
      if (value == null) {
        unsetStatuses();
      } else {
        setStatuses((List<TaskStatus>)value);
      }
      break;

    case PROCESSES:
      if (value == null) {
        unsetProcesses();
      } else {
        setProcesses((Map<String,List<ProcessStatus>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEADER:
      return getHeader();

    case STATUSES:
      return getStatuses();

    case PROCESSES:
      return getProcesses();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEADER:
      return isSetHeader();
    case STATUSES:
      return isSetStatuses();
    case PROCESSES:
      return isSetProcesses();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RunnerState)
      return this.equals((RunnerState)that);
    return false;
  }

  public boolean equals(RunnerState that) {
    if (that == null)
      return false;

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    boolean this_present_statuses = true && this.isSetStatuses();
    boolean that_present_statuses = true && that.isSetStatuses();
    if (this_present_statuses || that_present_statuses) {
      if (!(this_present_statuses && that_present_statuses))
        return false;
      if (!this.statuses.equals(that.statuses))
        return false;
    }

    boolean this_present_processes = true && this.isSetProcesses();
    boolean that_present_processes = true && that.isSetProcesses();
    if (this_present_processes || that_present_processes) {
      if (!(this_present_processes && that_present_processes))
        return false;
      if (!this.processes.equals(that.processes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_header = true && (isSetHeader());
    builder.append(present_header);
    if (present_header)
      builder.append(header);

    boolean present_statuses = true && (isSetStatuses());
    builder.append(present_statuses);
    if (present_statuses)
      builder.append(statuses);

    boolean present_processes = true && (isSetProcesses());
    builder.append(present_processes);
    if (present_processes)
      builder.append(processes);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(RunnerState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHeader()).compareTo(other.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatuses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcesses()).compareTo(other.isSetProcesses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcesses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processes, other.processes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RunnerState(");
    boolean first = true;

    sb.append("header:");
    if (this.header == null) {
      sb.append("null");
    } else {
      sb.append(this.header);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statuses:");
    if (this.statuses == null) {
      sb.append("null");
    } else {
      sb.append(this.statuses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("processes:");
    if (this.processes == null) {
      sb.append("null");
    } else {
      sb.append(this.processes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (header != null) {
      header.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RunnerStateStandardSchemeFactory implements SchemeFactory {
    public RunnerStateStandardScheme getScheme() {
      return new RunnerStateStandardScheme();
    }
  }

  private static class RunnerStateStandardScheme extends StandardScheme<RunnerState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RunnerState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.header = new RunnerHeader();
              struct.header.read(iprot);
              struct.setHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.statuses = new ArrayList<TaskStatus>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  TaskStatus _elem12;
                  _elem12 = new TaskStatus();
                  _elem12.read(iprot);
                  struct.statuses.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setStatusesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROCESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                struct.processes = new HashMap<String,List<ProcessStatus>>(2*_map13.size);
                for (int _i14 = 0; _i14 < _map13.size; ++_i14)
                {
                  String _key15;
                  List<ProcessStatus> _val16;
                  _key15 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                    _val16 = new ArrayList<ProcessStatus>(_list17.size);
                    for (int _i18 = 0; _i18 < _list17.size; ++_i18)
                    {
                      ProcessStatus _elem19;
                      _elem19 = new ProcessStatus();
                      _elem19.read(iprot);
                      _val16.add(_elem19);
                    }
                    iprot.readListEnd();
                  }
                  struct.processes.put(_key15, _val16);
                }
                iprot.readMapEnd();
              }
              struct.setProcessesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RunnerState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.header != null) {
        oprot.writeFieldBegin(HEADER_FIELD_DESC);
        struct.header.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.statuses != null) {
        oprot.writeFieldBegin(STATUSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.statuses.size()));
          for (TaskStatus _iter20 : struct.statuses)
          {
            _iter20.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.processes != null) {
        oprot.writeFieldBegin(PROCESSES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.processes.size()));
          for (Map.Entry<String, List<ProcessStatus>> _iter21 : struct.processes.entrySet())
          {
            oprot.writeString(_iter21.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter21.getValue().size()));
              for (ProcessStatus _iter22 : _iter21.getValue())
              {
                _iter22.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RunnerStateTupleSchemeFactory implements SchemeFactory {
    public RunnerStateTupleScheme getScheme() {
      return new RunnerStateTupleScheme();
    }
  }

  private static class RunnerStateTupleScheme extends TupleScheme<RunnerState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RunnerState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHeader()) {
        optionals.set(0);
      }
      if (struct.isSetStatuses()) {
        optionals.set(1);
      }
      if (struct.isSetProcesses()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetHeader()) {
        struct.header.write(oprot);
      }
      if (struct.isSetStatuses()) {
        {
          oprot.writeI32(struct.statuses.size());
          for (TaskStatus _iter23 : struct.statuses)
          {
            _iter23.write(oprot);
          }
        }
      }
      if (struct.isSetProcesses()) {
        {
          oprot.writeI32(struct.processes.size());
          for (Map.Entry<String, List<ProcessStatus>> _iter24 : struct.processes.entrySet())
          {
            oprot.writeString(_iter24.getKey());
            {
              oprot.writeI32(_iter24.getValue().size());
              for (ProcessStatus _iter25 : _iter24.getValue())
              {
                _iter25.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RunnerState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.header = new RunnerHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.statuses = new ArrayList<TaskStatus>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            TaskStatus _elem28;
            _elem28 = new TaskStatus();
            _elem28.read(iprot);
            struct.statuses.add(_elem28);
          }
        }
        struct.setStatusesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map29 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.processes = new HashMap<String,List<ProcessStatus>>(2*_map29.size);
          for (int _i30 = 0; _i30 < _map29.size; ++_i30)
          {
            String _key31;
            List<ProcessStatus> _val32;
            _key31 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val32 = new ArrayList<ProcessStatus>(_list33.size);
              for (int _i34 = 0; _i34 < _list33.size; ++_i34)
              {
                ProcessStatus _elem35;
                _elem35 = new ProcessStatus();
                _elem35.read(iprot);
                _val32.add(_elem35);
              }
            }
            struct.processes.put(_key31, _val32);
          }
        }
        struct.setProcessesIsSet(true);
      }
    }
  }

}

