/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.aurora.gen.storage;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Op extends org.apache.thrift.TUnion<Op, Op._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Op");
  private static final org.apache.thrift.protocol.TField SAVE_FRAMEWORK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("saveFrameworkId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SAVE_ACCEPTED_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("saveAcceptedJob", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField REMOVE_JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("removeJob", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SAVE_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("saveTasks", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField REMOVE_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("removeTasks", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField SAVE_QUOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("saveQuota", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField REMOVE_QUOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("removeQuota", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField SAVE_HOST_ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("saveHostAttributes", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField REWRITE_TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("rewriteTask", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField SAVE_LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("saveLock", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField REMOVE_LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("removeLock", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField SAVE_JOB_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("saveJobUpdate", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField SAVE_JOB_UPDATE_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("saveJobUpdateEvent", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField SAVE_JOB_INSTANCE_UPDATE_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("saveJobInstanceUpdateEvent", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField PRUNE_JOB_UPDATE_HISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("pruneJobUpdateHistory", org.apache.thrift.protocol.TType.STRUCT, (short)17);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SAVE_FRAMEWORK_ID((short)1, "saveFrameworkId"),
    SAVE_ACCEPTED_JOB((short)2, "saveAcceptedJob"),
    REMOVE_JOB((short)5, "removeJob"),
    SAVE_TASKS((short)6, "saveTasks"),
    REMOVE_TASKS((short)7, "removeTasks"),
    SAVE_QUOTA((short)8, "saveQuota"),
    REMOVE_QUOTA((short)9, "removeQuota"),
    SAVE_HOST_ATTRIBUTES((short)10, "saveHostAttributes"),
    REWRITE_TASK((short)11, "rewriteTask"),
    SAVE_LOCK((short)12, "saveLock"),
    REMOVE_LOCK((short)13, "removeLock"),
    SAVE_JOB_UPDATE((short)14, "saveJobUpdate"),
    SAVE_JOB_UPDATE_EVENT((short)15, "saveJobUpdateEvent"),
    SAVE_JOB_INSTANCE_UPDATE_EVENT((short)16, "saveJobInstanceUpdateEvent"),
    PRUNE_JOB_UPDATE_HISTORY((short)17, "pruneJobUpdateHistory");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SAVE_FRAMEWORK_ID
          return SAVE_FRAMEWORK_ID;
        case 2: // SAVE_ACCEPTED_JOB
          return SAVE_ACCEPTED_JOB;
        case 5: // REMOVE_JOB
          return REMOVE_JOB;
        case 6: // SAVE_TASKS
          return SAVE_TASKS;
        case 7: // REMOVE_TASKS
          return REMOVE_TASKS;
        case 8: // SAVE_QUOTA
          return SAVE_QUOTA;
        case 9: // REMOVE_QUOTA
          return REMOVE_QUOTA;
        case 10: // SAVE_HOST_ATTRIBUTES
          return SAVE_HOST_ATTRIBUTES;
        case 11: // REWRITE_TASK
          return REWRITE_TASK;
        case 12: // SAVE_LOCK
          return SAVE_LOCK;
        case 13: // REMOVE_LOCK
          return REMOVE_LOCK;
        case 14: // SAVE_JOB_UPDATE
          return SAVE_JOB_UPDATE;
        case 15: // SAVE_JOB_UPDATE_EVENT
          return SAVE_JOB_UPDATE_EVENT;
        case 16: // SAVE_JOB_INSTANCE_UPDATE_EVENT
          return SAVE_JOB_INSTANCE_UPDATE_EVENT;
        case 17: // PRUNE_JOB_UPDATE_HISTORY
          return PRUNE_JOB_UPDATE_HISTORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SAVE_FRAMEWORK_ID, new org.apache.thrift.meta_data.FieldMetaData("saveFrameworkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SaveFrameworkId.class)));
    tmpMap.put(_Fields.SAVE_ACCEPTED_JOB, new org.apache.thrift.meta_data.FieldMetaData("saveAcceptedJob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SaveAcceptedJob.class)));
    tmpMap.put(_Fields.REMOVE_JOB, new org.apache.thrift.meta_data.FieldMetaData("removeJob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoveJob.class)));
    tmpMap.put(_Fields.SAVE_TASKS, new org.apache.thrift.meta_data.FieldMetaData("saveTasks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SaveTasks.class)));
    tmpMap.put(_Fields.REMOVE_TASKS, new org.apache.thrift.meta_data.FieldMetaData("removeTasks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoveTasks.class)));
    tmpMap.put(_Fields.SAVE_QUOTA, new org.apache.thrift.meta_data.FieldMetaData("saveQuota", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SaveQuota.class)));
    tmpMap.put(_Fields.REMOVE_QUOTA, new org.apache.thrift.meta_data.FieldMetaData("removeQuota", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoveQuota.class)));
    tmpMap.put(_Fields.SAVE_HOST_ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("saveHostAttributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SaveHostAttributes.class)));
    tmpMap.put(_Fields.REWRITE_TASK, new org.apache.thrift.meta_data.FieldMetaData("rewriteTask", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RewriteTask.class)));
    tmpMap.put(_Fields.SAVE_LOCK, new org.apache.thrift.meta_data.FieldMetaData("saveLock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SaveLock.class)));
    tmpMap.put(_Fields.REMOVE_LOCK, new org.apache.thrift.meta_data.FieldMetaData("removeLock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoveLock.class)));
    tmpMap.put(_Fields.SAVE_JOB_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("saveJobUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SaveJobUpdate.class)));
    tmpMap.put(_Fields.SAVE_JOB_UPDATE_EVENT, new org.apache.thrift.meta_data.FieldMetaData("saveJobUpdateEvent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SaveJobUpdateEvent.class)));
    tmpMap.put(_Fields.SAVE_JOB_INSTANCE_UPDATE_EVENT, new org.apache.thrift.meta_data.FieldMetaData("saveJobInstanceUpdateEvent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SaveJobInstanceUpdateEvent.class)));
    tmpMap.put(_Fields.PRUNE_JOB_UPDATE_HISTORY, new org.apache.thrift.meta_data.FieldMetaData("pruneJobUpdateHistory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PruneJobUpdateHistory.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Op.class, metaDataMap);
  }

  public Op() {
    super();
  }

  public Op(_Fields setField, Object value) {
    super(setField, value);
  }

  public Op(Op other) {
    super(other);
  }
  public Op deepCopy() {
    return new Op(this);
  }

  public static Op saveFrameworkId(SaveFrameworkId value) {
    Op x = new Op();
    x.setSaveFrameworkId(value);
    return x;
  }

  public static Op saveAcceptedJob(SaveAcceptedJob value) {
    Op x = new Op();
    x.setSaveAcceptedJob(value);
    return x;
  }

  public static Op removeJob(RemoveJob value) {
    Op x = new Op();
    x.setRemoveJob(value);
    return x;
  }

  public static Op saveTasks(SaveTasks value) {
    Op x = new Op();
    x.setSaveTasks(value);
    return x;
  }

  public static Op removeTasks(RemoveTasks value) {
    Op x = new Op();
    x.setRemoveTasks(value);
    return x;
  }

  public static Op saveQuota(SaveQuota value) {
    Op x = new Op();
    x.setSaveQuota(value);
    return x;
  }

  public static Op removeQuota(RemoveQuota value) {
    Op x = new Op();
    x.setRemoveQuota(value);
    return x;
  }

  public static Op saveHostAttributes(SaveHostAttributes value) {
    Op x = new Op();
    x.setSaveHostAttributes(value);
    return x;
  }

  public static Op rewriteTask(RewriteTask value) {
    Op x = new Op();
    x.setRewriteTask(value);
    return x;
  }

  public static Op saveLock(SaveLock value) {
    Op x = new Op();
    x.setSaveLock(value);
    return x;
  }

  public static Op removeLock(RemoveLock value) {
    Op x = new Op();
    x.setRemoveLock(value);
    return x;
  }

  public static Op saveJobUpdate(SaveJobUpdate value) {
    Op x = new Op();
    x.setSaveJobUpdate(value);
    return x;
  }

  public static Op saveJobUpdateEvent(SaveJobUpdateEvent value) {
    Op x = new Op();
    x.setSaveJobUpdateEvent(value);
    return x;
  }

  public static Op saveJobInstanceUpdateEvent(SaveJobInstanceUpdateEvent value) {
    Op x = new Op();
    x.setSaveJobInstanceUpdateEvent(value);
    return x;
  }

  public static Op pruneJobUpdateHistory(PruneJobUpdateHistory value) {
    Op x = new Op();
    x.setPruneJobUpdateHistory(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case SAVE_FRAMEWORK_ID:
        if (value instanceof SaveFrameworkId) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SaveFrameworkId for field 'saveFrameworkId', but got " + value.getClass().getSimpleName());
      case SAVE_ACCEPTED_JOB:
        if (value instanceof SaveAcceptedJob) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SaveAcceptedJob for field 'saveAcceptedJob', but got " + value.getClass().getSimpleName());
      case REMOVE_JOB:
        if (value instanceof RemoveJob) {
          break;
        }
        throw new ClassCastException("Was expecting value of type RemoveJob for field 'removeJob', but got " + value.getClass().getSimpleName());
      case SAVE_TASKS:
        if (value instanceof SaveTasks) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SaveTasks for field 'saveTasks', but got " + value.getClass().getSimpleName());
      case REMOVE_TASKS:
        if (value instanceof RemoveTasks) {
          break;
        }
        throw new ClassCastException("Was expecting value of type RemoveTasks for field 'removeTasks', but got " + value.getClass().getSimpleName());
      case SAVE_QUOTA:
        if (value instanceof SaveQuota) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SaveQuota for field 'saveQuota', but got " + value.getClass().getSimpleName());
      case REMOVE_QUOTA:
        if (value instanceof RemoveQuota) {
          break;
        }
        throw new ClassCastException("Was expecting value of type RemoveQuota for field 'removeQuota', but got " + value.getClass().getSimpleName());
      case SAVE_HOST_ATTRIBUTES:
        if (value instanceof SaveHostAttributes) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SaveHostAttributes for field 'saveHostAttributes', but got " + value.getClass().getSimpleName());
      case REWRITE_TASK:
        if (value instanceof RewriteTask) {
          break;
        }
        throw new ClassCastException("Was expecting value of type RewriteTask for field 'rewriteTask', but got " + value.getClass().getSimpleName());
      case SAVE_LOCK:
        if (value instanceof SaveLock) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SaveLock for field 'saveLock', but got " + value.getClass().getSimpleName());
      case REMOVE_LOCK:
        if (value instanceof RemoveLock) {
          break;
        }
        throw new ClassCastException("Was expecting value of type RemoveLock for field 'removeLock', but got " + value.getClass().getSimpleName());
      case SAVE_JOB_UPDATE:
        if (value instanceof SaveJobUpdate) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SaveJobUpdate for field 'saveJobUpdate', but got " + value.getClass().getSimpleName());
      case SAVE_JOB_UPDATE_EVENT:
        if (value instanceof SaveJobUpdateEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SaveJobUpdateEvent for field 'saveJobUpdateEvent', but got " + value.getClass().getSimpleName());
      case SAVE_JOB_INSTANCE_UPDATE_EVENT:
        if (value instanceof SaveJobInstanceUpdateEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SaveJobInstanceUpdateEvent for field 'saveJobInstanceUpdateEvent', but got " + value.getClass().getSimpleName());
      case PRUNE_JOB_UPDATE_HISTORY:
        if (value instanceof PruneJobUpdateHistory) {
          break;
        }
        throw new ClassCastException("Was expecting value of type PruneJobUpdateHistory for field 'pruneJobUpdateHistory', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case SAVE_FRAMEWORK_ID:
          if (field.type == SAVE_FRAMEWORK_ID_FIELD_DESC.type) {
            SaveFrameworkId saveFrameworkId;
            saveFrameworkId = new SaveFrameworkId();
            saveFrameworkId.read(iprot);
            return saveFrameworkId;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SAVE_ACCEPTED_JOB:
          if (field.type == SAVE_ACCEPTED_JOB_FIELD_DESC.type) {
            SaveAcceptedJob saveAcceptedJob;
            saveAcceptedJob = new SaveAcceptedJob();
            saveAcceptedJob.read(iprot);
            return saveAcceptedJob;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REMOVE_JOB:
          if (field.type == REMOVE_JOB_FIELD_DESC.type) {
            RemoveJob removeJob;
            removeJob = new RemoveJob();
            removeJob.read(iprot);
            return removeJob;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SAVE_TASKS:
          if (field.type == SAVE_TASKS_FIELD_DESC.type) {
            SaveTasks saveTasks;
            saveTasks = new SaveTasks();
            saveTasks.read(iprot);
            return saveTasks;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REMOVE_TASKS:
          if (field.type == REMOVE_TASKS_FIELD_DESC.type) {
            RemoveTasks removeTasks;
            removeTasks = new RemoveTasks();
            removeTasks.read(iprot);
            return removeTasks;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SAVE_QUOTA:
          if (field.type == SAVE_QUOTA_FIELD_DESC.type) {
            SaveQuota saveQuota;
            saveQuota = new SaveQuota();
            saveQuota.read(iprot);
            return saveQuota;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REMOVE_QUOTA:
          if (field.type == REMOVE_QUOTA_FIELD_DESC.type) {
            RemoveQuota removeQuota;
            removeQuota = new RemoveQuota();
            removeQuota.read(iprot);
            return removeQuota;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SAVE_HOST_ATTRIBUTES:
          if (field.type == SAVE_HOST_ATTRIBUTES_FIELD_DESC.type) {
            SaveHostAttributes saveHostAttributes;
            saveHostAttributes = new SaveHostAttributes();
            saveHostAttributes.read(iprot);
            return saveHostAttributes;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REWRITE_TASK:
          if (field.type == REWRITE_TASK_FIELD_DESC.type) {
            RewriteTask rewriteTask;
            rewriteTask = new RewriteTask();
            rewriteTask.read(iprot);
            return rewriteTask;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SAVE_LOCK:
          if (field.type == SAVE_LOCK_FIELD_DESC.type) {
            SaveLock saveLock;
            saveLock = new SaveLock();
            saveLock.read(iprot);
            return saveLock;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REMOVE_LOCK:
          if (field.type == REMOVE_LOCK_FIELD_DESC.type) {
            RemoveLock removeLock;
            removeLock = new RemoveLock();
            removeLock.read(iprot);
            return removeLock;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SAVE_JOB_UPDATE:
          if (field.type == SAVE_JOB_UPDATE_FIELD_DESC.type) {
            SaveJobUpdate saveJobUpdate;
            saveJobUpdate = new SaveJobUpdate();
            saveJobUpdate.read(iprot);
            return saveJobUpdate;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SAVE_JOB_UPDATE_EVENT:
          if (field.type == SAVE_JOB_UPDATE_EVENT_FIELD_DESC.type) {
            SaveJobUpdateEvent saveJobUpdateEvent;
            saveJobUpdateEvent = new SaveJobUpdateEvent();
            saveJobUpdateEvent.read(iprot);
            return saveJobUpdateEvent;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SAVE_JOB_INSTANCE_UPDATE_EVENT:
          if (field.type == SAVE_JOB_INSTANCE_UPDATE_EVENT_FIELD_DESC.type) {
            SaveJobInstanceUpdateEvent saveJobInstanceUpdateEvent;
            saveJobInstanceUpdateEvent = new SaveJobInstanceUpdateEvent();
            saveJobInstanceUpdateEvent.read(iprot);
            return saveJobInstanceUpdateEvent;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PRUNE_JOB_UPDATE_HISTORY:
          if (field.type == PRUNE_JOB_UPDATE_HISTORY_FIELD_DESC.type) {
            PruneJobUpdateHistory pruneJobUpdateHistory;
            pruneJobUpdateHistory = new PruneJobUpdateHistory();
            pruneJobUpdateHistory.read(iprot);
            return pruneJobUpdateHistory;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case SAVE_FRAMEWORK_ID:
        SaveFrameworkId saveFrameworkId = (SaveFrameworkId)value_;
        saveFrameworkId.write(oprot);
        return;
      case SAVE_ACCEPTED_JOB:
        SaveAcceptedJob saveAcceptedJob = (SaveAcceptedJob)value_;
        saveAcceptedJob.write(oprot);
        return;
      case REMOVE_JOB:
        RemoveJob removeJob = (RemoveJob)value_;
        removeJob.write(oprot);
        return;
      case SAVE_TASKS:
        SaveTasks saveTasks = (SaveTasks)value_;
        saveTasks.write(oprot);
        return;
      case REMOVE_TASKS:
        RemoveTasks removeTasks = (RemoveTasks)value_;
        removeTasks.write(oprot);
        return;
      case SAVE_QUOTA:
        SaveQuota saveQuota = (SaveQuota)value_;
        saveQuota.write(oprot);
        return;
      case REMOVE_QUOTA:
        RemoveQuota removeQuota = (RemoveQuota)value_;
        removeQuota.write(oprot);
        return;
      case SAVE_HOST_ATTRIBUTES:
        SaveHostAttributes saveHostAttributes = (SaveHostAttributes)value_;
        saveHostAttributes.write(oprot);
        return;
      case REWRITE_TASK:
        RewriteTask rewriteTask = (RewriteTask)value_;
        rewriteTask.write(oprot);
        return;
      case SAVE_LOCK:
        SaveLock saveLock = (SaveLock)value_;
        saveLock.write(oprot);
        return;
      case REMOVE_LOCK:
        RemoveLock removeLock = (RemoveLock)value_;
        removeLock.write(oprot);
        return;
      case SAVE_JOB_UPDATE:
        SaveJobUpdate saveJobUpdate = (SaveJobUpdate)value_;
        saveJobUpdate.write(oprot);
        return;
      case SAVE_JOB_UPDATE_EVENT:
        SaveJobUpdateEvent saveJobUpdateEvent = (SaveJobUpdateEvent)value_;
        saveJobUpdateEvent.write(oprot);
        return;
      case SAVE_JOB_INSTANCE_UPDATE_EVENT:
        SaveJobInstanceUpdateEvent saveJobInstanceUpdateEvent = (SaveJobInstanceUpdateEvent)value_;
        saveJobInstanceUpdateEvent.write(oprot);
        return;
      case PRUNE_JOB_UPDATE_HISTORY:
        PruneJobUpdateHistory pruneJobUpdateHistory = (PruneJobUpdateHistory)value_;
        pruneJobUpdateHistory.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case SAVE_FRAMEWORK_ID:
          SaveFrameworkId saveFrameworkId;
          saveFrameworkId = new SaveFrameworkId();
          saveFrameworkId.read(iprot);
          return saveFrameworkId;
        case SAVE_ACCEPTED_JOB:
          SaveAcceptedJob saveAcceptedJob;
          saveAcceptedJob = new SaveAcceptedJob();
          saveAcceptedJob.read(iprot);
          return saveAcceptedJob;
        case REMOVE_JOB:
          RemoveJob removeJob;
          removeJob = new RemoveJob();
          removeJob.read(iprot);
          return removeJob;
        case SAVE_TASKS:
          SaveTasks saveTasks;
          saveTasks = new SaveTasks();
          saveTasks.read(iprot);
          return saveTasks;
        case REMOVE_TASKS:
          RemoveTasks removeTasks;
          removeTasks = new RemoveTasks();
          removeTasks.read(iprot);
          return removeTasks;
        case SAVE_QUOTA:
          SaveQuota saveQuota;
          saveQuota = new SaveQuota();
          saveQuota.read(iprot);
          return saveQuota;
        case REMOVE_QUOTA:
          RemoveQuota removeQuota;
          removeQuota = new RemoveQuota();
          removeQuota.read(iprot);
          return removeQuota;
        case SAVE_HOST_ATTRIBUTES:
          SaveHostAttributes saveHostAttributes;
          saveHostAttributes = new SaveHostAttributes();
          saveHostAttributes.read(iprot);
          return saveHostAttributes;
        case REWRITE_TASK:
          RewriteTask rewriteTask;
          rewriteTask = new RewriteTask();
          rewriteTask.read(iprot);
          return rewriteTask;
        case SAVE_LOCK:
          SaveLock saveLock;
          saveLock = new SaveLock();
          saveLock.read(iprot);
          return saveLock;
        case REMOVE_LOCK:
          RemoveLock removeLock;
          removeLock = new RemoveLock();
          removeLock.read(iprot);
          return removeLock;
        case SAVE_JOB_UPDATE:
          SaveJobUpdate saveJobUpdate;
          saveJobUpdate = new SaveJobUpdate();
          saveJobUpdate.read(iprot);
          return saveJobUpdate;
        case SAVE_JOB_UPDATE_EVENT:
          SaveJobUpdateEvent saveJobUpdateEvent;
          saveJobUpdateEvent = new SaveJobUpdateEvent();
          saveJobUpdateEvent.read(iprot);
          return saveJobUpdateEvent;
        case SAVE_JOB_INSTANCE_UPDATE_EVENT:
          SaveJobInstanceUpdateEvent saveJobInstanceUpdateEvent;
          saveJobInstanceUpdateEvent = new SaveJobInstanceUpdateEvent();
          saveJobInstanceUpdateEvent.read(iprot);
          return saveJobInstanceUpdateEvent;
        case PRUNE_JOB_UPDATE_HISTORY:
          PruneJobUpdateHistory pruneJobUpdateHistory;
          pruneJobUpdateHistory = new PruneJobUpdateHistory();
          pruneJobUpdateHistory.read(iprot);
          return pruneJobUpdateHistory;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case SAVE_FRAMEWORK_ID:
        SaveFrameworkId saveFrameworkId = (SaveFrameworkId)value_;
        saveFrameworkId.write(oprot);
        return;
      case SAVE_ACCEPTED_JOB:
        SaveAcceptedJob saveAcceptedJob = (SaveAcceptedJob)value_;
        saveAcceptedJob.write(oprot);
        return;
      case REMOVE_JOB:
        RemoveJob removeJob = (RemoveJob)value_;
        removeJob.write(oprot);
        return;
      case SAVE_TASKS:
        SaveTasks saveTasks = (SaveTasks)value_;
        saveTasks.write(oprot);
        return;
      case REMOVE_TASKS:
        RemoveTasks removeTasks = (RemoveTasks)value_;
        removeTasks.write(oprot);
        return;
      case SAVE_QUOTA:
        SaveQuota saveQuota = (SaveQuota)value_;
        saveQuota.write(oprot);
        return;
      case REMOVE_QUOTA:
        RemoveQuota removeQuota = (RemoveQuota)value_;
        removeQuota.write(oprot);
        return;
      case SAVE_HOST_ATTRIBUTES:
        SaveHostAttributes saveHostAttributes = (SaveHostAttributes)value_;
        saveHostAttributes.write(oprot);
        return;
      case REWRITE_TASK:
        RewriteTask rewriteTask = (RewriteTask)value_;
        rewriteTask.write(oprot);
        return;
      case SAVE_LOCK:
        SaveLock saveLock = (SaveLock)value_;
        saveLock.write(oprot);
        return;
      case REMOVE_LOCK:
        RemoveLock removeLock = (RemoveLock)value_;
        removeLock.write(oprot);
        return;
      case SAVE_JOB_UPDATE:
        SaveJobUpdate saveJobUpdate = (SaveJobUpdate)value_;
        saveJobUpdate.write(oprot);
        return;
      case SAVE_JOB_UPDATE_EVENT:
        SaveJobUpdateEvent saveJobUpdateEvent = (SaveJobUpdateEvent)value_;
        saveJobUpdateEvent.write(oprot);
        return;
      case SAVE_JOB_INSTANCE_UPDATE_EVENT:
        SaveJobInstanceUpdateEvent saveJobInstanceUpdateEvent = (SaveJobInstanceUpdateEvent)value_;
        saveJobInstanceUpdateEvent.write(oprot);
        return;
      case PRUNE_JOB_UPDATE_HISTORY:
        PruneJobUpdateHistory pruneJobUpdateHistory = (PruneJobUpdateHistory)value_;
        pruneJobUpdateHistory.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case SAVE_FRAMEWORK_ID:
        return SAVE_FRAMEWORK_ID_FIELD_DESC;
      case SAVE_ACCEPTED_JOB:
        return SAVE_ACCEPTED_JOB_FIELD_DESC;
      case REMOVE_JOB:
        return REMOVE_JOB_FIELD_DESC;
      case SAVE_TASKS:
        return SAVE_TASKS_FIELD_DESC;
      case REMOVE_TASKS:
        return REMOVE_TASKS_FIELD_DESC;
      case SAVE_QUOTA:
        return SAVE_QUOTA_FIELD_DESC;
      case REMOVE_QUOTA:
        return REMOVE_QUOTA_FIELD_DESC;
      case SAVE_HOST_ATTRIBUTES:
        return SAVE_HOST_ATTRIBUTES_FIELD_DESC;
      case REWRITE_TASK:
        return REWRITE_TASK_FIELD_DESC;
      case SAVE_LOCK:
        return SAVE_LOCK_FIELD_DESC;
      case REMOVE_LOCK:
        return REMOVE_LOCK_FIELD_DESC;
      case SAVE_JOB_UPDATE:
        return SAVE_JOB_UPDATE_FIELD_DESC;
      case SAVE_JOB_UPDATE_EVENT:
        return SAVE_JOB_UPDATE_EVENT_FIELD_DESC;
      case SAVE_JOB_INSTANCE_UPDATE_EVENT:
        return SAVE_JOB_INSTANCE_UPDATE_EVENT_FIELD_DESC;
      case PRUNE_JOB_UPDATE_HISTORY:
        return PRUNE_JOB_UPDATE_HISTORY_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public SaveFrameworkId getSaveFrameworkId() {
    if (getSetField() == _Fields.SAVE_FRAMEWORK_ID) {
      return (SaveFrameworkId)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'saveFrameworkId' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSaveFrameworkId(SaveFrameworkId value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SAVE_FRAMEWORK_ID;
    value_ = value;
  }

  public SaveAcceptedJob getSaveAcceptedJob() {
    if (getSetField() == _Fields.SAVE_ACCEPTED_JOB) {
      return (SaveAcceptedJob)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'saveAcceptedJob' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSaveAcceptedJob(SaveAcceptedJob value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SAVE_ACCEPTED_JOB;
    value_ = value;
  }

  public RemoveJob getRemoveJob() {
    if (getSetField() == _Fields.REMOVE_JOB) {
      return (RemoveJob)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'removeJob' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRemoveJob(RemoveJob value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REMOVE_JOB;
    value_ = value;
  }

  public SaveTasks getSaveTasks() {
    if (getSetField() == _Fields.SAVE_TASKS) {
      return (SaveTasks)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'saveTasks' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSaveTasks(SaveTasks value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SAVE_TASKS;
    value_ = value;
  }

  public RemoveTasks getRemoveTasks() {
    if (getSetField() == _Fields.REMOVE_TASKS) {
      return (RemoveTasks)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'removeTasks' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRemoveTasks(RemoveTasks value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REMOVE_TASKS;
    value_ = value;
  }

  public SaveQuota getSaveQuota() {
    if (getSetField() == _Fields.SAVE_QUOTA) {
      return (SaveQuota)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'saveQuota' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSaveQuota(SaveQuota value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SAVE_QUOTA;
    value_ = value;
  }

  public RemoveQuota getRemoveQuota() {
    if (getSetField() == _Fields.REMOVE_QUOTA) {
      return (RemoveQuota)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'removeQuota' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRemoveQuota(RemoveQuota value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REMOVE_QUOTA;
    value_ = value;
  }

  public SaveHostAttributes getSaveHostAttributes() {
    if (getSetField() == _Fields.SAVE_HOST_ATTRIBUTES) {
      return (SaveHostAttributes)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'saveHostAttributes' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSaveHostAttributes(SaveHostAttributes value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SAVE_HOST_ATTRIBUTES;
    value_ = value;
  }

  public RewriteTask getRewriteTask() {
    if (getSetField() == _Fields.REWRITE_TASK) {
      return (RewriteTask)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'rewriteTask' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRewriteTask(RewriteTask value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REWRITE_TASK;
    value_ = value;
  }

  public SaveLock getSaveLock() {
    if (getSetField() == _Fields.SAVE_LOCK) {
      return (SaveLock)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'saveLock' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSaveLock(SaveLock value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SAVE_LOCK;
    value_ = value;
  }

  public RemoveLock getRemoveLock() {
    if (getSetField() == _Fields.REMOVE_LOCK) {
      return (RemoveLock)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'removeLock' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRemoveLock(RemoveLock value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REMOVE_LOCK;
    value_ = value;
  }

  public SaveJobUpdate getSaveJobUpdate() {
    if (getSetField() == _Fields.SAVE_JOB_UPDATE) {
      return (SaveJobUpdate)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'saveJobUpdate' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSaveJobUpdate(SaveJobUpdate value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SAVE_JOB_UPDATE;
    value_ = value;
  }

  public SaveJobUpdateEvent getSaveJobUpdateEvent() {
    if (getSetField() == _Fields.SAVE_JOB_UPDATE_EVENT) {
      return (SaveJobUpdateEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'saveJobUpdateEvent' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSaveJobUpdateEvent(SaveJobUpdateEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SAVE_JOB_UPDATE_EVENT;
    value_ = value;
  }

  public SaveJobInstanceUpdateEvent getSaveJobInstanceUpdateEvent() {
    if (getSetField() == _Fields.SAVE_JOB_INSTANCE_UPDATE_EVENT) {
      return (SaveJobInstanceUpdateEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'saveJobInstanceUpdateEvent' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSaveJobInstanceUpdateEvent(SaveJobInstanceUpdateEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SAVE_JOB_INSTANCE_UPDATE_EVENT;
    value_ = value;
  }

  public PruneJobUpdateHistory getPruneJobUpdateHistory() {
    if (getSetField() == _Fields.PRUNE_JOB_UPDATE_HISTORY) {
      return (PruneJobUpdateHistory)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'pruneJobUpdateHistory' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPruneJobUpdateHistory(PruneJobUpdateHistory value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PRUNE_JOB_UPDATE_HISTORY;
    value_ = value;
  }

  public boolean isSetSaveFrameworkId() {
    return setField_ == _Fields.SAVE_FRAMEWORK_ID;
  }


  public boolean isSetSaveAcceptedJob() {
    return setField_ == _Fields.SAVE_ACCEPTED_JOB;
  }


  public boolean isSetRemoveJob() {
    return setField_ == _Fields.REMOVE_JOB;
  }


  public boolean isSetSaveTasks() {
    return setField_ == _Fields.SAVE_TASKS;
  }


  public boolean isSetRemoveTasks() {
    return setField_ == _Fields.REMOVE_TASKS;
  }


  public boolean isSetSaveQuota() {
    return setField_ == _Fields.SAVE_QUOTA;
  }


  public boolean isSetRemoveQuota() {
    return setField_ == _Fields.REMOVE_QUOTA;
  }


  public boolean isSetSaveHostAttributes() {
    return setField_ == _Fields.SAVE_HOST_ATTRIBUTES;
  }


  public boolean isSetRewriteTask() {
    return setField_ == _Fields.REWRITE_TASK;
  }


  public boolean isSetSaveLock() {
    return setField_ == _Fields.SAVE_LOCK;
  }


  public boolean isSetRemoveLock() {
    return setField_ == _Fields.REMOVE_LOCK;
  }


  public boolean isSetSaveJobUpdate() {
    return setField_ == _Fields.SAVE_JOB_UPDATE;
  }


  public boolean isSetSaveJobUpdateEvent() {
    return setField_ == _Fields.SAVE_JOB_UPDATE_EVENT;
  }


  public boolean isSetSaveJobInstanceUpdateEvent() {
    return setField_ == _Fields.SAVE_JOB_INSTANCE_UPDATE_EVENT;
  }


  public boolean isSetPruneJobUpdateHistory() {
    return setField_ == _Fields.PRUNE_JOB_UPDATE_HISTORY;
  }


  public boolean equals(Object other) {
    if (other instanceof Op) {
      return equals((Op)other);
    } else {
      return false;
    }
  }

  public boolean equals(Op other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(Op other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
