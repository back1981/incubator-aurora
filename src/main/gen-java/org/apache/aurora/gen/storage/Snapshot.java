/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.aurora.gen.storage;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Snapshot implements org.apache.thrift.TBase<Snapshot, Snapshot._Fields>, java.io.Serializable, Cloneable, Comparable<Snapshot> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Snapshot");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("hostAttributes", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("tasks", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField JOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobs", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField SCHEDULER_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("schedulerMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField QUOTA_CONFIGURATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("quotaConfigurations", org.apache.thrift.protocol.TType.SET, (short)8);
  private static final org.apache.thrift.protocol.TField LOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("locks", org.apache.thrift.protocol.TType.SET, (short)9);
  private static final org.apache.thrift.protocol.TField JOB_UPDATE_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobUpdateDetails", org.apache.thrift.protocol.TType.SET, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SnapshotStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SnapshotTupleSchemeFactory());
  }

  private long timestamp; // required
  private Set<org.apache.aurora.gen.HostAttributes> hostAttributes; // required
  private Set<org.apache.aurora.gen.ScheduledTask> tasks; // required
  private Set<StoredJob> jobs; // required
  private SchedulerMetadata schedulerMetadata; // required
  private Set<QuotaConfiguration> quotaConfigurations; // required
  private Set<org.apache.aurora.gen.Lock> locks; // required
  private Set<StoredJobUpdateDetails> jobUpdateDetails; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    HOST_ATTRIBUTES((short)3, "hostAttributes"),
    TASKS((short)4, "tasks"),
    JOBS((short)5, "jobs"),
    SCHEDULER_METADATA((short)6, "schedulerMetadata"),
    QUOTA_CONFIGURATIONS((short)8, "quotaConfigurations"),
    LOCKS((short)9, "locks"),
    JOB_UPDATE_DETAILS((short)10, "jobUpdateDetails");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 3: // HOST_ATTRIBUTES
          return HOST_ATTRIBUTES;
        case 4: // TASKS
          return TASKS;
        case 5: // JOBS
          return JOBS;
        case 6: // SCHEDULER_METADATA
          return SCHEDULER_METADATA;
        case 8: // QUOTA_CONFIGURATIONS
          return QUOTA_CONFIGURATIONS;
        case 9: // LOCKS
          return LOCKS;
        case 10: // JOB_UPDATE_DETAILS
          return JOB_UPDATE_DETAILS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HOST_ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("hostAttributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.aurora.gen.HostAttributes.class))));
    tmpMap.put(_Fields.TASKS, new org.apache.thrift.meta_data.FieldMetaData("tasks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.aurora.gen.ScheduledTask.class))));
    tmpMap.put(_Fields.JOBS, new org.apache.thrift.meta_data.FieldMetaData("jobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StoredJob.class))));
    tmpMap.put(_Fields.SCHEDULER_METADATA, new org.apache.thrift.meta_data.FieldMetaData("schedulerMetadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SchedulerMetadata.class)));
    tmpMap.put(_Fields.QUOTA_CONFIGURATIONS, new org.apache.thrift.meta_data.FieldMetaData("quotaConfigurations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QuotaConfiguration.class))));
    tmpMap.put(_Fields.LOCKS, new org.apache.thrift.meta_data.FieldMetaData("locks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.aurora.gen.Lock.class))));
    tmpMap.put(_Fields.JOB_UPDATE_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("jobUpdateDetails", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StoredJobUpdateDetails.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Snapshot.class, metaDataMap);
  }

  public Snapshot() {
  }

  public Snapshot(
    long timestamp,
    Set<org.apache.aurora.gen.HostAttributes> hostAttributes,
    Set<org.apache.aurora.gen.ScheduledTask> tasks,
    Set<StoredJob> jobs,
    SchedulerMetadata schedulerMetadata,
    Set<QuotaConfiguration> quotaConfigurations,
    Set<org.apache.aurora.gen.Lock> locks,
    Set<StoredJobUpdateDetails> jobUpdateDetails)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.hostAttributes = hostAttributes;
    this.tasks = tasks;
    this.jobs = jobs;
    this.schedulerMetadata = schedulerMetadata;
    this.quotaConfigurations = quotaConfigurations;
    this.locks = locks;
    this.jobUpdateDetails = jobUpdateDetails;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Snapshot(Snapshot other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    if (other.isSetHostAttributes()) {
      Set<org.apache.aurora.gen.HostAttributes> __this__hostAttributes = new HashSet<org.apache.aurora.gen.HostAttributes>(other.hostAttributes.size());
      for (org.apache.aurora.gen.HostAttributes other_element : other.hostAttributes) {
        __this__hostAttributes.add(new org.apache.aurora.gen.HostAttributes(other_element));
      }
      this.hostAttributes = __this__hostAttributes;
    }
    if (other.isSetTasks()) {
      Set<org.apache.aurora.gen.ScheduledTask> __this__tasks = new HashSet<org.apache.aurora.gen.ScheduledTask>(other.tasks.size());
      for (org.apache.aurora.gen.ScheduledTask other_element : other.tasks) {
        __this__tasks.add(new org.apache.aurora.gen.ScheduledTask(other_element));
      }
      this.tasks = __this__tasks;
    }
    if (other.isSetJobs()) {
      Set<StoredJob> __this__jobs = new HashSet<StoredJob>(other.jobs.size());
      for (StoredJob other_element : other.jobs) {
        __this__jobs.add(new StoredJob(other_element));
      }
      this.jobs = __this__jobs;
    }
    if (other.isSetSchedulerMetadata()) {
      this.schedulerMetadata = new SchedulerMetadata(other.schedulerMetadata);
    }
    if (other.isSetQuotaConfigurations()) {
      Set<QuotaConfiguration> __this__quotaConfigurations = new HashSet<QuotaConfiguration>(other.quotaConfigurations.size());
      for (QuotaConfiguration other_element : other.quotaConfigurations) {
        __this__quotaConfigurations.add(new QuotaConfiguration(other_element));
      }
      this.quotaConfigurations = __this__quotaConfigurations;
    }
    if (other.isSetLocks()) {
      Set<org.apache.aurora.gen.Lock> __this__locks = new HashSet<org.apache.aurora.gen.Lock>(other.locks.size());
      for (org.apache.aurora.gen.Lock other_element : other.locks) {
        __this__locks.add(new org.apache.aurora.gen.Lock(other_element));
      }
      this.locks = __this__locks;
    }
    if (other.isSetJobUpdateDetails()) {
      Set<StoredJobUpdateDetails> __this__jobUpdateDetails = new HashSet<StoredJobUpdateDetails>(other.jobUpdateDetails.size());
      for (StoredJobUpdateDetails other_element : other.jobUpdateDetails) {
        __this__jobUpdateDetails.add(new StoredJobUpdateDetails(other_element));
      }
      this.jobUpdateDetails = __this__jobUpdateDetails;
    }
  }

  public Snapshot deepCopy() {
    return new Snapshot(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.hostAttributes = null;
    this.tasks = null;
    this.jobs = null;
    this.schedulerMetadata = null;
    this.quotaConfigurations = null;
    this.locks = null;
    this.jobUpdateDetails = null;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public Snapshot setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getHostAttributesSize() {
    return (this.hostAttributes == null) ? 0 : this.hostAttributes.size();
  }

  public java.util.Iterator<org.apache.aurora.gen.HostAttributes> getHostAttributesIterator() {
    return (this.hostAttributes == null) ? null : this.hostAttributes.iterator();
  }

  public void addToHostAttributes(org.apache.aurora.gen.HostAttributes elem) {
    if (this.hostAttributes == null) {
      this.hostAttributes = new HashSet<org.apache.aurora.gen.HostAttributes>();
    }
    this.hostAttributes.add(elem);
  }

  public Set<org.apache.aurora.gen.HostAttributes> getHostAttributes() {
    return this.hostAttributes;
  }

  public Snapshot setHostAttributes(Set<org.apache.aurora.gen.HostAttributes> hostAttributes) {
    this.hostAttributes = hostAttributes;
    return this;
  }

  public void unsetHostAttributes() {
    this.hostAttributes = null;
  }

  /** Returns true if field hostAttributes is set (has been assigned a value) and false otherwise */
  public boolean isSetHostAttributes() {
    return this.hostAttributes != null;
  }

  public void setHostAttributesIsSet(boolean value) {
    if (!value) {
      this.hostAttributes = null;
    }
  }

  public int getTasksSize() {
    return (this.tasks == null) ? 0 : this.tasks.size();
  }

  public java.util.Iterator<org.apache.aurora.gen.ScheduledTask> getTasksIterator() {
    return (this.tasks == null) ? null : this.tasks.iterator();
  }

  public void addToTasks(org.apache.aurora.gen.ScheduledTask elem) {
    if (this.tasks == null) {
      this.tasks = new HashSet<org.apache.aurora.gen.ScheduledTask>();
    }
    this.tasks.add(elem);
  }

  public Set<org.apache.aurora.gen.ScheduledTask> getTasks() {
    return this.tasks;
  }

  public Snapshot setTasks(Set<org.apache.aurora.gen.ScheduledTask> tasks) {
    this.tasks = tasks;
    return this;
  }

  public void unsetTasks() {
    this.tasks = null;
  }

  /** Returns true if field tasks is set (has been assigned a value) and false otherwise */
  public boolean isSetTasks() {
    return this.tasks != null;
  }

  public void setTasksIsSet(boolean value) {
    if (!value) {
      this.tasks = null;
    }
  }

  public int getJobsSize() {
    return (this.jobs == null) ? 0 : this.jobs.size();
  }

  public java.util.Iterator<StoredJob> getJobsIterator() {
    return (this.jobs == null) ? null : this.jobs.iterator();
  }

  public void addToJobs(StoredJob elem) {
    if (this.jobs == null) {
      this.jobs = new HashSet<StoredJob>();
    }
    this.jobs.add(elem);
  }

  public Set<StoredJob> getJobs() {
    return this.jobs;
  }

  public Snapshot setJobs(Set<StoredJob> jobs) {
    this.jobs = jobs;
    return this;
  }

  public void unsetJobs() {
    this.jobs = null;
  }

  /** Returns true if field jobs is set (has been assigned a value) and false otherwise */
  public boolean isSetJobs() {
    return this.jobs != null;
  }

  public void setJobsIsSet(boolean value) {
    if (!value) {
      this.jobs = null;
    }
  }

  public SchedulerMetadata getSchedulerMetadata() {
    return this.schedulerMetadata;
  }

  public Snapshot setSchedulerMetadata(SchedulerMetadata schedulerMetadata) {
    this.schedulerMetadata = schedulerMetadata;
    return this;
  }

  public void unsetSchedulerMetadata() {
    this.schedulerMetadata = null;
  }

  /** Returns true if field schedulerMetadata is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedulerMetadata() {
    return this.schedulerMetadata != null;
  }

  public void setSchedulerMetadataIsSet(boolean value) {
    if (!value) {
      this.schedulerMetadata = null;
    }
  }

  public int getQuotaConfigurationsSize() {
    return (this.quotaConfigurations == null) ? 0 : this.quotaConfigurations.size();
  }

  public java.util.Iterator<QuotaConfiguration> getQuotaConfigurationsIterator() {
    return (this.quotaConfigurations == null) ? null : this.quotaConfigurations.iterator();
  }

  public void addToQuotaConfigurations(QuotaConfiguration elem) {
    if (this.quotaConfigurations == null) {
      this.quotaConfigurations = new HashSet<QuotaConfiguration>();
    }
    this.quotaConfigurations.add(elem);
  }

  public Set<QuotaConfiguration> getQuotaConfigurations() {
    return this.quotaConfigurations;
  }

  public Snapshot setQuotaConfigurations(Set<QuotaConfiguration> quotaConfigurations) {
    this.quotaConfigurations = quotaConfigurations;
    return this;
  }

  public void unsetQuotaConfigurations() {
    this.quotaConfigurations = null;
  }

  /** Returns true if field quotaConfigurations is set (has been assigned a value) and false otherwise */
  public boolean isSetQuotaConfigurations() {
    return this.quotaConfigurations != null;
  }

  public void setQuotaConfigurationsIsSet(boolean value) {
    if (!value) {
      this.quotaConfigurations = null;
    }
  }

  public int getLocksSize() {
    return (this.locks == null) ? 0 : this.locks.size();
  }

  public java.util.Iterator<org.apache.aurora.gen.Lock> getLocksIterator() {
    return (this.locks == null) ? null : this.locks.iterator();
  }

  public void addToLocks(org.apache.aurora.gen.Lock elem) {
    if (this.locks == null) {
      this.locks = new HashSet<org.apache.aurora.gen.Lock>();
    }
    this.locks.add(elem);
  }

  public Set<org.apache.aurora.gen.Lock> getLocks() {
    return this.locks;
  }

  public Snapshot setLocks(Set<org.apache.aurora.gen.Lock> locks) {
    this.locks = locks;
    return this;
  }

  public void unsetLocks() {
    this.locks = null;
  }

  /** Returns true if field locks is set (has been assigned a value) and false otherwise */
  public boolean isSetLocks() {
    return this.locks != null;
  }

  public void setLocksIsSet(boolean value) {
    if (!value) {
      this.locks = null;
    }
  }

  public int getJobUpdateDetailsSize() {
    return (this.jobUpdateDetails == null) ? 0 : this.jobUpdateDetails.size();
  }

  public java.util.Iterator<StoredJobUpdateDetails> getJobUpdateDetailsIterator() {
    return (this.jobUpdateDetails == null) ? null : this.jobUpdateDetails.iterator();
  }

  public void addToJobUpdateDetails(StoredJobUpdateDetails elem) {
    if (this.jobUpdateDetails == null) {
      this.jobUpdateDetails = new HashSet<StoredJobUpdateDetails>();
    }
    this.jobUpdateDetails.add(elem);
  }

  public Set<StoredJobUpdateDetails> getJobUpdateDetails() {
    return this.jobUpdateDetails;
  }

  public Snapshot setJobUpdateDetails(Set<StoredJobUpdateDetails> jobUpdateDetails) {
    this.jobUpdateDetails = jobUpdateDetails;
    return this;
  }

  public void unsetJobUpdateDetails() {
    this.jobUpdateDetails = null;
  }

  /** Returns true if field jobUpdateDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetJobUpdateDetails() {
    return this.jobUpdateDetails != null;
  }

  public void setJobUpdateDetailsIsSet(boolean value) {
    if (!value) {
      this.jobUpdateDetails = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case HOST_ATTRIBUTES:
      if (value == null) {
        unsetHostAttributes();
      } else {
        setHostAttributes((Set<org.apache.aurora.gen.HostAttributes>)value);
      }
      break;

    case TASKS:
      if (value == null) {
        unsetTasks();
      } else {
        setTasks((Set<org.apache.aurora.gen.ScheduledTask>)value);
      }
      break;

    case JOBS:
      if (value == null) {
        unsetJobs();
      } else {
        setJobs((Set<StoredJob>)value);
      }
      break;

    case SCHEDULER_METADATA:
      if (value == null) {
        unsetSchedulerMetadata();
      } else {
        setSchedulerMetadata((SchedulerMetadata)value);
      }
      break;

    case QUOTA_CONFIGURATIONS:
      if (value == null) {
        unsetQuotaConfigurations();
      } else {
        setQuotaConfigurations((Set<QuotaConfiguration>)value);
      }
      break;

    case LOCKS:
      if (value == null) {
        unsetLocks();
      } else {
        setLocks((Set<org.apache.aurora.gen.Lock>)value);
      }
      break;

    case JOB_UPDATE_DETAILS:
      if (value == null) {
        unsetJobUpdateDetails();
      } else {
        setJobUpdateDetails((Set<StoredJobUpdateDetails>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case HOST_ATTRIBUTES:
      return getHostAttributes();

    case TASKS:
      return getTasks();

    case JOBS:
      return getJobs();

    case SCHEDULER_METADATA:
      return getSchedulerMetadata();

    case QUOTA_CONFIGURATIONS:
      return getQuotaConfigurations();

    case LOCKS:
      return getLocks();

    case JOB_UPDATE_DETAILS:
      return getJobUpdateDetails();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case HOST_ATTRIBUTES:
      return isSetHostAttributes();
    case TASKS:
      return isSetTasks();
    case JOBS:
      return isSetJobs();
    case SCHEDULER_METADATA:
      return isSetSchedulerMetadata();
    case QUOTA_CONFIGURATIONS:
      return isSetQuotaConfigurations();
    case LOCKS:
      return isSetLocks();
    case JOB_UPDATE_DETAILS:
      return isSetJobUpdateDetails();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Snapshot)
      return this.equals((Snapshot)that);
    return false;
  }

  public boolean equals(Snapshot that) {
    if (that == null)
      return false;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_hostAttributes = true && this.isSetHostAttributes();
    boolean that_present_hostAttributes = true && that.isSetHostAttributes();
    if (this_present_hostAttributes || that_present_hostAttributes) {
      if (!(this_present_hostAttributes && that_present_hostAttributes))
        return false;
      if (!this.hostAttributes.equals(that.hostAttributes))
        return false;
    }

    boolean this_present_tasks = true && this.isSetTasks();
    boolean that_present_tasks = true && that.isSetTasks();
    if (this_present_tasks || that_present_tasks) {
      if (!(this_present_tasks && that_present_tasks))
        return false;
      if (!this.tasks.equals(that.tasks))
        return false;
    }

    boolean this_present_jobs = true && this.isSetJobs();
    boolean that_present_jobs = true && that.isSetJobs();
    if (this_present_jobs || that_present_jobs) {
      if (!(this_present_jobs && that_present_jobs))
        return false;
      if (!this.jobs.equals(that.jobs))
        return false;
    }

    boolean this_present_schedulerMetadata = true && this.isSetSchedulerMetadata();
    boolean that_present_schedulerMetadata = true && that.isSetSchedulerMetadata();
    if (this_present_schedulerMetadata || that_present_schedulerMetadata) {
      if (!(this_present_schedulerMetadata && that_present_schedulerMetadata))
        return false;
      if (!this.schedulerMetadata.equals(that.schedulerMetadata))
        return false;
    }

    boolean this_present_quotaConfigurations = true && this.isSetQuotaConfigurations();
    boolean that_present_quotaConfigurations = true && that.isSetQuotaConfigurations();
    if (this_present_quotaConfigurations || that_present_quotaConfigurations) {
      if (!(this_present_quotaConfigurations && that_present_quotaConfigurations))
        return false;
      if (!this.quotaConfigurations.equals(that.quotaConfigurations))
        return false;
    }

    boolean this_present_locks = true && this.isSetLocks();
    boolean that_present_locks = true && that.isSetLocks();
    if (this_present_locks || that_present_locks) {
      if (!(this_present_locks && that_present_locks))
        return false;
      if (!this.locks.equals(that.locks))
        return false;
    }

    boolean this_present_jobUpdateDetails = true && this.isSetJobUpdateDetails();
    boolean that_present_jobUpdateDetails = true && that.isSetJobUpdateDetails();
    if (this_present_jobUpdateDetails || that_present_jobUpdateDetails) {
      if (!(this_present_jobUpdateDetails && that_present_jobUpdateDetails))
        return false;
      if (!this.jobUpdateDetails.equals(that.jobUpdateDetails))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_timestamp = true;
    builder.append(present_timestamp);
    if (present_timestamp)
      builder.append(timestamp);

    boolean present_hostAttributes = true && (isSetHostAttributes());
    builder.append(present_hostAttributes);
    if (present_hostAttributes)
      builder.append(hostAttributes);

    boolean present_tasks = true && (isSetTasks());
    builder.append(present_tasks);
    if (present_tasks)
      builder.append(tasks);

    boolean present_jobs = true && (isSetJobs());
    builder.append(present_jobs);
    if (present_jobs)
      builder.append(jobs);

    boolean present_schedulerMetadata = true && (isSetSchedulerMetadata());
    builder.append(present_schedulerMetadata);
    if (present_schedulerMetadata)
      builder.append(schedulerMetadata);

    boolean present_quotaConfigurations = true && (isSetQuotaConfigurations());
    builder.append(present_quotaConfigurations);
    if (present_quotaConfigurations)
      builder.append(quotaConfigurations);

    boolean present_locks = true && (isSetLocks());
    builder.append(present_locks);
    if (present_locks)
      builder.append(locks);

    boolean present_jobUpdateDetails = true && (isSetJobUpdateDetails());
    builder.append(present_jobUpdateDetails);
    if (present_jobUpdateDetails)
      builder.append(jobUpdateDetails);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(Snapshot other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostAttributes()).compareTo(other.isSetHostAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostAttributes, other.hostAttributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTasks()).compareTo(other.isSetTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tasks, other.tasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobs()).compareTo(other.isSetJobs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobs, other.jobs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchedulerMetadata()).compareTo(other.isSetSchedulerMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedulerMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedulerMetadata, other.schedulerMetadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuotaConfigurations()).compareTo(other.isSetQuotaConfigurations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuotaConfigurations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quotaConfigurations, other.quotaConfigurations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocks()).compareTo(other.isSetLocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locks, other.locks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobUpdateDetails()).compareTo(other.isSetJobUpdateDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobUpdateDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobUpdateDetails, other.jobUpdateDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Snapshot(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostAttributes:");
    if (this.hostAttributes == null) {
      sb.append("null");
    } else {
      sb.append(this.hostAttributes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tasks:");
    if (this.tasks == null) {
      sb.append("null");
    } else {
      sb.append(this.tasks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobs:");
    if (this.jobs == null) {
      sb.append("null");
    } else {
      sb.append(this.jobs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schedulerMetadata:");
    if (this.schedulerMetadata == null) {
      sb.append("null");
    } else {
      sb.append(this.schedulerMetadata);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quotaConfigurations:");
    if (this.quotaConfigurations == null) {
      sb.append("null");
    } else {
      sb.append(this.quotaConfigurations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locks:");
    if (this.locks == null) {
      sb.append("null");
    } else {
      sb.append(this.locks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobUpdateDetails:");
    if (this.jobUpdateDetails == null) {
      sb.append("null");
    } else {
      sb.append(this.jobUpdateDetails);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (schedulerMetadata != null) {
      schedulerMetadata.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SnapshotStandardSchemeFactory implements SchemeFactory {
    public SnapshotStandardScheme getScheme() {
      return new SnapshotStandardScheme();
    }
  }

  private static class SnapshotStandardScheme extends StandardScheme<Snapshot> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Snapshot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST_ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                struct.hostAttributes = new HashSet<org.apache.aurora.gen.HostAttributes>(2*_set24.size);
                for (int _i25 = 0; _i25 < _set24.size; ++_i25)
                {
                  org.apache.aurora.gen.HostAttributes _elem26;
                  _elem26 = new org.apache.aurora.gen.HostAttributes();
                  _elem26.read(iprot);
                  struct.hostAttributes.add(_elem26);
                }
                iprot.readSetEnd();
              }
              struct.setHostAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set27 = iprot.readSetBegin();
                struct.tasks = new HashSet<org.apache.aurora.gen.ScheduledTask>(2*_set27.size);
                for (int _i28 = 0; _i28 < _set27.size; ++_i28)
                {
                  org.apache.aurora.gen.ScheduledTask _elem29;
                  _elem29 = new org.apache.aurora.gen.ScheduledTask();
                  _elem29.read(iprot);
                  struct.tasks.add(_elem29);
                }
                iprot.readSetEnd();
              }
              struct.setTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JOBS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set30 = iprot.readSetBegin();
                struct.jobs = new HashSet<StoredJob>(2*_set30.size);
                for (int _i31 = 0; _i31 < _set30.size; ++_i31)
                {
                  StoredJob _elem32;
                  _elem32 = new StoredJob();
                  _elem32.read(iprot);
                  struct.jobs.add(_elem32);
                }
                iprot.readSetEnd();
              }
              struct.setJobsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SCHEDULER_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schedulerMetadata = new SchedulerMetadata();
              struct.schedulerMetadata.read(iprot);
              struct.setSchedulerMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUOTA_CONFIGURATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set33 = iprot.readSetBegin();
                struct.quotaConfigurations = new HashSet<QuotaConfiguration>(2*_set33.size);
                for (int _i34 = 0; _i34 < _set33.size; ++_i34)
                {
                  QuotaConfiguration _elem35;
                  _elem35 = new QuotaConfiguration();
                  _elem35.read(iprot);
                  struct.quotaConfigurations.add(_elem35);
                }
                iprot.readSetEnd();
              }
              struct.setQuotaConfigurationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set36 = iprot.readSetBegin();
                struct.locks = new HashSet<org.apache.aurora.gen.Lock>(2*_set36.size);
                for (int _i37 = 0; _i37 < _set36.size; ++_i37)
                {
                  org.apache.aurora.gen.Lock _elem38;
                  _elem38 = new org.apache.aurora.gen.Lock();
                  _elem38.read(iprot);
                  struct.locks.add(_elem38);
                }
                iprot.readSetEnd();
              }
              struct.setLocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // JOB_UPDATE_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set39 = iprot.readSetBegin();
                struct.jobUpdateDetails = new HashSet<StoredJobUpdateDetails>(2*_set39.size);
                for (int _i40 = 0; _i40 < _set39.size; ++_i40)
                {
                  StoredJobUpdateDetails _elem41;
                  _elem41 = new StoredJobUpdateDetails();
                  _elem41.read(iprot);
                  struct.jobUpdateDetails.add(_elem41);
                }
                iprot.readSetEnd();
              }
              struct.setJobUpdateDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Snapshot struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.hostAttributes != null) {
        oprot.writeFieldBegin(HOST_ATTRIBUTES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.hostAttributes.size()));
          for (org.apache.aurora.gen.HostAttributes _iter42 : struct.hostAttributes)
          {
            _iter42.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tasks != null) {
        oprot.writeFieldBegin(TASKS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.tasks.size()));
          for (org.apache.aurora.gen.ScheduledTask _iter43 : struct.tasks)
          {
            _iter43.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.jobs != null) {
        oprot.writeFieldBegin(JOBS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.jobs.size()));
          for (StoredJob _iter44 : struct.jobs)
          {
            _iter44.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.schedulerMetadata != null) {
        oprot.writeFieldBegin(SCHEDULER_METADATA_FIELD_DESC);
        struct.schedulerMetadata.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.quotaConfigurations != null) {
        oprot.writeFieldBegin(QUOTA_CONFIGURATIONS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.quotaConfigurations.size()));
          for (QuotaConfiguration _iter45 : struct.quotaConfigurations)
          {
            _iter45.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.locks != null) {
        oprot.writeFieldBegin(LOCKS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.locks.size()));
          for (org.apache.aurora.gen.Lock _iter46 : struct.locks)
          {
            _iter46.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.jobUpdateDetails != null) {
        oprot.writeFieldBegin(JOB_UPDATE_DETAILS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.jobUpdateDetails.size()));
          for (StoredJobUpdateDetails _iter47 : struct.jobUpdateDetails)
          {
            _iter47.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SnapshotTupleSchemeFactory implements SchemeFactory {
    public SnapshotTupleScheme getScheme() {
      return new SnapshotTupleScheme();
    }
  }

  private static class SnapshotTupleScheme extends TupleScheme<Snapshot> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Snapshot struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetHostAttributes()) {
        optionals.set(1);
      }
      if (struct.isSetTasks()) {
        optionals.set(2);
      }
      if (struct.isSetJobs()) {
        optionals.set(3);
      }
      if (struct.isSetSchedulerMetadata()) {
        optionals.set(4);
      }
      if (struct.isSetQuotaConfigurations()) {
        optionals.set(5);
      }
      if (struct.isSetLocks()) {
        optionals.set(6);
      }
      if (struct.isSetJobUpdateDetails()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetHostAttributes()) {
        {
          oprot.writeI32(struct.hostAttributes.size());
          for (org.apache.aurora.gen.HostAttributes _iter48 : struct.hostAttributes)
          {
            _iter48.write(oprot);
          }
        }
      }
      if (struct.isSetTasks()) {
        {
          oprot.writeI32(struct.tasks.size());
          for (org.apache.aurora.gen.ScheduledTask _iter49 : struct.tasks)
          {
            _iter49.write(oprot);
          }
        }
      }
      if (struct.isSetJobs()) {
        {
          oprot.writeI32(struct.jobs.size());
          for (StoredJob _iter50 : struct.jobs)
          {
            _iter50.write(oprot);
          }
        }
      }
      if (struct.isSetSchedulerMetadata()) {
        struct.schedulerMetadata.write(oprot);
      }
      if (struct.isSetQuotaConfigurations()) {
        {
          oprot.writeI32(struct.quotaConfigurations.size());
          for (QuotaConfiguration _iter51 : struct.quotaConfigurations)
          {
            _iter51.write(oprot);
          }
        }
      }
      if (struct.isSetLocks()) {
        {
          oprot.writeI32(struct.locks.size());
          for (org.apache.aurora.gen.Lock _iter52 : struct.locks)
          {
            _iter52.write(oprot);
          }
        }
      }
      if (struct.isSetJobUpdateDetails()) {
        {
          oprot.writeI32(struct.jobUpdateDetails.size());
          for (StoredJobUpdateDetails _iter53 : struct.jobUpdateDetails)
          {
            _iter53.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Snapshot struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set54 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hostAttributes = new HashSet<org.apache.aurora.gen.HostAttributes>(2*_set54.size);
          for (int _i55 = 0; _i55 < _set54.size; ++_i55)
          {
            org.apache.aurora.gen.HostAttributes _elem56;
            _elem56 = new org.apache.aurora.gen.HostAttributes();
            _elem56.read(iprot);
            struct.hostAttributes.add(_elem56);
          }
        }
        struct.setHostAttributesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set57 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tasks = new HashSet<org.apache.aurora.gen.ScheduledTask>(2*_set57.size);
          for (int _i58 = 0; _i58 < _set57.size; ++_i58)
          {
            org.apache.aurora.gen.ScheduledTask _elem59;
            _elem59 = new org.apache.aurora.gen.ScheduledTask();
            _elem59.read(iprot);
            struct.tasks.add(_elem59);
          }
        }
        struct.setTasksIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set60 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.jobs = new HashSet<StoredJob>(2*_set60.size);
          for (int _i61 = 0; _i61 < _set60.size; ++_i61)
          {
            StoredJob _elem62;
            _elem62 = new StoredJob();
            _elem62.read(iprot);
            struct.jobs.add(_elem62);
          }
        }
        struct.setJobsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.schedulerMetadata = new SchedulerMetadata();
        struct.schedulerMetadata.read(iprot);
        struct.setSchedulerMetadataIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set63 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.quotaConfigurations = new HashSet<QuotaConfiguration>(2*_set63.size);
          for (int _i64 = 0; _i64 < _set63.size; ++_i64)
          {
            QuotaConfiguration _elem65;
            _elem65 = new QuotaConfiguration();
            _elem65.read(iprot);
            struct.quotaConfigurations.add(_elem65);
          }
        }
        struct.setQuotaConfigurationsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TSet _set66 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.locks = new HashSet<org.apache.aurora.gen.Lock>(2*_set66.size);
          for (int _i67 = 0; _i67 < _set66.size; ++_i67)
          {
            org.apache.aurora.gen.Lock _elem68;
            _elem68 = new org.apache.aurora.gen.Lock();
            _elem68.read(iprot);
            struct.locks.add(_elem68);
          }
        }
        struct.setLocksIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set69 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.jobUpdateDetails = new HashSet<StoredJobUpdateDetails>(2*_set69.size);
          for (int _i70 = 0; _i70 < _set69.size; ++_i70)
          {
            StoredJobUpdateDetails _elem71;
            _elem71 = new StoredJobUpdateDetails();
            _elem71.read(iprot);
            struct.jobUpdateDetails.add(_elem71);
          }
        }
        struct.setJobUpdateDetailsIsSet(true);
      }
    }
  }

}

