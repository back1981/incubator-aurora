/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.aurora.gen.storage;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StoredJob implements org.apache.thrift.TBase<StoredJob, StoredJob._Fields>, java.io.Serializable, Cloneable, Comparable<StoredJob> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StoredJob");

  private static final org.apache.thrift.protocol.TField JOB_MANAGER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobManagerId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField JOB_CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("jobConfiguration", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StoredJobStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StoredJobTupleSchemeFactory());
  }

  private String jobManagerId; // required
  private org.apache.aurora.gen.JobConfiguration jobConfiguration; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB_MANAGER_ID((short)1, "jobManagerId"),
    JOB_CONFIGURATION((short)3, "jobConfiguration");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_MANAGER_ID
          return JOB_MANAGER_ID;
        case 3: // JOB_CONFIGURATION
          return JOB_CONFIGURATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_MANAGER_ID, new org.apache.thrift.meta_data.FieldMetaData("jobManagerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("jobConfiguration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.aurora.gen.JobConfiguration.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StoredJob.class, metaDataMap);
  }

  public StoredJob() {
  }

  public StoredJob(
    String jobManagerId,
    org.apache.aurora.gen.JobConfiguration jobConfiguration)
  {
    this();
    this.jobManagerId = jobManagerId;
    this.jobConfiguration = jobConfiguration;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StoredJob(StoredJob other) {
    if (other.isSetJobManagerId()) {
      this.jobManagerId = other.jobManagerId;
    }
    if (other.isSetJobConfiguration()) {
      this.jobConfiguration = new org.apache.aurora.gen.JobConfiguration(other.jobConfiguration);
    }
  }

  public StoredJob deepCopy() {
    return new StoredJob(this);
  }

  @Override
  public void clear() {
    this.jobManagerId = null;
    this.jobConfiguration = null;
  }

  public String getJobManagerId() {
    return this.jobManagerId;
  }

  public StoredJob setJobManagerId(String jobManagerId) {
    this.jobManagerId = jobManagerId;
    return this;
  }

  public void unsetJobManagerId() {
    this.jobManagerId = null;
  }

  /** Returns true if field jobManagerId is set (has been assigned a value) and false otherwise */
  public boolean isSetJobManagerId() {
    return this.jobManagerId != null;
  }

  public void setJobManagerIdIsSet(boolean value) {
    if (!value) {
      this.jobManagerId = null;
    }
  }

  public org.apache.aurora.gen.JobConfiguration getJobConfiguration() {
    return this.jobConfiguration;
  }

  public StoredJob setJobConfiguration(org.apache.aurora.gen.JobConfiguration jobConfiguration) {
    this.jobConfiguration = jobConfiguration;
    return this;
  }

  public void unsetJobConfiguration() {
    this.jobConfiguration = null;
  }

  /** Returns true if field jobConfiguration is set (has been assigned a value) and false otherwise */
  public boolean isSetJobConfiguration() {
    return this.jobConfiguration != null;
  }

  public void setJobConfigurationIsSet(boolean value) {
    if (!value) {
      this.jobConfiguration = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOB_MANAGER_ID:
      if (value == null) {
        unsetJobManagerId();
      } else {
        setJobManagerId((String)value);
      }
      break;

    case JOB_CONFIGURATION:
      if (value == null) {
        unsetJobConfiguration();
      } else {
        setJobConfiguration((org.apache.aurora.gen.JobConfiguration)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_MANAGER_ID:
      return getJobManagerId();

    case JOB_CONFIGURATION:
      return getJobConfiguration();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOB_MANAGER_ID:
      return isSetJobManagerId();
    case JOB_CONFIGURATION:
      return isSetJobConfiguration();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StoredJob)
      return this.equals((StoredJob)that);
    return false;
  }

  public boolean equals(StoredJob that) {
    if (that == null)
      return false;

    boolean this_present_jobManagerId = true && this.isSetJobManagerId();
    boolean that_present_jobManagerId = true && that.isSetJobManagerId();
    if (this_present_jobManagerId || that_present_jobManagerId) {
      if (!(this_present_jobManagerId && that_present_jobManagerId))
        return false;
      if (!this.jobManagerId.equals(that.jobManagerId))
        return false;
    }

    boolean this_present_jobConfiguration = true && this.isSetJobConfiguration();
    boolean that_present_jobConfiguration = true && that.isSetJobConfiguration();
    if (this_present_jobConfiguration || that_present_jobConfiguration) {
      if (!(this_present_jobConfiguration && that_present_jobConfiguration))
        return false;
      if (!this.jobConfiguration.equals(that.jobConfiguration))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_jobManagerId = true && (isSetJobManagerId());
    builder.append(present_jobManagerId);
    if (present_jobManagerId)
      builder.append(jobManagerId);

    boolean present_jobConfiguration = true && (isSetJobConfiguration());
    builder.append(present_jobConfiguration);
    if (present_jobConfiguration)
      builder.append(jobConfiguration);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(StoredJob other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJobManagerId()).compareTo(other.isSetJobManagerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobManagerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobManagerId, other.jobManagerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobConfiguration()).compareTo(other.isSetJobConfiguration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobConfiguration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobConfiguration, other.jobConfiguration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StoredJob(");
    boolean first = true;

    sb.append("jobManagerId:");
    if (this.jobManagerId == null) {
      sb.append("null");
    } else {
      sb.append(this.jobManagerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobConfiguration:");
    if (this.jobConfiguration == null) {
      sb.append("null");
    } else {
      sb.append(this.jobConfiguration);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (jobConfiguration != null) {
      jobConfiguration.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StoredJobStandardSchemeFactory implements SchemeFactory {
    public StoredJobStandardScheme getScheme() {
      return new StoredJobStandardScheme();
    }
  }

  private static class StoredJobStandardScheme extends StandardScheme<StoredJob> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StoredJob struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_MANAGER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobManagerId = iprot.readString();
              struct.setJobManagerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOB_CONFIGURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.jobConfiguration = new org.apache.aurora.gen.JobConfiguration();
              struct.jobConfiguration.read(iprot);
              struct.setJobConfigurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StoredJob struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jobManagerId != null) {
        oprot.writeFieldBegin(JOB_MANAGER_ID_FIELD_DESC);
        oprot.writeString(struct.jobManagerId);
        oprot.writeFieldEnd();
      }
      if (struct.jobConfiguration != null) {
        oprot.writeFieldBegin(JOB_CONFIGURATION_FIELD_DESC);
        struct.jobConfiguration.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StoredJobTupleSchemeFactory implements SchemeFactory {
    public StoredJobTupleScheme getScheme() {
      return new StoredJobTupleScheme();
    }
  }

  private static class StoredJobTupleScheme extends TupleScheme<StoredJob> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StoredJob struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetJobManagerId()) {
        optionals.set(0);
      }
      if (struct.isSetJobConfiguration()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetJobManagerId()) {
        oprot.writeString(struct.jobManagerId);
      }
      if (struct.isSetJobConfiguration()) {
        struct.jobConfiguration.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StoredJob struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.jobManagerId = iprot.readString();
        struct.setJobManagerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.jobConfiguration = new org.apache.aurora.gen.JobConfiguration();
        struct.jobConfiguration.read(iprot);
        struct.setJobConfigurationIsSet(true);
      }
    }
  }

}

