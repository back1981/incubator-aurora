/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.aurora.gen.storage;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LogEntry extends org.apache.thrift.TUnion<LogEntry, LogEntry._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogEntry");
  private static final org.apache.thrift.protocol.TField SNAPSHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TRANSACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("transaction", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NOOP_FIELD_DESC = new org.apache.thrift.protocol.TField("noop", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField FRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("frame", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DEFLATED_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("deflatedEntry", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEDUPLICATED_SNAPSHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("deduplicatedSnapshot", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SNAPSHOT((short)1, "snapshot"),
    TRANSACTION((short)2, "transaction"),
    NOOP((short)3, "noop"),
    FRAME((short)4, "frame"),
    DEFLATED_ENTRY((short)5, "deflatedEntry"),
    DEDUPLICATED_SNAPSHOT((short)6, "deduplicatedSnapshot");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SNAPSHOT
          return SNAPSHOT;
        case 2: // TRANSACTION
          return TRANSACTION;
        case 3: // NOOP
          return NOOP;
        case 4: // FRAME
          return FRAME;
        case 5: // DEFLATED_ENTRY
          return DEFLATED_ENTRY;
        case 6: // DEDUPLICATED_SNAPSHOT
          return DEDUPLICATED_SNAPSHOT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SNAPSHOT, new org.apache.thrift.meta_data.FieldMetaData("snapshot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Snapshot.class)));
    tmpMap.put(_Fields.TRANSACTION, new org.apache.thrift.meta_data.FieldMetaData("transaction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Transaction.class)));
    tmpMap.put(_Fields.NOOP, new org.apache.thrift.meta_data.FieldMetaData("noop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FRAME, new org.apache.thrift.meta_data.FieldMetaData("frame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Frame.class)));
    tmpMap.put(_Fields.DEFLATED_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("deflatedEntry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.DEDUPLICATED_SNAPSHOT, new org.apache.thrift.meta_data.FieldMetaData("deduplicatedSnapshot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeduplicatedSnapshot.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogEntry.class, metaDataMap);
  }

  public LogEntry() {
    super();
  }

  public LogEntry(_Fields setField, Object value) {
    super(setField, value);
  }

  public LogEntry(LogEntry other) {
    super(other);
  }
  public LogEntry deepCopy() {
    return new LogEntry(this);
  }

  public static LogEntry snapshot(Snapshot value) {
    LogEntry x = new LogEntry();
    x.setSnapshot(value);
    return x;
  }

  public static LogEntry transaction(Transaction value) {
    LogEntry x = new LogEntry();
    x.setTransaction(value);
    return x;
  }

  public static LogEntry noop(boolean value) {
    LogEntry x = new LogEntry();
    x.setNoop(value);
    return x;
  }

  public static LogEntry frame(Frame value) {
    LogEntry x = new LogEntry();
    x.setFrame(value);
    return x;
  }

  public static LogEntry deflatedEntry(ByteBuffer value) {
    LogEntry x = new LogEntry();
    x.setDeflatedEntry(value);
    return x;
  }

  public static LogEntry deflatedEntry(byte[] value) {
    LogEntry x = new LogEntry();
    x.setDeflatedEntry(ByteBuffer.wrap(value));
    return x;
  }

  public static LogEntry deduplicatedSnapshot(DeduplicatedSnapshot value) {
    LogEntry x = new LogEntry();
    x.setDeduplicatedSnapshot(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case SNAPSHOT:
        if (value instanceof Snapshot) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Snapshot for field 'snapshot', but got " + value.getClass().getSimpleName());
      case TRANSACTION:
        if (value instanceof Transaction) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Transaction for field 'transaction', but got " + value.getClass().getSimpleName());
      case NOOP:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'noop', but got " + value.getClass().getSimpleName());
      case FRAME:
        if (value instanceof Frame) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Frame for field 'frame', but got " + value.getClass().getSimpleName());
      case DEFLATED_ENTRY:
        if (value instanceof ByteBuffer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ByteBuffer for field 'deflatedEntry', but got " + value.getClass().getSimpleName());
      case DEDUPLICATED_SNAPSHOT:
        if (value instanceof DeduplicatedSnapshot) {
          break;
        }
        throw new ClassCastException("Was expecting value of type DeduplicatedSnapshot for field 'deduplicatedSnapshot', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case SNAPSHOT:
          if (field.type == SNAPSHOT_FIELD_DESC.type) {
            Snapshot snapshot;
            snapshot = new Snapshot();
            snapshot.read(iprot);
            return snapshot;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TRANSACTION:
          if (field.type == TRANSACTION_FIELD_DESC.type) {
            Transaction transaction;
            transaction = new Transaction();
            transaction.read(iprot);
            return transaction;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NOOP:
          if (field.type == NOOP_FIELD_DESC.type) {
            Boolean noop;
            noop = iprot.readBool();
            return noop;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FRAME:
          if (field.type == FRAME_FIELD_DESC.type) {
            Frame frame;
            frame = new Frame();
            frame.read(iprot);
            return frame;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DEFLATED_ENTRY:
          if (field.type == DEFLATED_ENTRY_FIELD_DESC.type) {
            ByteBuffer deflatedEntry;
            deflatedEntry = iprot.readBinary();
            return deflatedEntry;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DEDUPLICATED_SNAPSHOT:
          if (field.type == DEDUPLICATED_SNAPSHOT_FIELD_DESC.type) {
            DeduplicatedSnapshot deduplicatedSnapshot;
            deduplicatedSnapshot = new DeduplicatedSnapshot();
            deduplicatedSnapshot.read(iprot);
            return deduplicatedSnapshot;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case SNAPSHOT:
        Snapshot snapshot = (Snapshot)value_;
        snapshot.write(oprot);
        return;
      case TRANSACTION:
        Transaction transaction = (Transaction)value_;
        transaction.write(oprot);
        return;
      case NOOP:
        Boolean noop = (Boolean)value_;
        oprot.writeBool(noop);
        return;
      case FRAME:
        Frame frame = (Frame)value_;
        frame.write(oprot);
        return;
      case DEFLATED_ENTRY:
        ByteBuffer deflatedEntry = (ByteBuffer)value_;
        oprot.writeBinary(deflatedEntry);
        return;
      case DEDUPLICATED_SNAPSHOT:
        DeduplicatedSnapshot deduplicatedSnapshot = (DeduplicatedSnapshot)value_;
        deduplicatedSnapshot.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case SNAPSHOT:
          Snapshot snapshot;
          snapshot = new Snapshot();
          snapshot.read(iprot);
          return snapshot;
        case TRANSACTION:
          Transaction transaction;
          transaction = new Transaction();
          transaction.read(iprot);
          return transaction;
        case NOOP:
          Boolean noop;
          noop = iprot.readBool();
          return noop;
        case FRAME:
          Frame frame;
          frame = new Frame();
          frame.read(iprot);
          return frame;
        case DEFLATED_ENTRY:
          ByteBuffer deflatedEntry;
          deflatedEntry = iprot.readBinary();
          return deflatedEntry;
        case DEDUPLICATED_SNAPSHOT:
          DeduplicatedSnapshot deduplicatedSnapshot;
          deduplicatedSnapshot = new DeduplicatedSnapshot();
          deduplicatedSnapshot.read(iprot);
          return deduplicatedSnapshot;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case SNAPSHOT:
        Snapshot snapshot = (Snapshot)value_;
        snapshot.write(oprot);
        return;
      case TRANSACTION:
        Transaction transaction = (Transaction)value_;
        transaction.write(oprot);
        return;
      case NOOP:
        Boolean noop = (Boolean)value_;
        oprot.writeBool(noop);
        return;
      case FRAME:
        Frame frame = (Frame)value_;
        frame.write(oprot);
        return;
      case DEFLATED_ENTRY:
        ByteBuffer deflatedEntry = (ByteBuffer)value_;
        oprot.writeBinary(deflatedEntry);
        return;
      case DEDUPLICATED_SNAPSHOT:
        DeduplicatedSnapshot deduplicatedSnapshot = (DeduplicatedSnapshot)value_;
        deduplicatedSnapshot.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case SNAPSHOT:
        return SNAPSHOT_FIELD_DESC;
      case TRANSACTION:
        return TRANSACTION_FIELD_DESC;
      case NOOP:
        return NOOP_FIELD_DESC;
      case FRAME:
        return FRAME_FIELD_DESC;
      case DEFLATED_ENTRY:
        return DEFLATED_ENTRY_FIELD_DESC;
      case DEDUPLICATED_SNAPSHOT:
        return DEDUPLICATED_SNAPSHOT_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public Snapshot getSnapshot() {
    if (getSetField() == _Fields.SNAPSHOT) {
      return (Snapshot)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'snapshot' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSnapshot(Snapshot value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SNAPSHOT;
    value_ = value;
  }

  public Transaction getTransaction() {
    if (getSetField() == _Fields.TRANSACTION) {
      return (Transaction)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'transaction' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTransaction(Transaction value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.TRANSACTION;
    value_ = value;
  }

  public boolean getNoop() {
    if (getSetField() == _Fields.NOOP) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'noop' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNoop(boolean value) {
    setField_ = _Fields.NOOP;
    value_ = value;
  }

  public Frame getFrame() {
    if (getSetField() == _Fields.FRAME) {
      return (Frame)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'frame' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFrame(Frame value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.FRAME;
    value_ = value;
  }

  public byte[] getDeflatedEntry() {
    setDeflatedEntry(org.apache.thrift.TBaseHelper.rightSize(bufferForDeflatedEntry()));
    ByteBuffer b = bufferForDeflatedEntry();
    return b == null ? null : b.array();
  }

  public ByteBuffer bufferForDeflatedEntry() {
    if (getSetField() == _Fields.DEFLATED_ENTRY) {
      return (ByteBuffer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'deflatedEntry' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDeflatedEntry(byte[] value) {
    setDeflatedEntry(ByteBuffer.wrap(value));
  }

  public void setDeflatedEntry(ByteBuffer value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DEFLATED_ENTRY;
    value_ = value;
  }

  public DeduplicatedSnapshot getDeduplicatedSnapshot() {
    if (getSetField() == _Fields.DEDUPLICATED_SNAPSHOT) {
      return (DeduplicatedSnapshot)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'deduplicatedSnapshot' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDeduplicatedSnapshot(DeduplicatedSnapshot value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DEDUPLICATED_SNAPSHOT;
    value_ = value;
  }

  public boolean isSetSnapshot() {
    return setField_ == _Fields.SNAPSHOT;
  }


  public boolean isSetTransaction() {
    return setField_ == _Fields.TRANSACTION;
  }


  public boolean isSetNoop() {
    return setField_ == _Fields.NOOP;
  }


  public boolean isSetFrame() {
    return setField_ == _Fields.FRAME;
  }


  public boolean isSetDeflatedEntry() {
    return setField_ == _Fields.DEFLATED_ENTRY;
  }


  public boolean isSetDeduplicatedSnapshot() {
    return setField_ == _Fields.DEDUPLICATED_SNAPSHOT;
  }


  public boolean equals(Object other) {
    if (other instanceof LogEntry) {
      return equals((LogEntry)other);
    } else {
      return false;
    }
  }

  public boolean equals(LogEntry other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(LogEntry other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
