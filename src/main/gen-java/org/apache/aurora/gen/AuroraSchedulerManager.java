/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.aurora.gen;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AuroraSchedulerManager {

  public interface Iface extends ReadOnlyScheduler.Iface {

    /**
     * Creates a new job.  The request will be denied if a job with the provided name already exists
     * in the cluster.
     * 
     * @param description
     * @param lock
     * @param session
     */
    public Response createJob(JobConfiguration description, Lock lock, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Enters a job into the cron schedule, without actually starting the job.
     * If the job is already present in the schedule, this will update the schedule entry with the new
     * configuration.
     * 
     * @param description
     * @param lock
     * @param session
     */
    public Response scheduleCronJob(JobConfiguration description, Lock lock, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Removes a job from the cron schedule. The request will be denied if the job was not previously
     * scheduled with scheduleCronJob.
     * 
     * @param job
     * @param lock
     * @param session
     */
    public Response descheduleCronJob(JobKey job, Lock lock, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Starts a cron job immediately.  The request will be denied if the specified job does not
     * exist for the role account, or the job is not a cron job.
     * 
     * @param job
     * @param session
     */
    public Response startCronJob(JobKey job, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Restarts a batch of shards.
     * 
     * @param job
     * @param shardIds
     * @param lock
     * @param session
     */
    public Response restartShards(JobKey job, Set<Integer> shardIds, Lock lock, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Initiates a kill on tasks.
     * 
     * @param query
     * @param lock
     * @param session
     */
    public Response killTasks(TaskQuery query, Lock lock, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Adds new instances specified by the AddInstancesConfig. A job represented by the JobKey must be
     * protected by Lock.
     * 
     * @param config
     * @param lock
     * @param session
     */
    public Response addInstances(AddInstancesConfig config, Lock lock, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Creates and saves a new Lock instance guarding against multiple mutating operations within the
     * context defined by LockKey.
     * 
     * @param lockKey
     * @param session
     */
    public Response acquireLock(LockKey lockKey, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Releases the lock acquired earlier in acquireLock call.
     * 
     * @param lock
     * @param validation
     * @param session
     */
    public Response releaseLock(Lock lock, LockValidation validation, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Replaces the template (configuration) for the existing cron job.
     * The cron job template (configuration) must exist for the call to succeed.
     * 
     * @param config
     * @param lock
     * @param session
     */
    public Response replaceCronTemplate(JobConfiguration config, Lock lock, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Starts update of the existing service job. Not implemented yet.
     * 
     * @param request
     * @param session
     */
    public Response startJobUpdate(JobUpdateRequest request, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Pauses the update progress for the specified job. Can be resumed by resumeUpdate call.
     * Not implemented yet.
     * 
     * @param jobKey
     * @param session
     */
    public Response pauseJobUpdate(JobKey jobKey, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Resumes progress of a previously paused job update. Not implemented yet.
     * 
     * @param jobKey
     * @param session
     */
    public Response resumeJobUpdate(JobKey jobKey, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Permanently aborts the job update. Does not remove the update history. Not implemented yet.
     * 
     * @param jobKey
     * @param session
     */
    public Response abortJobUpdate(JobKey jobKey, SessionKey session) throws org.apache.thrift.TException;

    /**
     * Allows progress of the job update in case blockIfNoPulsesAfterMs is specified in
     * JobUpdateSettings. Unblocks progress if the update was previously blocked.
     * Responds with ResponseCode.INVALID_REQUEST in case an unknown updateId is specified.
     * 
     * @param updateId
     * @param session
     */
    public Response pulseJobUpdate(String updateId, SessionKey session) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends ReadOnlyScheduler .AsyncIface {

    public void createJob(JobConfiguration description, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void scheduleCronJob(JobConfiguration description, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void descheduleCronJob(JobKey job, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void startCronJob(JobKey job, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void restartShards(JobKey job, Set<Integer> shardIds, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void killTasks(TaskQuery query, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addInstances(AddInstancesConfig config, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void acquireLock(LockKey lockKey, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void releaseLock(Lock lock, LockValidation validation, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void replaceCronTemplate(JobConfiguration config, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void startJobUpdate(JobUpdateRequest request, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pauseJobUpdate(JobKey jobKey, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resumeJobUpdate(JobKey jobKey, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void abortJobUpdate(JobKey jobKey, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pulseJobUpdate(String updateId, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ReadOnlyScheduler.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Response createJob(JobConfiguration description, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      send_createJob(description, lock, session);
      return recv_createJob();
    }

    public void send_createJob(JobConfiguration description, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      createJob_args args = new createJob_args();
      args.setDescription(description);
      args.setLock(lock);
      args.setSession(session);
      sendBase("createJob", args);
    }

    public Response recv_createJob() throws org.apache.thrift.TException
    {
      createJob_result result = new createJob_result();
      receiveBase(result, "createJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createJob failed: unknown result");
    }

    public Response scheduleCronJob(JobConfiguration description, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      send_scheduleCronJob(description, lock, session);
      return recv_scheduleCronJob();
    }

    public void send_scheduleCronJob(JobConfiguration description, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      scheduleCronJob_args args = new scheduleCronJob_args();
      args.setDescription(description);
      args.setLock(lock);
      args.setSession(session);
      sendBase("scheduleCronJob", args);
    }

    public Response recv_scheduleCronJob() throws org.apache.thrift.TException
    {
      scheduleCronJob_result result = new scheduleCronJob_result();
      receiveBase(result, "scheduleCronJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scheduleCronJob failed: unknown result");
    }

    public Response descheduleCronJob(JobKey job, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      send_descheduleCronJob(job, lock, session);
      return recv_descheduleCronJob();
    }

    public void send_descheduleCronJob(JobKey job, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      descheduleCronJob_args args = new descheduleCronJob_args();
      args.setJob(job);
      args.setLock(lock);
      args.setSession(session);
      sendBase("descheduleCronJob", args);
    }

    public Response recv_descheduleCronJob() throws org.apache.thrift.TException
    {
      descheduleCronJob_result result = new descheduleCronJob_result();
      receiveBase(result, "descheduleCronJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "descheduleCronJob failed: unknown result");
    }

    public Response startCronJob(JobKey job, SessionKey session) throws org.apache.thrift.TException
    {
      send_startCronJob(job, session);
      return recv_startCronJob();
    }

    public void send_startCronJob(JobKey job, SessionKey session) throws org.apache.thrift.TException
    {
      startCronJob_args args = new startCronJob_args();
      args.setJob(job);
      args.setSession(session);
      sendBase("startCronJob", args);
    }

    public Response recv_startCronJob() throws org.apache.thrift.TException
    {
      startCronJob_result result = new startCronJob_result();
      receiveBase(result, "startCronJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startCronJob failed: unknown result");
    }

    public Response restartShards(JobKey job, Set<Integer> shardIds, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      send_restartShards(job, shardIds, lock, session);
      return recv_restartShards();
    }

    public void send_restartShards(JobKey job, Set<Integer> shardIds, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      restartShards_args args = new restartShards_args();
      args.setJob(job);
      args.setShardIds(shardIds);
      args.setLock(lock);
      args.setSession(session);
      sendBase("restartShards", args);
    }

    public Response recv_restartShards() throws org.apache.thrift.TException
    {
      restartShards_result result = new restartShards_result();
      receiveBase(result, "restartShards");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "restartShards failed: unknown result");
    }

    public Response killTasks(TaskQuery query, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      send_killTasks(query, lock, session);
      return recv_killTasks();
    }

    public void send_killTasks(TaskQuery query, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      killTasks_args args = new killTasks_args();
      args.setQuery(query);
      args.setLock(lock);
      args.setSession(session);
      sendBase("killTasks", args);
    }

    public Response recv_killTasks() throws org.apache.thrift.TException
    {
      killTasks_result result = new killTasks_result();
      receiveBase(result, "killTasks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "killTasks failed: unknown result");
    }

    public Response addInstances(AddInstancesConfig config, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      send_addInstances(config, lock, session);
      return recv_addInstances();
    }

    public void send_addInstances(AddInstancesConfig config, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      addInstances_args args = new addInstances_args();
      args.setConfig(config);
      args.setLock(lock);
      args.setSession(session);
      sendBase("addInstances", args);
    }

    public Response recv_addInstances() throws org.apache.thrift.TException
    {
      addInstances_result result = new addInstances_result();
      receiveBase(result, "addInstances");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addInstances failed: unknown result");
    }

    public Response acquireLock(LockKey lockKey, SessionKey session) throws org.apache.thrift.TException
    {
      send_acquireLock(lockKey, session);
      return recv_acquireLock();
    }

    public void send_acquireLock(LockKey lockKey, SessionKey session) throws org.apache.thrift.TException
    {
      acquireLock_args args = new acquireLock_args();
      args.setLockKey(lockKey);
      args.setSession(session);
      sendBase("acquireLock", args);
    }

    public Response recv_acquireLock() throws org.apache.thrift.TException
    {
      acquireLock_result result = new acquireLock_result();
      receiveBase(result, "acquireLock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "acquireLock failed: unknown result");
    }

    public Response releaseLock(Lock lock, LockValidation validation, SessionKey session) throws org.apache.thrift.TException
    {
      send_releaseLock(lock, validation, session);
      return recv_releaseLock();
    }

    public void send_releaseLock(Lock lock, LockValidation validation, SessionKey session) throws org.apache.thrift.TException
    {
      releaseLock_args args = new releaseLock_args();
      args.setLock(lock);
      args.setValidation(validation);
      args.setSession(session);
      sendBase("releaseLock", args);
    }

    public Response recv_releaseLock() throws org.apache.thrift.TException
    {
      releaseLock_result result = new releaseLock_result();
      receiveBase(result, "releaseLock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "releaseLock failed: unknown result");
    }

    public Response replaceCronTemplate(JobConfiguration config, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      send_replaceCronTemplate(config, lock, session);
      return recv_replaceCronTemplate();
    }

    public void send_replaceCronTemplate(JobConfiguration config, Lock lock, SessionKey session) throws org.apache.thrift.TException
    {
      replaceCronTemplate_args args = new replaceCronTemplate_args();
      args.setConfig(config);
      args.setLock(lock);
      args.setSession(session);
      sendBase("replaceCronTemplate", args);
    }

    public Response recv_replaceCronTemplate() throws org.apache.thrift.TException
    {
      replaceCronTemplate_result result = new replaceCronTemplate_result();
      receiveBase(result, "replaceCronTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "replaceCronTemplate failed: unknown result");
    }

    public Response startJobUpdate(JobUpdateRequest request, SessionKey session) throws org.apache.thrift.TException
    {
      send_startJobUpdate(request, session);
      return recv_startJobUpdate();
    }

    public void send_startJobUpdate(JobUpdateRequest request, SessionKey session) throws org.apache.thrift.TException
    {
      startJobUpdate_args args = new startJobUpdate_args();
      args.setRequest(request);
      args.setSession(session);
      sendBase("startJobUpdate", args);
    }

    public Response recv_startJobUpdate() throws org.apache.thrift.TException
    {
      startJobUpdate_result result = new startJobUpdate_result();
      receiveBase(result, "startJobUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startJobUpdate failed: unknown result");
    }

    public Response pauseJobUpdate(JobKey jobKey, SessionKey session) throws org.apache.thrift.TException
    {
      send_pauseJobUpdate(jobKey, session);
      return recv_pauseJobUpdate();
    }

    public void send_pauseJobUpdate(JobKey jobKey, SessionKey session) throws org.apache.thrift.TException
    {
      pauseJobUpdate_args args = new pauseJobUpdate_args();
      args.setJobKey(jobKey);
      args.setSession(session);
      sendBase("pauseJobUpdate", args);
    }

    public Response recv_pauseJobUpdate() throws org.apache.thrift.TException
    {
      pauseJobUpdate_result result = new pauseJobUpdate_result();
      receiveBase(result, "pauseJobUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pauseJobUpdate failed: unknown result");
    }

    public Response resumeJobUpdate(JobKey jobKey, SessionKey session) throws org.apache.thrift.TException
    {
      send_resumeJobUpdate(jobKey, session);
      return recv_resumeJobUpdate();
    }

    public void send_resumeJobUpdate(JobKey jobKey, SessionKey session) throws org.apache.thrift.TException
    {
      resumeJobUpdate_args args = new resumeJobUpdate_args();
      args.setJobKey(jobKey);
      args.setSession(session);
      sendBase("resumeJobUpdate", args);
    }

    public Response recv_resumeJobUpdate() throws org.apache.thrift.TException
    {
      resumeJobUpdate_result result = new resumeJobUpdate_result();
      receiveBase(result, "resumeJobUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resumeJobUpdate failed: unknown result");
    }

    public Response abortJobUpdate(JobKey jobKey, SessionKey session) throws org.apache.thrift.TException
    {
      send_abortJobUpdate(jobKey, session);
      return recv_abortJobUpdate();
    }

    public void send_abortJobUpdate(JobKey jobKey, SessionKey session) throws org.apache.thrift.TException
    {
      abortJobUpdate_args args = new abortJobUpdate_args();
      args.setJobKey(jobKey);
      args.setSession(session);
      sendBase("abortJobUpdate", args);
    }

    public Response recv_abortJobUpdate() throws org.apache.thrift.TException
    {
      abortJobUpdate_result result = new abortJobUpdate_result();
      receiveBase(result, "abortJobUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "abortJobUpdate failed: unknown result");
    }

    public Response pulseJobUpdate(String updateId, SessionKey session) throws org.apache.thrift.TException
    {
      send_pulseJobUpdate(updateId, session);
      return recv_pulseJobUpdate();
    }

    public void send_pulseJobUpdate(String updateId, SessionKey session) throws org.apache.thrift.TException
    {
      pulseJobUpdate_args args = new pulseJobUpdate_args();
      args.setUpdateId(updateId);
      args.setSession(session);
      sendBase("pulseJobUpdate", args);
    }

    public Response recv_pulseJobUpdate() throws org.apache.thrift.TException
    {
      pulseJobUpdate_result result = new pulseJobUpdate_result();
      receiveBase(result, "pulseJobUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pulseJobUpdate failed: unknown result");
    }

  }
  public static class AsyncClient extends ReadOnlyScheduler.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createJob(JobConfiguration description, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createJob_call method_call = new createJob_call(description, lock, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private JobConfiguration description;
      private Lock lock;
      private SessionKey session;
      public createJob_call(JobConfiguration description, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.description = description;
        this.lock = lock;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createJob_args args = new createJob_args();
        args.setDescription(description);
        args.setLock(lock);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createJob();
      }
    }

    public void scheduleCronJob(JobConfiguration description, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scheduleCronJob_call method_call = new scheduleCronJob_call(description, lock, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scheduleCronJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private JobConfiguration description;
      private Lock lock;
      private SessionKey session;
      public scheduleCronJob_call(JobConfiguration description, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.description = description;
        this.lock = lock;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scheduleCronJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scheduleCronJob_args args = new scheduleCronJob_args();
        args.setDescription(description);
        args.setLock(lock);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scheduleCronJob();
      }
    }

    public void descheduleCronJob(JobKey job, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      descheduleCronJob_call method_call = new descheduleCronJob_call(job, lock, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class descheduleCronJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private JobKey job;
      private Lock lock;
      private SessionKey session;
      public descheduleCronJob_call(JobKey job, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.job = job;
        this.lock = lock;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("descheduleCronJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        descheduleCronJob_args args = new descheduleCronJob_args();
        args.setJob(job);
        args.setLock(lock);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_descheduleCronJob();
      }
    }

    public void startCronJob(JobKey job, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startCronJob_call method_call = new startCronJob_call(job, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startCronJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private JobKey job;
      private SessionKey session;
      public startCronJob_call(JobKey job, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.job = job;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startCronJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startCronJob_args args = new startCronJob_args();
        args.setJob(job);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startCronJob();
      }
    }

    public void restartShards(JobKey job, Set<Integer> shardIds, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      restartShards_call method_call = new restartShards_call(job, shardIds, lock, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class restartShards_call extends org.apache.thrift.async.TAsyncMethodCall {
      private JobKey job;
      private Set<Integer> shardIds;
      private Lock lock;
      private SessionKey session;
      public restartShards_call(JobKey job, Set<Integer> shardIds, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.job = job;
        this.shardIds = shardIds;
        this.lock = lock;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restartShards", org.apache.thrift.protocol.TMessageType.CALL, 0));
        restartShards_args args = new restartShards_args();
        args.setJob(job);
        args.setShardIds(shardIds);
        args.setLock(lock);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_restartShards();
      }
    }

    public void killTasks(TaskQuery query, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      killTasks_call method_call = new killTasks_call(query, lock, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class killTasks_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TaskQuery query;
      private Lock lock;
      private SessionKey session;
      public killTasks_call(TaskQuery query, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.lock = lock;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("killTasks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        killTasks_args args = new killTasks_args();
        args.setQuery(query);
        args.setLock(lock);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_killTasks();
      }
    }

    public void addInstances(AddInstancesConfig config, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addInstances_call method_call = new addInstances_call(config, lock, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addInstances_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AddInstancesConfig config;
      private Lock lock;
      private SessionKey session;
      public addInstances_call(AddInstancesConfig config, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.config = config;
        this.lock = lock;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addInstances", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addInstances_args args = new addInstances_args();
        args.setConfig(config);
        args.setLock(lock);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addInstances();
      }
    }

    public void acquireLock(LockKey lockKey, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      acquireLock_call method_call = new acquireLock_call(lockKey, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class acquireLock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LockKey lockKey;
      private SessionKey session;
      public acquireLock_call(LockKey lockKey, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lockKey = lockKey;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("acquireLock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        acquireLock_args args = new acquireLock_args();
        args.setLockKey(lockKey);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_acquireLock();
      }
    }

    public void releaseLock(Lock lock, LockValidation validation, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      releaseLock_call method_call = new releaseLock_call(lock, validation, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class releaseLock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Lock lock;
      private LockValidation validation;
      private SessionKey session;
      public releaseLock_call(Lock lock, LockValidation validation, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lock = lock;
        this.validation = validation;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("releaseLock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        releaseLock_args args = new releaseLock_args();
        args.setLock(lock);
        args.setValidation(validation);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_releaseLock();
      }
    }

    public void replaceCronTemplate(JobConfiguration config, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replaceCronTemplate_call method_call = new replaceCronTemplate_call(config, lock, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replaceCronTemplate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private JobConfiguration config;
      private Lock lock;
      private SessionKey session;
      public replaceCronTemplate_call(JobConfiguration config, Lock lock, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.config = config;
        this.lock = lock;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replaceCronTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replaceCronTemplate_args args = new replaceCronTemplate_args();
        args.setConfig(config);
        args.setLock(lock);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_replaceCronTemplate();
      }
    }

    public void startJobUpdate(JobUpdateRequest request, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startJobUpdate_call method_call = new startJobUpdate_call(request, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startJobUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private JobUpdateRequest request;
      private SessionKey session;
      public startJobUpdate_call(JobUpdateRequest request, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startJobUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startJobUpdate_args args = new startJobUpdate_args();
        args.setRequest(request);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startJobUpdate();
      }
    }

    public void pauseJobUpdate(JobKey jobKey, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pauseJobUpdate_call method_call = new pauseJobUpdate_call(jobKey, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pauseJobUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private JobKey jobKey;
      private SessionKey session;
      public pauseJobUpdate_call(JobKey jobKey, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobKey = jobKey;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pauseJobUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pauseJobUpdate_args args = new pauseJobUpdate_args();
        args.setJobKey(jobKey);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pauseJobUpdate();
      }
    }

    public void resumeJobUpdate(JobKey jobKey, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resumeJobUpdate_call method_call = new resumeJobUpdate_call(jobKey, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resumeJobUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private JobKey jobKey;
      private SessionKey session;
      public resumeJobUpdate_call(JobKey jobKey, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobKey = jobKey;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resumeJobUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resumeJobUpdate_args args = new resumeJobUpdate_args();
        args.setJobKey(jobKey);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resumeJobUpdate();
      }
    }

    public void abortJobUpdate(JobKey jobKey, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      abortJobUpdate_call method_call = new abortJobUpdate_call(jobKey, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class abortJobUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private JobKey jobKey;
      private SessionKey session;
      public abortJobUpdate_call(JobKey jobKey, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobKey = jobKey;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("abortJobUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        abortJobUpdate_args args = new abortJobUpdate_args();
        args.setJobKey(jobKey);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_abortJobUpdate();
      }
    }

    public void pulseJobUpdate(String updateId, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pulseJobUpdate_call method_call = new pulseJobUpdate_call(updateId, session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pulseJobUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String updateId;
      private SessionKey session;
      public pulseJobUpdate_call(String updateId, SessionKey session, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.updateId = updateId;
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pulseJobUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pulseJobUpdate_args args = new pulseJobUpdate_args();
        args.setUpdateId(updateId);
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pulseJobUpdate();
      }
    }

  }

  public static class Processor<I extends Iface> extends ReadOnlyScheduler.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createJob", new createJob());
      processMap.put("scheduleCronJob", new scheduleCronJob());
      processMap.put("descheduleCronJob", new descheduleCronJob());
      processMap.put("startCronJob", new startCronJob());
      processMap.put("restartShards", new restartShards());
      processMap.put("killTasks", new killTasks());
      processMap.put("addInstances", new addInstances());
      processMap.put("acquireLock", new acquireLock());
      processMap.put("releaseLock", new releaseLock());
      processMap.put("replaceCronTemplate", new replaceCronTemplate());
      processMap.put("startJobUpdate", new startJobUpdate());
      processMap.put("pauseJobUpdate", new pauseJobUpdate());
      processMap.put("resumeJobUpdate", new resumeJobUpdate());
      processMap.put("abortJobUpdate", new abortJobUpdate());
      processMap.put("pulseJobUpdate", new pulseJobUpdate());
      return processMap;
    }

    public static class createJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createJob_args> {
      public createJob() {
        super("createJob");
      }

      public createJob_args getEmptyArgsInstance() {
        return new createJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createJob_result getResult(I iface, createJob_args args) throws org.apache.thrift.TException {
        createJob_result result = new createJob_result();
        result.success = iface.createJob(args.description, args.lock, args.session);
        return result;
      }
    }

    public static class scheduleCronJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scheduleCronJob_args> {
      public scheduleCronJob() {
        super("scheduleCronJob");
      }

      public scheduleCronJob_args getEmptyArgsInstance() {
        return new scheduleCronJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public scheduleCronJob_result getResult(I iface, scheduleCronJob_args args) throws org.apache.thrift.TException {
        scheduleCronJob_result result = new scheduleCronJob_result();
        result.success = iface.scheduleCronJob(args.description, args.lock, args.session);
        return result;
      }
    }

    public static class descheduleCronJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, descheduleCronJob_args> {
      public descheduleCronJob() {
        super("descheduleCronJob");
      }

      public descheduleCronJob_args getEmptyArgsInstance() {
        return new descheduleCronJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public descheduleCronJob_result getResult(I iface, descheduleCronJob_args args) throws org.apache.thrift.TException {
        descheduleCronJob_result result = new descheduleCronJob_result();
        result.success = iface.descheduleCronJob(args.job, args.lock, args.session);
        return result;
      }
    }

    public static class startCronJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startCronJob_args> {
      public startCronJob() {
        super("startCronJob");
      }

      public startCronJob_args getEmptyArgsInstance() {
        return new startCronJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startCronJob_result getResult(I iface, startCronJob_args args) throws org.apache.thrift.TException {
        startCronJob_result result = new startCronJob_result();
        result.success = iface.startCronJob(args.job, args.session);
        return result;
      }
    }

    public static class restartShards<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restartShards_args> {
      public restartShards() {
        super("restartShards");
      }

      public restartShards_args getEmptyArgsInstance() {
        return new restartShards_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public restartShards_result getResult(I iface, restartShards_args args) throws org.apache.thrift.TException {
        restartShards_result result = new restartShards_result();
        result.success = iface.restartShards(args.job, args.shardIds, args.lock, args.session);
        return result;
      }
    }

    public static class killTasks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, killTasks_args> {
      public killTasks() {
        super("killTasks");
      }

      public killTasks_args getEmptyArgsInstance() {
        return new killTasks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public killTasks_result getResult(I iface, killTasks_args args) throws org.apache.thrift.TException {
        killTasks_result result = new killTasks_result();
        result.success = iface.killTasks(args.query, args.lock, args.session);
        return result;
      }
    }

    public static class addInstances<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addInstances_args> {
      public addInstances() {
        super("addInstances");
      }

      public addInstances_args getEmptyArgsInstance() {
        return new addInstances_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addInstances_result getResult(I iface, addInstances_args args) throws org.apache.thrift.TException {
        addInstances_result result = new addInstances_result();
        result.success = iface.addInstances(args.config, args.lock, args.session);
        return result;
      }
    }

    public static class acquireLock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, acquireLock_args> {
      public acquireLock() {
        super("acquireLock");
      }

      public acquireLock_args getEmptyArgsInstance() {
        return new acquireLock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public acquireLock_result getResult(I iface, acquireLock_args args) throws org.apache.thrift.TException {
        acquireLock_result result = new acquireLock_result();
        result.success = iface.acquireLock(args.lockKey, args.session);
        return result;
      }
    }

    public static class releaseLock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, releaseLock_args> {
      public releaseLock() {
        super("releaseLock");
      }

      public releaseLock_args getEmptyArgsInstance() {
        return new releaseLock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public releaseLock_result getResult(I iface, releaseLock_args args) throws org.apache.thrift.TException {
        releaseLock_result result = new releaseLock_result();
        result.success = iface.releaseLock(args.lock, args.validation, args.session);
        return result;
      }
    }

    public static class replaceCronTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replaceCronTemplate_args> {
      public replaceCronTemplate() {
        super("replaceCronTemplate");
      }

      public replaceCronTemplate_args getEmptyArgsInstance() {
        return new replaceCronTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replaceCronTemplate_result getResult(I iface, replaceCronTemplate_args args) throws org.apache.thrift.TException {
        replaceCronTemplate_result result = new replaceCronTemplate_result();
        result.success = iface.replaceCronTemplate(args.config, args.lock, args.session);
        return result;
      }
    }

    public static class startJobUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startJobUpdate_args> {
      public startJobUpdate() {
        super("startJobUpdate");
      }

      public startJobUpdate_args getEmptyArgsInstance() {
        return new startJobUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startJobUpdate_result getResult(I iface, startJobUpdate_args args) throws org.apache.thrift.TException {
        startJobUpdate_result result = new startJobUpdate_result();
        result.success = iface.startJobUpdate(args.request, args.session);
        return result;
      }
    }

    public static class pauseJobUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pauseJobUpdate_args> {
      public pauseJobUpdate() {
        super("pauseJobUpdate");
      }

      public pauseJobUpdate_args getEmptyArgsInstance() {
        return new pauseJobUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pauseJobUpdate_result getResult(I iface, pauseJobUpdate_args args) throws org.apache.thrift.TException {
        pauseJobUpdate_result result = new pauseJobUpdate_result();
        result.success = iface.pauseJobUpdate(args.jobKey, args.session);
        return result;
      }
    }

    public static class resumeJobUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resumeJobUpdate_args> {
      public resumeJobUpdate() {
        super("resumeJobUpdate");
      }

      public resumeJobUpdate_args getEmptyArgsInstance() {
        return new resumeJobUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resumeJobUpdate_result getResult(I iface, resumeJobUpdate_args args) throws org.apache.thrift.TException {
        resumeJobUpdate_result result = new resumeJobUpdate_result();
        result.success = iface.resumeJobUpdate(args.jobKey, args.session);
        return result;
      }
    }

    public static class abortJobUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, abortJobUpdate_args> {
      public abortJobUpdate() {
        super("abortJobUpdate");
      }

      public abortJobUpdate_args getEmptyArgsInstance() {
        return new abortJobUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public abortJobUpdate_result getResult(I iface, abortJobUpdate_args args) throws org.apache.thrift.TException {
        abortJobUpdate_result result = new abortJobUpdate_result();
        result.success = iface.abortJobUpdate(args.jobKey, args.session);
        return result;
      }
    }

    public static class pulseJobUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pulseJobUpdate_args> {
      public pulseJobUpdate() {
        super("pulseJobUpdate");
      }

      public pulseJobUpdate_args getEmptyArgsInstance() {
        return new pulseJobUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pulseJobUpdate_result getResult(I iface, pulseJobUpdate_args args) throws org.apache.thrift.TException {
        pulseJobUpdate_result result = new pulseJobUpdate_result();
        result.success = iface.pulseJobUpdate(args.updateId, args.session);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends ReadOnlyScheduler.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createJob", new createJob());
      processMap.put("scheduleCronJob", new scheduleCronJob());
      processMap.put("descheduleCronJob", new descheduleCronJob());
      processMap.put("startCronJob", new startCronJob());
      processMap.put("restartShards", new restartShards());
      processMap.put("killTasks", new killTasks());
      processMap.put("addInstances", new addInstances());
      processMap.put("acquireLock", new acquireLock());
      processMap.put("releaseLock", new releaseLock());
      processMap.put("replaceCronTemplate", new replaceCronTemplate());
      processMap.put("startJobUpdate", new startJobUpdate());
      processMap.put("pauseJobUpdate", new pauseJobUpdate());
      processMap.put("resumeJobUpdate", new resumeJobUpdate());
      processMap.put("abortJobUpdate", new abortJobUpdate());
      processMap.put("pulseJobUpdate", new pulseJobUpdate());
      return processMap;
    }

    public static class createJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createJob_args, Response> {
      public createJob() {
        super("createJob");
      }

      public createJob_args getEmptyArgsInstance() {
        return new createJob_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            createJob_result result = new createJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createJob_result result = new createJob_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createJob_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.createJob(args.description, args.lock, args.session,resultHandler);
      }
    }

    public static class scheduleCronJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, scheduleCronJob_args, Response> {
      public scheduleCronJob() {
        super("scheduleCronJob");
      }

      public scheduleCronJob_args getEmptyArgsInstance() {
        return new scheduleCronJob_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            scheduleCronJob_result result = new scheduleCronJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            scheduleCronJob_result result = new scheduleCronJob_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, scheduleCronJob_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.scheduleCronJob(args.description, args.lock, args.session,resultHandler);
      }
    }

    public static class descheduleCronJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, descheduleCronJob_args, Response> {
      public descheduleCronJob() {
        super("descheduleCronJob");
      }

      public descheduleCronJob_args getEmptyArgsInstance() {
        return new descheduleCronJob_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            descheduleCronJob_result result = new descheduleCronJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            descheduleCronJob_result result = new descheduleCronJob_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, descheduleCronJob_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.descheduleCronJob(args.job, args.lock, args.session,resultHandler);
      }
    }

    public static class startCronJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startCronJob_args, Response> {
      public startCronJob() {
        super("startCronJob");
      }

      public startCronJob_args getEmptyArgsInstance() {
        return new startCronJob_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            startCronJob_result result = new startCronJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            startCronJob_result result = new startCronJob_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startCronJob_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.startCronJob(args.job, args.session,resultHandler);
      }
    }

    public static class restartShards<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restartShards_args, Response> {
      public restartShards() {
        super("restartShards");
      }

      public restartShards_args getEmptyArgsInstance() {
        return new restartShards_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            restartShards_result result = new restartShards_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            restartShards_result result = new restartShards_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, restartShards_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.restartShards(args.job, args.shardIds, args.lock, args.session,resultHandler);
      }
    }

    public static class killTasks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, killTasks_args, Response> {
      public killTasks() {
        super("killTasks");
      }

      public killTasks_args getEmptyArgsInstance() {
        return new killTasks_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            killTasks_result result = new killTasks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            killTasks_result result = new killTasks_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, killTasks_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.killTasks(args.query, args.lock, args.session,resultHandler);
      }
    }

    public static class addInstances<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addInstances_args, Response> {
      public addInstances() {
        super("addInstances");
      }

      public addInstances_args getEmptyArgsInstance() {
        return new addInstances_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            addInstances_result result = new addInstances_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addInstances_result result = new addInstances_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addInstances_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.addInstances(args.config, args.lock, args.session,resultHandler);
      }
    }

    public static class acquireLock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, acquireLock_args, Response> {
      public acquireLock() {
        super("acquireLock");
      }

      public acquireLock_args getEmptyArgsInstance() {
        return new acquireLock_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            acquireLock_result result = new acquireLock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            acquireLock_result result = new acquireLock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, acquireLock_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.acquireLock(args.lockKey, args.session,resultHandler);
      }
    }

    public static class releaseLock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, releaseLock_args, Response> {
      public releaseLock() {
        super("releaseLock");
      }

      public releaseLock_args getEmptyArgsInstance() {
        return new releaseLock_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            releaseLock_result result = new releaseLock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            releaseLock_result result = new releaseLock_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, releaseLock_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.releaseLock(args.lock, args.validation, args.session,resultHandler);
      }
    }

    public static class replaceCronTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replaceCronTemplate_args, Response> {
      public replaceCronTemplate() {
        super("replaceCronTemplate");
      }

      public replaceCronTemplate_args getEmptyArgsInstance() {
        return new replaceCronTemplate_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            replaceCronTemplate_result result = new replaceCronTemplate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            replaceCronTemplate_result result = new replaceCronTemplate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, replaceCronTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.replaceCronTemplate(args.config, args.lock, args.session,resultHandler);
      }
    }

    public static class startJobUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startJobUpdate_args, Response> {
      public startJobUpdate() {
        super("startJobUpdate");
      }

      public startJobUpdate_args getEmptyArgsInstance() {
        return new startJobUpdate_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            startJobUpdate_result result = new startJobUpdate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            startJobUpdate_result result = new startJobUpdate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startJobUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.startJobUpdate(args.request, args.session,resultHandler);
      }
    }

    public static class pauseJobUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pauseJobUpdate_args, Response> {
      public pauseJobUpdate() {
        super("pauseJobUpdate");
      }

      public pauseJobUpdate_args getEmptyArgsInstance() {
        return new pauseJobUpdate_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            pauseJobUpdate_result result = new pauseJobUpdate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pauseJobUpdate_result result = new pauseJobUpdate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pauseJobUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.pauseJobUpdate(args.jobKey, args.session,resultHandler);
      }
    }

    public static class resumeJobUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resumeJobUpdate_args, Response> {
      public resumeJobUpdate() {
        super("resumeJobUpdate");
      }

      public resumeJobUpdate_args getEmptyArgsInstance() {
        return new resumeJobUpdate_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            resumeJobUpdate_result result = new resumeJobUpdate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resumeJobUpdate_result result = new resumeJobUpdate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resumeJobUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.resumeJobUpdate(args.jobKey, args.session,resultHandler);
      }
    }

    public static class abortJobUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, abortJobUpdate_args, Response> {
      public abortJobUpdate() {
        super("abortJobUpdate");
      }

      public abortJobUpdate_args getEmptyArgsInstance() {
        return new abortJobUpdate_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            abortJobUpdate_result result = new abortJobUpdate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            abortJobUpdate_result result = new abortJobUpdate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, abortJobUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.abortJobUpdate(args.jobKey, args.session,resultHandler);
      }
    }

    public static class pulseJobUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pulseJobUpdate_args, Response> {
      public pulseJobUpdate() {
        super("pulseJobUpdate");
      }

      public pulseJobUpdate_args getEmptyArgsInstance() {
        return new pulseJobUpdate_args();
      }

      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            pulseJobUpdate_result result = new pulseJobUpdate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pulseJobUpdate_result result = new pulseJobUpdate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pulseJobUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.pulseJobUpdate(args.updateId, args.session,resultHandler);
      }
    }

  }

  public static class createJob_args implements org.apache.thrift.TBase<createJob_args, createJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<createJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createJob_args");

    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("lock", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createJob_argsTupleSchemeFactory());
    }

    private JobConfiguration description; // required
    private Lock lock; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DESCRIPTION((short)1, "description"),
      LOCK((short)3, "lock"),
      SESSION((short)2, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DESCRIPTION
            return DESCRIPTION;
          case 3: // LOCK
            return LOCK;
          case 2: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobConfiguration.class)));
      tmpMap.put(_Fields.LOCK, new org.apache.thrift.meta_data.FieldMetaData("lock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Lock.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createJob_args.class, metaDataMap);
    }

    public createJob_args() {
    }

    public createJob_args(
      JobConfiguration description,
      Lock lock,
      SessionKey session)
    {
      this();
      this.description = description;
      this.lock = lock;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createJob_args(createJob_args other) {
      if (other.isSetDescription()) {
        this.description = new JobConfiguration(other.description);
      }
      if (other.isSetLock()) {
        this.lock = new Lock(other.lock);
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public createJob_args deepCopy() {
      return new createJob_args(this);
    }

    @Override
    public void clear() {
      this.description = null;
      this.lock = null;
      this.session = null;
    }

    public JobConfiguration getDescription() {
      return this.description;
    }

    public createJob_args setDescription(JobConfiguration description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public Lock getLock() {
      return this.lock;
    }

    public createJob_args setLock(Lock lock) {
      this.lock = lock;
      return this;
    }

    public void unsetLock() {
      this.lock = null;
    }

    /** Returns true if field lock is set (has been assigned a value) and false otherwise */
    public boolean isSetLock() {
      return this.lock != null;
    }

    public void setLockIsSet(boolean value) {
      if (!value) {
        this.lock = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public createJob_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((JobConfiguration)value);
        }
        break;

      case LOCK:
        if (value == null) {
          unsetLock();
        } else {
          setLock((Lock)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DESCRIPTION:
        return getDescription();

      case LOCK:
        return getLock();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DESCRIPTION:
        return isSetDescription();
      case LOCK:
        return isSetLock();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createJob_args)
        return this.equals((createJob_args)that);
      return false;
    }

    public boolean equals(createJob_args that) {
      if (that == null)
        return false;

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_lock = true && this.isSetLock();
      boolean that_present_lock = true && that.isSetLock();
      if (this_present_lock || that_present_lock) {
        if (!(this_present_lock && that_present_lock))
          return false;
        if (!this.lock.equals(that.lock))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_description = true && (isSetDescription());
      builder.append(present_description);
      if (present_description)
        builder.append(description);

      boolean present_lock = true && (isSetLock());
      builder.append(present_lock);
      if (present_lock)
        builder.append(lock);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLock()).compareTo(other.isSetLock());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLock()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lock, other.lock);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createJob_args(");
      boolean first = true;

      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lock:");
      if (this.lock == null) {
        sb.append("null");
      } else {
        sb.append(this.lock);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (description != null) {
        description.validate();
      }
      if (lock != null) {
        lock.validate();
      }
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createJob_argsStandardSchemeFactory implements SchemeFactory {
      public createJob_argsStandardScheme getScheme() {
        return new createJob_argsStandardScheme();
      }
    }

    private static class createJob_argsStandardScheme extends StandardScheme<createJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.description = new JobConfiguration();
                struct.description.read(iprot);
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lock = new Lock();
                struct.lock.read(iprot);
                struct.setLockIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          struct.description.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lock != null) {
          oprot.writeFieldBegin(LOCK_FIELD_DESC);
          struct.lock.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createJob_argsTupleSchemeFactory implements SchemeFactory {
      public createJob_argsTupleScheme getScheme() {
        return new createJob_argsTupleScheme();
      }
    }

    private static class createJob_argsTupleScheme extends TupleScheme<createJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDescription()) {
          optionals.set(0);
        }
        if (struct.isSetLock()) {
          optionals.set(1);
        }
        if (struct.isSetSession()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDescription()) {
          struct.description.write(oprot);
        }
        if (struct.isSetLock()) {
          struct.lock.write(oprot);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.description = new JobConfiguration();
          struct.description.read(iprot);
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lock = new Lock();
          struct.lock.read(iprot);
          struct.setLockIsSet(true);
        }
        if (incoming.get(2)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class createJob_result implements org.apache.thrift.TBase<createJob_result, createJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<createJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createJob_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createJob_result.class, metaDataMap);
    }

    public createJob_result() {
    }

    public createJob_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createJob_result(createJob_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public createJob_result deepCopy() {
      return new createJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public createJob_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createJob_result)
        return this.equals((createJob_result)that);
      return false;
    }

    public boolean equals(createJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(createJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createJob_resultStandardSchemeFactory implements SchemeFactory {
      public createJob_resultStandardScheme getScheme() {
        return new createJob_resultStandardScheme();
      }
    }

    private static class createJob_resultStandardScheme extends StandardScheme<createJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createJob_resultTupleSchemeFactory implements SchemeFactory {
      public createJob_resultTupleScheme getScheme() {
        return new createJob_resultTupleScheme();
      }
    }

    private static class createJob_resultTupleScheme extends TupleScheme<createJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class scheduleCronJob_args implements org.apache.thrift.TBase<scheduleCronJob_args, scheduleCronJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<scheduleCronJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scheduleCronJob_args");

    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("lock", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scheduleCronJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scheduleCronJob_argsTupleSchemeFactory());
    }

    private JobConfiguration description; // required
    private Lock lock; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DESCRIPTION((short)1, "description"),
      LOCK((short)3, "lock"),
      SESSION((short)2, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DESCRIPTION
            return DESCRIPTION;
          case 3: // LOCK
            return LOCK;
          case 2: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobConfiguration.class)));
      tmpMap.put(_Fields.LOCK, new org.apache.thrift.meta_data.FieldMetaData("lock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Lock.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scheduleCronJob_args.class, metaDataMap);
    }

    public scheduleCronJob_args() {
    }

    public scheduleCronJob_args(
      JobConfiguration description,
      Lock lock,
      SessionKey session)
    {
      this();
      this.description = description;
      this.lock = lock;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scheduleCronJob_args(scheduleCronJob_args other) {
      if (other.isSetDescription()) {
        this.description = new JobConfiguration(other.description);
      }
      if (other.isSetLock()) {
        this.lock = new Lock(other.lock);
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public scheduleCronJob_args deepCopy() {
      return new scheduleCronJob_args(this);
    }

    @Override
    public void clear() {
      this.description = null;
      this.lock = null;
      this.session = null;
    }

    public JobConfiguration getDescription() {
      return this.description;
    }

    public scheduleCronJob_args setDescription(JobConfiguration description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public Lock getLock() {
      return this.lock;
    }

    public scheduleCronJob_args setLock(Lock lock) {
      this.lock = lock;
      return this;
    }

    public void unsetLock() {
      this.lock = null;
    }

    /** Returns true if field lock is set (has been assigned a value) and false otherwise */
    public boolean isSetLock() {
      return this.lock != null;
    }

    public void setLockIsSet(boolean value) {
      if (!value) {
        this.lock = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public scheduleCronJob_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((JobConfiguration)value);
        }
        break;

      case LOCK:
        if (value == null) {
          unsetLock();
        } else {
          setLock((Lock)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DESCRIPTION:
        return getDescription();

      case LOCK:
        return getLock();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DESCRIPTION:
        return isSetDescription();
      case LOCK:
        return isSetLock();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scheduleCronJob_args)
        return this.equals((scheduleCronJob_args)that);
      return false;
    }

    public boolean equals(scheduleCronJob_args that) {
      if (that == null)
        return false;

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_lock = true && this.isSetLock();
      boolean that_present_lock = true && that.isSetLock();
      if (this_present_lock || that_present_lock) {
        if (!(this_present_lock && that_present_lock))
          return false;
        if (!this.lock.equals(that.lock))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_description = true && (isSetDescription());
      builder.append(present_description);
      if (present_description)
        builder.append(description);

      boolean present_lock = true && (isSetLock());
      builder.append(present_lock);
      if (present_lock)
        builder.append(lock);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(scheduleCronJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLock()).compareTo(other.isSetLock());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLock()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lock, other.lock);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scheduleCronJob_args(");
      boolean first = true;

      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lock:");
      if (this.lock == null) {
        sb.append("null");
      } else {
        sb.append(this.lock);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (description != null) {
        description.validate();
      }
      if (lock != null) {
        lock.validate();
      }
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scheduleCronJob_argsStandardSchemeFactory implements SchemeFactory {
      public scheduleCronJob_argsStandardScheme getScheme() {
        return new scheduleCronJob_argsStandardScheme();
      }
    }

    private static class scheduleCronJob_argsStandardScheme extends StandardScheme<scheduleCronJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scheduleCronJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.description = new JobConfiguration();
                struct.description.read(iprot);
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lock = new Lock();
                struct.lock.read(iprot);
                struct.setLockIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scheduleCronJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          struct.description.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lock != null) {
          oprot.writeFieldBegin(LOCK_FIELD_DESC);
          struct.lock.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scheduleCronJob_argsTupleSchemeFactory implements SchemeFactory {
      public scheduleCronJob_argsTupleScheme getScheme() {
        return new scheduleCronJob_argsTupleScheme();
      }
    }

    private static class scheduleCronJob_argsTupleScheme extends TupleScheme<scheduleCronJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scheduleCronJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDescription()) {
          optionals.set(0);
        }
        if (struct.isSetLock()) {
          optionals.set(1);
        }
        if (struct.isSetSession()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDescription()) {
          struct.description.write(oprot);
        }
        if (struct.isSetLock()) {
          struct.lock.write(oprot);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scheduleCronJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.description = new JobConfiguration();
          struct.description.read(iprot);
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lock = new Lock();
          struct.lock.read(iprot);
          struct.setLockIsSet(true);
        }
        if (incoming.get(2)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class scheduleCronJob_result implements org.apache.thrift.TBase<scheduleCronJob_result, scheduleCronJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<scheduleCronJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scheduleCronJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new scheduleCronJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new scheduleCronJob_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scheduleCronJob_result.class, metaDataMap);
    }

    public scheduleCronJob_result() {
    }

    public scheduleCronJob_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scheduleCronJob_result(scheduleCronJob_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public scheduleCronJob_result deepCopy() {
      return new scheduleCronJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public scheduleCronJob_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scheduleCronJob_result)
        return this.equals((scheduleCronJob_result)that);
      return false;
    }

    public boolean equals(scheduleCronJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(scheduleCronJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scheduleCronJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class scheduleCronJob_resultStandardSchemeFactory implements SchemeFactory {
      public scheduleCronJob_resultStandardScheme getScheme() {
        return new scheduleCronJob_resultStandardScheme();
      }
    }

    private static class scheduleCronJob_resultStandardScheme extends StandardScheme<scheduleCronJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, scheduleCronJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, scheduleCronJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class scheduleCronJob_resultTupleSchemeFactory implements SchemeFactory {
      public scheduleCronJob_resultTupleScheme getScheme() {
        return new scheduleCronJob_resultTupleScheme();
      }
    }

    private static class scheduleCronJob_resultTupleScheme extends TupleScheme<scheduleCronJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, scheduleCronJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, scheduleCronJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class descheduleCronJob_args implements org.apache.thrift.TBase<descheduleCronJob_args, descheduleCronJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<descheduleCronJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("descheduleCronJob_args");

    private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("lock", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new descheduleCronJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new descheduleCronJob_argsTupleSchemeFactory());
    }

    private JobKey job; // required
    private Lock lock; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB((short)4, "job"),
      LOCK((short)3, "lock"),
      SESSION((short)2, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 4: // JOB
            return JOB;
          case 3: // LOCK
            return LOCK;
          case 2: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobKey.class)));
      tmpMap.put(_Fields.LOCK, new org.apache.thrift.meta_data.FieldMetaData("lock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Lock.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(descheduleCronJob_args.class, metaDataMap);
    }

    public descheduleCronJob_args() {
    }

    public descheduleCronJob_args(
      JobKey job,
      Lock lock,
      SessionKey session)
    {
      this();
      this.job = job;
      this.lock = lock;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public descheduleCronJob_args(descheduleCronJob_args other) {
      if (other.isSetJob()) {
        this.job = new JobKey(other.job);
      }
      if (other.isSetLock()) {
        this.lock = new Lock(other.lock);
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public descheduleCronJob_args deepCopy() {
      return new descheduleCronJob_args(this);
    }

    @Override
    public void clear() {
      this.job = null;
      this.lock = null;
      this.session = null;
    }

    public JobKey getJob() {
      return this.job;
    }

    public descheduleCronJob_args setJob(JobKey job) {
      this.job = job;
      return this;
    }

    public void unsetJob() {
      this.job = null;
    }

    /** Returns true if field job is set (has been assigned a value) and false otherwise */
    public boolean isSetJob() {
      return this.job != null;
    }

    public void setJobIsSet(boolean value) {
      if (!value) {
        this.job = null;
      }
    }

    public Lock getLock() {
      return this.lock;
    }

    public descheduleCronJob_args setLock(Lock lock) {
      this.lock = lock;
      return this;
    }

    public void unsetLock() {
      this.lock = null;
    }

    /** Returns true if field lock is set (has been assigned a value) and false otherwise */
    public boolean isSetLock() {
      return this.lock != null;
    }

    public void setLockIsSet(boolean value) {
      if (!value) {
        this.lock = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public descheduleCronJob_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB:
        if (value == null) {
          unsetJob();
        } else {
          setJob((JobKey)value);
        }
        break;

      case LOCK:
        if (value == null) {
          unsetLock();
        } else {
          setLock((Lock)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB:
        return getJob();

      case LOCK:
        return getLock();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB:
        return isSetJob();
      case LOCK:
        return isSetLock();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof descheduleCronJob_args)
        return this.equals((descheduleCronJob_args)that);
      return false;
    }

    public boolean equals(descheduleCronJob_args that) {
      if (that == null)
        return false;

      boolean this_present_job = true && this.isSetJob();
      boolean that_present_job = true && that.isSetJob();
      if (this_present_job || that_present_job) {
        if (!(this_present_job && that_present_job))
          return false;
        if (!this.job.equals(that.job))
          return false;
      }

      boolean this_present_lock = true && this.isSetLock();
      boolean that_present_lock = true && that.isSetLock();
      if (this_present_lock || that_present_lock) {
        if (!(this_present_lock && that_present_lock))
          return false;
        if (!this.lock.equals(that.lock))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_job = true && (isSetJob());
      builder.append(present_job);
      if (present_job)
        builder.append(job);

      boolean present_lock = true && (isSetLock());
      builder.append(present_lock);
      if (present_lock)
        builder.append(lock);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(descheduleCronJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJob()).compareTo(other.isSetJob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job, other.job);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLock()).compareTo(other.isSetLock());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLock()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lock, other.lock);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("descheduleCronJob_args(");
      boolean first = true;

      sb.append("job:");
      if (this.job == null) {
        sb.append("null");
      } else {
        sb.append(this.job);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lock:");
      if (this.lock == null) {
        sb.append("null");
      } else {
        sb.append(this.lock);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (job != null) {
        job.validate();
      }
      if (lock != null) {
        lock.validate();
      }
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class descheduleCronJob_argsStandardSchemeFactory implements SchemeFactory {
      public descheduleCronJob_argsStandardScheme getScheme() {
        return new descheduleCronJob_argsStandardScheme();
      }
    }

    private static class descheduleCronJob_argsStandardScheme extends StandardScheme<descheduleCronJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, descheduleCronJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 4: // JOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.job = new JobKey();
                struct.job.read(iprot);
                struct.setJobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lock = new Lock();
                struct.lock.read(iprot);
                struct.setLockIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, descheduleCronJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lock != null) {
          oprot.writeFieldBegin(LOCK_FIELD_DESC);
          struct.lock.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.job != null) {
          oprot.writeFieldBegin(JOB_FIELD_DESC);
          struct.job.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class descheduleCronJob_argsTupleSchemeFactory implements SchemeFactory {
      public descheduleCronJob_argsTupleScheme getScheme() {
        return new descheduleCronJob_argsTupleScheme();
      }
    }

    private static class descheduleCronJob_argsTupleScheme extends TupleScheme<descheduleCronJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, descheduleCronJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJob()) {
          optionals.set(0);
        }
        if (struct.isSetLock()) {
          optionals.set(1);
        }
        if (struct.isSetSession()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetJob()) {
          struct.job.write(oprot);
        }
        if (struct.isSetLock()) {
          struct.lock.write(oprot);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, descheduleCronJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.job = new JobKey();
          struct.job.read(iprot);
          struct.setJobIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lock = new Lock();
          struct.lock.read(iprot);
          struct.setLockIsSet(true);
        }
        if (incoming.get(2)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class descheduleCronJob_result implements org.apache.thrift.TBase<descheduleCronJob_result, descheduleCronJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<descheduleCronJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("descheduleCronJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new descheduleCronJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new descheduleCronJob_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(descheduleCronJob_result.class, metaDataMap);
    }

    public descheduleCronJob_result() {
    }

    public descheduleCronJob_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public descheduleCronJob_result(descheduleCronJob_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public descheduleCronJob_result deepCopy() {
      return new descheduleCronJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public descheduleCronJob_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof descheduleCronJob_result)
        return this.equals((descheduleCronJob_result)that);
      return false;
    }

    public boolean equals(descheduleCronJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(descheduleCronJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("descheduleCronJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class descheduleCronJob_resultStandardSchemeFactory implements SchemeFactory {
      public descheduleCronJob_resultStandardScheme getScheme() {
        return new descheduleCronJob_resultStandardScheme();
      }
    }

    private static class descheduleCronJob_resultStandardScheme extends StandardScheme<descheduleCronJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, descheduleCronJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, descheduleCronJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class descheduleCronJob_resultTupleSchemeFactory implements SchemeFactory {
      public descheduleCronJob_resultTupleScheme getScheme() {
        return new descheduleCronJob_resultTupleScheme();
      }
    }

    private static class descheduleCronJob_resultTupleScheme extends TupleScheme<descheduleCronJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, descheduleCronJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, descheduleCronJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class startCronJob_args implements org.apache.thrift.TBase<startCronJob_args, startCronJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<startCronJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startCronJob_args");

    private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startCronJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startCronJob_argsTupleSchemeFactory());
    }

    private JobKey job; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB((short)4, "job"),
      SESSION((short)3, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 4: // JOB
            return JOB;
          case 3: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobKey.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startCronJob_args.class, metaDataMap);
    }

    public startCronJob_args() {
    }

    public startCronJob_args(
      JobKey job,
      SessionKey session)
    {
      this();
      this.job = job;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startCronJob_args(startCronJob_args other) {
      if (other.isSetJob()) {
        this.job = new JobKey(other.job);
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public startCronJob_args deepCopy() {
      return new startCronJob_args(this);
    }

    @Override
    public void clear() {
      this.job = null;
      this.session = null;
    }

    public JobKey getJob() {
      return this.job;
    }

    public startCronJob_args setJob(JobKey job) {
      this.job = job;
      return this;
    }

    public void unsetJob() {
      this.job = null;
    }

    /** Returns true if field job is set (has been assigned a value) and false otherwise */
    public boolean isSetJob() {
      return this.job != null;
    }

    public void setJobIsSet(boolean value) {
      if (!value) {
        this.job = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public startCronJob_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB:
        if (value == null) {
          unsetJob();
        } else {
          setJob((JobKey)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB:
        return getJob();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB:
        return isSetJob();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startCronJob_args)
        return this.equals((startCronJob_args)that);
      return false;
    }

    public boolean equals(startCronJob_args that) {
      if (that == null)
        return false;

      boolean this_present_job = true && this.isSetJob();
      boolean that_present_job = true && that.isSetJob();
      if (this_present_job || that_present_job) {
        if (!(this_present_job && that_present_job))
          return false;
        if (!this.job.equals(that.job))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_job = true && (isSetJob());
      builder.append(present_job);
      if (present_job)
        builder.append(job);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(startCronJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJob()).compareTo(other.isSetJob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job, other.job);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startCronJob_args(");
      boolean first = true;

      sb.append("job:");
      if (this.job == null) {
        sb.append("null");
      } else {
        sb.append(this.job);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (job != null) {
        job.validate();
      }
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startCronJob_argsStandardSchemeFactory implements SchemeFactory {
      public startCronJob_argsStandardScheme getScheme() {
        return new startCronJob_argsStandardScheme();
      }
    }

    private static class startCronJob_argsStandardScheme extends StandardScheme<startCronJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startCronJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 4: // JOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.job = new JobKey();
                struct.job.read(iprot);
                struct.setJobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startCronJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.job != null) {
          oprot.writeFieldBegin(JOB_FIELD_DESC);
          struct.job.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startCronJob_argsTupleSchemeFactory implements SchemeFactory {
      public startCronJob_argsTupleScheme getScheme() {
        return new startCronJob_argsTupleScheme();
      }
    }

    private static class startCronJob_argsTupleScheme extends TupleScheme<startCronJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startCronJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJob()) {
          optionals.set(0);
        }
        if (struct.isSetSession()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetJob()) {
          struct.job.write(oprot);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startCronJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.job = new JobKey();
          struct.job.read(iprot);
          struct.setJobIsSet(true);
        }
        if (incoming.get(1)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class startCronJob_result implements org.apache.thrift.TBase<startCronJob_result, startCronJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<startCronJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startCronJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startCronJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startCronJob_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startCronJob_result.class, metaDataMap);
    }

    public startCronJob_result() {
    }

    public startCronJob_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startCronJob_result(startCronJob_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public startCronJob_result deepCopy() {
      return new startCronJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public startCronJob_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startCronJob_result)
        return this.equals((startCronJob_result)that);
      return false;
    }

    public boolean equals(startCronJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(startCronJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startCronJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startCronJob_resultStandardSchemeFactory implements SchemeFactory {
      public startCronJob_resultStandardScheme getScheme() {
        return new startCronJob_resultStandardScheme();
      }
    }

    private static class startCronJob_resultStandardScheme extends StandardScheme<startCronJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startCronJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startCronJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startCronJob_resultTupleSchemeFactory implements SchemeFactory {
      public startCronJob_resultTupleScheme getScheme() {
        return new startCronJob_resultTupleScheme();
      }
    }

    private static class startCronJob_resultTupleScheme extends TupleScheme<startCronJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startCronJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startCronJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class restartShards_args implements org.apache.thrift.TBase<restartShards_args, restartShards_args._Fields>, java.io.Serializable, Cloneable, Comparable<restartShards_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restartShards_args");

    private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField SHARD_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("shardIds", org.apache.thrift.protocol.TType.SET, (short)3);
    private static final org.apache.thrift.protocol.TField LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("lock", org.apache.thrift.protocol.TType.STRUCT, (short)6);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restartShards_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restartShards_argsTupleSchemeFactory());
    }

    private JobKey job; // required
    private Set<Integer> shardIds; // required
    private Lock lock; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB((short)5, "job"),
      SHARD_IDS((short)3, "shardIds"),
      LOCK((short)6, "lock"),
      SESSION((short)4, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 5: // JOB
            return JOB;
          case 3: // SHARD_IDS
            return SHARD_IDS;
          case 6: // LOCK
            return LOCK;
          case 4: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobKey.class)));
      tmpMap.put(_Fields.SHARD_IDS, new org.apache.thrift.meta_data.FieldMetaData("shardIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.LOCK, new org.apache.thrift.meta_data.FieldMetaData("lock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Lock.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restartShards_args.class, metaDataMap);
    }

    public restartShards_args() {
    }

    public restartShards_args(
      JobKey job,
      Set<Integer> shardIds,
      Lock lock,
      SessionKey session)
    {
      this();
      this.job = job;
      this.shardIds = shardIds;
      this.lock = lock;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restartShards_args(restartShards_args other) {
      if (other.isSetJob()) {
        this.job = new JobKey(other.job);
      }
      if (other.isSetShardIds()) {
        Set<Integer> __this__shardIds = new HashSet<Integer>(other.shardIds);
        this.shardIds = __this__shardIds;
      }
      if (other.isSetLock()) {
        this.lock = new Lock(other.lock);
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public restartShards_args deepCopy() {
      return new restartShards_args(this);
    }

    @Override
    public void clear() {
      this.job = null;
      this.shardIds = null;
      this.lock = null;
      this.session = null;
    }

    public JobKey getJob() {
      return this.job;
    }

    public restartShards_args setJob(JobKey job) {
      this.job = job;
      return this;
    }

    public void unsetJob() {
      this.job = null;
    }

    /** Returns true if field job is set (has been assigned a value) and false otherwise */
    public boolean isSetJob() {
      return this.job != null;
    }

    public void setJobIsSet(boolean value) {
      if (!value) {
        this.job = null;
      }
    }

    public int getShardIdsSize() {
      return (this.shardIds == null) ? 0 : this.shardIds.size();
    }

    public java.util.Iterator<Integer> getShardIdsIterator() {
      return (this.shardIds == null) ? null : this.shardIds.iterator();
    }

    public void addToShardIds(int elem) {
      if (this.shardIds == null) {
        this.shardIds = new HashSet<Integer>();
      }
      this.shardIds.add(elem);
    }

    public Set<Integer> getShardIds() {
      return this.shardIds;
    }

    public restartShards_args setShardIds(Set<Integer> shardIds) {
      this.shardIds = shardIds;
      return this;
    }

    public void unsetShardIds() {
      this.shardIds = null;
    }

    /** Returns true if field shardIds is set (has been assigned a value) and false otherwise */
    public boolean isSetShardIds() {
      return this.shardIds != null;
    }

    public void setShardIdsIsSet(boolean value) {
      if (!value) {
        this.shardIds = null;
      }
    }

    public Lock getLock() {
      return this.lock;
    }

    public restartShards_args setLock(Lock lock) {
      this.lock = lock;
      return this;
    }

    public void unsetLock() {
      this.lock = null;
    }

    /** Returns true if field lock is set (has been assigned a value) and false otherwise */
    public boolean isSetLock() {
      return this.lock != null;
    }

    public void setLockIsSet(boolean value) {
      if (!value) {
        this.lock = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public restartShards_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB:
        if (value == null) {
          unsetJob();
        } else {
          setJob((JobKey)value);
        }
        break;

      case SHARD_IDS:
        if (value == null) {
          unsetShardIds();
        } else {
          setShardIds((Set<Integer>)value);
        }
        break;

      case LOCK:
        if (value == null) {
          unsetLock();
        } else {
          setLock((Lock)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB:
        return getJob();

      case SHARD_IDS:
        return getShardIds();

      case LOCK:
        return getLock();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB:
        return isSetJob();
      case SHARD_IDS:
        return isSetShardIds();
      case LOCK:
        return isSetLock();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restartShards_args)
        return this.equals((restartShards_args)that);
      return false;
    }

    public boolean equals(restartShards_args that) {
      if (that == null)
        return false;

      boolean this_present_job = true && this.isSetJob();
      boolean that_present_job = true && that.isSetJob();
      if (this_present_job || that_present_job) {
        if (!(this_present_job && that_present_job))
          return false;
        if (!this.job.equals(that.job))
          return false;
      }

      boolean this_present_shardIds = true && this.isSetShardIds();
      boolean that_present_shardIds = true && that.isSetShardIds();
      if (this_present_shardIds || that_present_shardIds) {
        if (!(this_present_shardIds && that_present_shardIds))
          return false;
        if (!this.shardIds.equals(that.shardIds))
          return false;
      }

      boolean this_present_lock = true && this.isSetLock();
      boolean that_present_lock = true && that.isSetLock();
      if (this_present_lock || that_present_lock) {
        if (!(this_present_lock && that_present_lock))
          return false;
        if (!this.lock.equals(that.lock))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_job = true && (isSetJob());
      builder.append(present_job);
      if (present_job)
        builder.append(job);

      boolean present_shardIds = true && (isSetShardIds());
      builder.append(present_shardIds);
      if (present_shardIds)
        builder.append(shardIds);

      boolean present_lock = true && (isSetLock());
      builder.append(present_lock);
      if (present_lock)
        builder.append(lock);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(restartShards_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJob()).compareTo(other.isSetJob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job, other.job);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetShardIds()).compareTo(other.isSetShardIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShardIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardIds, other.shardIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLock()).compareTo(other.isSetLock());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLock()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lock, other.lock);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restartShards_args(");
      boolean first = true;

      sb.append("job:");
      if (this.job == null) {
        sb.append("null");
      } else {
        sb.append(this.job);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("shardIds:");
      if (this.shardIds == null) {
        sb.append("null");
      } else {
        sb.append(this.shardIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lock:");
      if (this.lock == null) {
        sb.append("null");
      } else {
        sb.append(this.lock);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (job != null) {
        job.validate();
      }
      if (lock != null) {
        lock.validate();
      }
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restartShards_argsStandardSchemeFactory implements SchemeFactory {
      public restartShards_argsStandardScheme getScheme() {
        return new restartShards_argsStandardScheme();
      }
    }

    private static class restartShards_argsStandardScheme extends StandardScheme<restartShards_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restartShards_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 5: // JOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.job = new JobKey();
                struct.job.read(iprot);
                struct.setJobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SHARD_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set326 = iprot.readSetBegin();
                  struct.shardIds = new HashSet<Integer>(2*_set326.size);
                  for (int _i327 = 0; _i327 < _set326.size; ++_i327)
                  {
                    int _elem328;
                    _elem328 = iprot.readI32();
                    struct.shardIds.add(_elem328);
                  }
                  iprot.readSetEnd();
                }
                struct.setShardIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LOCK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lock = new Lock();
                struct.lock.read(iprot);
                struct.setLockIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restartShards_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shardIds != null) {
          oprot.writeFieldBegin(SHARD_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.shardIds.size()));
            for (int _iter329 : struct.shardIds)
            {
              oprot.writeI32(_iter329);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.job != null) {
          oprot.writeFieldBegin(JOB_FIELD_DESC);
          struct.job.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lock != null) {
          oprot.writeFieldBegin(LOCK_FIELD_DESC);
          struct.lock.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restartShards_argsTupleSchemeFactory implements SchemeFactory {
      public restartShards_argsTupleScheme getScheme() {
        return new restartShards_argsTupleScheme();
      }
    }

    private static class restartShards_argsTupleScheme extends TupleScheme<restartShards_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restartShards_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJob()) {
          optionals.set(0);
        }
        if (struct.isSetShardIds()) {
          optionals.set(1);
        }
        if (struct.isSetLock()) {
          optionals.set(2);
        }
        if (struct.isSetSession()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetJob()) {
          struct.job.write(oprot);
        }
        if (struct.isSetShardIds()) {
          {
            oprot.writeI32(struct.shardIds.size());
            for (int _iter330 : struct.shardIds)
            {
              oprot.writeI32(_iter330);
            }
          }
        }
        if (struct.isSetLock()) {
          struct.lock.write(oprot);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restartShards_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.job = new JobKey();
          struct.job.read(iprot);
          struct.setJobIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set331 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.shardIds = new HashSet<Integer>(2*_set331.size);
            for (int _i332 = 0; _i332 < _set331.size; ++_i332)
            {
              int _elem333;
              _elem333 = iprot.readI32();
              struct.shardIds.add(_elem333);
            }
          }
          struct.setShardIdsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lock = new Lock();
          struct.lock.read(iprot);
          struct.setLockIsSet(true);
        }
        if (incoming.get(3)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class restartShards_result implements org.apache.thrift.TBase<restartShards_result, restartShards_result._Fields>, java.io.Serializable, Cloneable, Comparable<restartShards_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restartShards_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restartShards_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restartShards_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restartShards_result.class, metaDataMap);
    }

    public restartShards_result() {
    }

    public restartShards_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restartShards_result(restartShards_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public restartShards_result deepCopy() {
      return new restartShards_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public restartShards_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restartShards_result)
        return this.equals((restartShards_result)that);
      return false;
    }

    public boolean equals(restartShards_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(restartShards_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restartShards_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restartShards_resultStandardSchemeFactory implements SchemeFactory {
      public restartShards_resultStandardScheme getScheme() {
        return new restartShards_resultStandardScheme();
      }
    }

    private static class restartShards_resultStandardScheme extends StandardScheme<restartShards_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restartShards_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restartShards_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restartShards_resultTupleSchemeFactory implements SchemeFactory {
      public restartShards_resultTupleScheme getScheme() {
        return new restartShards_resultTupleScheme();
      }
    }

    private static class restartShards_resultTupleScheme extends TupleScheme<restartShards_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restartShards_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restartShards_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class killTasks_args implements org.apache.thrift.TBase<killTasks_args, killTasks_args._Fields>, java.io.Serializable, Cloneable, Comparable<killTasks_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("killTasks_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("lock", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new killTasks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new killTasks_argsTupleSchemeFactory());
    }

    private TaskQuery query; // required
    private Lock lock; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      LOCK((short)3, "lock"),
      SESSION((short)2, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 3: // LOCK
            return LOCK;
          case 2: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskQuery.class)));
      tmpMap.put(_Fields.LOCK, new org.apache.thrift.meta_data.FieldMetaData("lock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Lock.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(killTasks_args.class, metaDataMap);
    }

    public killTasks_args() {
    }

    public killTasks_args(
      TaskQuery query,
      Lock lock,
      SessionKey session)
    {
      this();
      this.query = query;
      this.lock = lock;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public killTasks_args(killTasks_args other) {
      if (other.isSetQuery()) {
        this.query = new TaskQuery(other.query);
      }
      if (other.isSetLock()) {
        this.lock = new Lock(other.lock);
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public killTasks_args deepCopy() {
      return new killTasks_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.lock = null;
      this.session = null;
    }

    public TaskQuery getQuery() {
      return this.query;
    }

    public killTasks_args setQuery(TaskQuery query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public Lock getLock() {
      return this.lock;
    }

    public killTasks_args setLock(Lock lock) {
      this.lock = lock;
      return this;
    }

    public void unsetLock() {
      this.lock = null;
    }

    /** Returns true if field lock is set (has been assigned a value) and false otherwise */
    public boolean isSetLock() {
      return this.lock != null;
    }

    public void setLockIsSet(boolean value) {
      if (!value) {
        this.lock = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public killTasks_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((TaskQuery)value);
        }
        break;

      case LOCK:
        if (value == null) {
          unsetLock();
        } else {
          setLock((Lock)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case LOCK:
        return getLock();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case LOCK:
        return isSetLock();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof killTasks_args)
        return this.equals((killTasks_args)that);
      return false;
    }

    public boolean equals(killTasks_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_lock = true && this.isSetLock();
      boolean that_present_lock = true && that.isSetLock();
      if (this_present_lock || that_present_lock) {
        if (!(this_present_lock && that_present_lock))
          return false;
        if (!this.lock.equals(that.lock))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_query = true && (isSetQuery());
      builder.append(present_query);
      if (present_query)
        builder.append(query);

      boolean present_lock = true && (isSetLock());
      builder.append(present_lock);
      if (present_lock)
        builder.append(lock);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(killTasks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLock()).compareTo(other.isSetLock());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLock()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lock, other.lock);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("killTasks_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lock:");
      if (this.lock == null) {
        sb.append("null");
      } else {
        sb.append(this.lock);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
      if (lock != null) {
        lock.validate();
      }
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class killTasks_argsStandardSchemeFactory implements SchemeFactory {
      public killTasks_argsStandardScheme getScheme() {
        return new killTasks_argsStandardScheme();
      }
    }

    private static class killTasks_argsStandardScheme extends StandardScheme<killTasks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, killTasks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new TaskQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LOCK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lock = new Lock();
                struct.lock.read(iprot);
                struct.setLockIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, killTasks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lock != null) {
          oprot.writeFieldBegin(LOCK_FIELD_DESC);
          struct.lock.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class killTasks_argsTupleSchemeFactory implements SchemeFactory {
      public killTasks_argsTupleScheme getScheme() {
        return new killTasks_argsTupleScheme();
      }
    }

    private static class killTasks_argsTupleScheme extends TupleScheme<killTasks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, killTasks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetLock()) {
          optionals.set(1);
        }
        if (struct.isSetSession()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetLock()) {
          struct.lock.write(oprot);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, killTasks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.query = new TaskQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lock = new Lock();
          struct.lock.read(iprot);
          struct.setLockIsSet(true);
        }
        if (incoming.get(2)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class killTasks_result implements org.apache.thrift.TBase<killTasks_result, killTasks_result._Fields>, java.io.Serializable, Cloneable, Comparable<killTasks_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("killTasks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new killTasks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new killTasks_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(killTasks_result.class, metaDataMap);
    }

    public killTasks_result() {
    }

    public killTasks_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public killTasks_result(killTasks_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public killTasks_result deepCopy() {
      return new killTasks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public killTasks_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof killTasks_result)
        return this.equals((killTasks_result)that);
      return false;
    }

    public boolean equals(killTasks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(killTasks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("killTasks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class killTasks_resultStandardSchemeFactory implements SchemeFactory {
      public killTasks_resultStandardScheme getScheme() {
        return new killTasks_resultStandardScheme();
      }
    }

    private static class killTasks_resultStandardScheme extends StandardScheme<killTasks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, killTasks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, killTasks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class killTasks_resultTupleSchemeFactory implements SchemeFactory {
      public killTasks_resultTupleScheme getScheme() {
        return new killTasks_resultTupleScheme();
      }
    }

    private static class killTasks_resultTupleScheme extends TupleScheme<killTasks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, killTasks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, killTasks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addInstances_args implements org.apache.thrift.TBase<addInstances_args, addInstances_args._Fields>, java.io.Serializable, Cloneable, Comparable<addInstances_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addInstances_args");

    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("lock", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addInstances_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addInstances_argsTupleSchemeFactory());
    }

    private AddInstancesConfig config; // required
    private Lock lock; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG((short)1, "config"),
      LOCK((short)2, "lock"),
      SESSION((short)3, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG
            return CONFIG;
          case 2: // LOCK
            return LOCK;
          case 3: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AddInstancesConfig.class)));
      tmpMap.put(_Fields.LOCK, new org.apache.thrift.meta_data.FieldMetaData("lock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Lock.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addInstances_args.class, metaDataMap);
    }

    public addInstances_args() {
    }

    public addInstances_args(
      AddInstancesConfig config,
      Lock lock,
      SessionKey session)
    {
      this();
      this.config = config;
      this.lock = lock;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addInstances_args(addInstances_args other) {
      if (other.isSetConfig()) {
        this.config = new AddInstancesConfig(other.config);
      }
      if (other.isSetLock()) {
        this.lock = new Lock(other.lock);
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public addInstances_args deepCopy() {
      return new addInstances_args(this);
    }

    @Override
    public void clear() {
      this.config = null;
      this.lock = null;
      this.session = null;
    }

    public AddInstancesConfig getConfig() {
      return this.config;
    }

    public addInstances_args setConfig(AddInstancesConfig config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public Lock getLock() {
      return this.lock;
    }

    public addInstances_args setLock(Lock lock) {
      this.lock = lock;
      return this;
    }

    public void unsetLock() {
      this.lock = null;
    }

    /** Returns true if field lock is set (has been assigned a value) and false otherwise */
    public boolean isSetLock() {
      return this.lock != null;
    }

    public void setLockIsSet(boolean value) {
      if (!value) {
        this.lock = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public addInstances_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((AddInstancesConfig)value);
        }
        break;

      case LOCK:
        if (value == null) {
          unsetLock();
        } else {
          setLock((Lock)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG:
        return getConfig();

      case LOCK:
        return getLock();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG:
        return isSetConfig();
      case LOCK:
        return isSetLock();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addInstances_args)
        return this.equals((addInstances_args)that);
      return false;
    }

    public boolean equals(addInstances_args that) {
      if (that == null)
        return false;

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      boolean this_present_lock = true && this.isSetLock();
      boolean that_present_lock = true && that.isSetLock();
      if (this_present_lock || that_present_lock) {
        if (!(this_present_lock && that_present_lock))
          return false;
        if (!this.lock.equals(that.lock))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_config = true && (isSetConfig());
      builder.append(present_config);
      if (present_config)
        builder.append(config);

      boolean present_lock = true && (isSetLock());
      builder.append(present_lock);
      if (present_lock)
        builder.append(lock);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addInstances_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLock()).compareTo(other.isSetLock());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLock()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lock, other.lock);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addInstances_args(");
      boolean first = true;

      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lock:");
      if (this.lock == null) {
        sb.append("null");
      } else {
        sb.append(this.lock);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (config != null) {
        config.validate();
      }
      if (lock != null) {
        lock.validate();
      }
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addInstances_argsStandardSchemeFactory implements SchemeFactory {
      public addInstances_argsStandardScheme getScheme() {
        return new addInstances_argsStandardScheme();
      }
    }

    private static class addInstances_argsStandardScheme extends StandardScheme<addInstances_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addInstances_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.config = new AddInstancesConfig();
                struct.config.read(iprot);
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lock = new Lock();
                struct.lock.read(iprot);
                struct.setLockIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addInstances_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lock != null) {
          oprot.writeFieldBegin(LOCK_FIELD_DESC);
          struct.lock.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addInstances_argsTupleSchemeFactory implements SchemeFactory {
      public addInstances_argsTupleScheme getScheme() {
        return new addInstances_argsTupleScheme();
      }
    }

    private static class addInstances_argsTupleScheme extends TupleScheme<addInstances_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addInstances_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfig()) {
          optionals.set(0);
        }
        if (struct.isSetLock()) {
          optionals.set(1);
        }
        if (struct.isSetSession()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetConfig()) {
          struct.config.write(oprot);
        }
        if (struct.isSetLock()) {
          struct.lock.write(oprot);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addInstances_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.config = new AddInstancesConfig();
          struct.config.read(iprot);
          struct.setConfigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lock = new Lock();
          struct.lock.read(iprot);
          struct.setLockIsSet(true);
        }
        if (incoming.get(2)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class addInstances_result implements org.apache.thrift.TBase<addInstances_result, addInstances_result._Fields>, java.io.Serializable, Cloneable, Comparable<addInstances_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addInstances_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addInstances_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addInstances_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addInstances_result.class, metaDataMap);
    }

    public addInstances_result() {
    }

    public addInstances_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addInstances_result(addInstances_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public addInstances_result deepCopy() {
      return new addInstances_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public addInstances_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addInstances_result)
        return this.equals((addInstances_result)that);
      return false;
    }

    public boolean equals(addInstances_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(addInstances_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addInstances_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addInstances_resultStandardSchemeFactory implements SchemeFactory {
      public addInstances_resultStandardScheme getScheme() {
        return new addInstances_resultStandardScheme();
      }
    }

    private static class addInstances_resultStandardScheme extends StandardScheme<addInstances_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addInstances_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addInstances_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addInstances_resultTupleSchemeFactory implements SchemeFactory {
      public addInstances_resultTupleScheme getScheme() {
        return new addInstances_resultTupleScheme();
      }
    }

    private static class addInstances_resultTupleScheme extends TupleScheme<addInstances_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addInstances_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addInstances_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class acquireLock_args implements org.apache.thrift.TBase<acquireLock_args, acquireLock_args._Fields>, java.io.Serializable, Cloneable, Comparable<acquireLock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acquireLock_args");

    private static final org.apache.thrift.protocol.TField LOCK_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("lockKey", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acquireLock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new acquireLock_argsTupleSchemeFactory());
    }

    private LockKey lockKey; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCK_KEY((short)1, "lockKey"),
      SESSION((short)2, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCK_KEY
            return LOCK_KEY;
          case 2: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCK_KEY, new org.apache.thrift.meta_data.FieldMetaData("lockKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LockKey.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acquireLock_args.class, metaDataMap);
    }

    public acquireLock_args() {
    }

    public acquireLock_args(
      LockKey lockKey,
      SessionKey session)
    {
      this();
      this.lockKey = lockKey;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireLock_args(acquireLock_args other) {
      if (other.isSetLockKey()) {
        this.lockKey = new LockKey(other.lockKey);
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public acquireLock_args deepCopy() {
      return new acquireLock_args(this);
    }

    @Override
    public void clear() {
      this.lockKey = null;
      this.session = null;
    }

    public LockKey getLockKey() {
      return this.lockKey;
    }

    public acquireLock_args setLockKey(LockKey lockKey) {
      this.lockKey = lockKey;
      return this;
    }

    public void unsetLockKey() {
      this.lockKey = null;
    }

    /** Returns true if field lockKey is set (has been assigned a value) and false otherwise */
    public boolean isSetLockKey() {
      return this.lockKey != null;
    }

    public void setLockKeyIsSet(boolean value) {
      if (!value) {
        this.lockKey = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public acquireLock_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOCK_KEY:
        if (value == null) {
          unsetLockKey();
        } else {
          setLockKey((LockKey)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCK_KEY:
        return getLockKey();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOCK_KEY:
        return isSetLockKey();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireLock_args)
        return this.equals((acquireLock_args)that);
      return false;
    }

    public boolean equals(acquireLock_args that) {
      if (that == null)
        return false;

      boolean this_present_lockKey = true && this.isSetLockKey();
      boolean that_present_lockKey = true && that.isSetLockKey();
      if (this_present_lockKey || that_present_lockKey) {
        if (!(this_present_lockKey && that_present_lockKey))
          return false;
        if (!this.lockKey.equals(that.lockKey))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_lockKey = true && (isSetLockKey());
      builder.append(present_lockKey);
      if (present_lockKey)
        builder.append(lockKey);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(acquireLock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLockKey()).compareTo(other.isSetLockKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLockKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockKey, other.lockKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acquireLock_args(");
      boolean first = true;

      sb.append("lockKey:");
      if (this.lockKey == null) {
        sb.append("null");
      } else {
        sb.append(this.lockKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class acquireLock_argsStandardSchemeFactory implements SchemeFactory {
      public acquireLock_argsStandardScheme getScheme() {
        return new acquireLock_argsStandardScheme();
      }
    }

    private static class acquireLock_argsStandardScheme extends StandardScheme<acquireLock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acquireLock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCK_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lockKey = new LockKey();
                struct.lockKey.read(iprot);
                struct.setLockKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acquireLock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lockKey != null) {
          oprot.writeFieldBegin(LOCK_KEY_FIELD_DESC);
          struct.lockKey.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class acquireLock_argsTupleSchemeFactory implements SchemeFactory {
      public acquireLock_argsTupleScheme getScheme() {
        return new acquireLock_argsTupleScheme();
      }
    }

    private static class acquireLock_argsTupleScheme extends TupleScheme<acquireLock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, acquireLock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLockKey()) {
          optionals.set(0);
        }
        if (struct.isSetSession()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLockKey()) {
          struct.lockKey.write(oprot);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, acquireLock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.lockKey = new LockKey();
          struct.lockKey.read(iprot);
          struct.setLockKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class acquireLock_result implements org.apache.thrift.TBase<acquireLock_result, acquireLock_result._Fields>, java.io.Serializable, Cloneable, Comparable<acquireLock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acquireLock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new acquireLock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new acquireLock_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acquireLock_result.class, metaDataMap);
    }

    public acquireLock_result() {
    }

    public acquireLock_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireLock_result(acquireLock_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public acquireLock_result deepCopy() {
      return new acquireLock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public acquireLock_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireLock_result)
        return this.equals((acquireLock_result)that);
      return false;
    }

    public boolean equals(acquireLock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(acquireLock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("acquireLock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class acquireLock_resultStandardSchemeFactory implements SchemeFactory {
      public acquireLock_resultStandardScheme getScheme() {
        return new acquireLock_resultStandardScheme();
      }
    }

    private static class acquireLock_resultStandardScheme extends StandardScheme<acquireLock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, acquireLock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, acquireLock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class acquireLock_resultTupleSchemeFactory implements SchemeFactory {
      public acquireLock_resultTupleScheme getScheme() {
        return new acquireLock_resultTupleScheme();
      }
    }

    private static class acquireLock_resultTupleScheme extends TupleScheme<acquireLock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, acquireLock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, acquireLock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class releaseLock_args implements org.apache.thrift.TBase<releaseLock_args, releaseLock_args._Fields>, java.io.Serializable, Cloneable, Comparable<releaseLock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("releaseLock_args");

    private static final org.apache.thrift.protocol.TField LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("lock", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VALIDATION_FIELD_DESC = new org.apache.thrift.protocol.TField("validation", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new releaseLock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new releaseLock_argsTupleSchemeFactory());
    }

    private Lock lock; // required
    private LockValidation validation; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCK((short)1, "lock"),
      /**
       * 
       * @see LockValidation
       */
      VALIDATION((short)2, "validation"),
      SESSION((short)3, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCK
            return LOCK;
          case 2: // VALIDATION
            return VALIDATION;
          case 3: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCK, new org.apache.thrift.meta_data.FieldMetaData("lock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Lock.class)));
      tmpMap.put(_Fields.VALIDATION, new org.apache.thrift.meta_data.FieldMetaData("validation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LockValidation.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(releaseLock_args.class, metaDataMap);
    }

    public releaseLock_args() {
    }

    public releaseLock_args(
      Lock lock,
      LockValidation validation,
      SessionKey session)
    {
      this();
      this.lock = lock;
      this.validation = validation;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseLock_args(releaseLock_args other) {
      if (other.isSetLock()) {
        this.lock = new Lock(other.lock);
      }
      if (other.isSetValidation()) {
        this.validation = other.validation;
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public releaseLock_args deepCopy() {
      return new releaseLock_args(this);
    }

    @Override
    public void clear() {
      this.lock = null;
      this.validation = null;
      this.session = null;
    }

    public Lock getLock() {
      return this.lock;
    }

    public releaseLock_args setLock(Lock lock) {
      this.lock = lock;
      return this;
    }

    public void unsetLock() {
      this.lock = null;
    }

    /** Returns true if field lock is set (has been assigned a value) and false otherwise */
    public boolean isSetLock() {
      return this.lock != null;
    }

    public void setLockIsSet(boolean value) {
      if (!value) {
        this.lock = null;
      }
    }

    /**
     * 
     * @see LockValidation
     */
    public LockValidation getValidation() {
      return this.validation;
    }

    /**
     * 
     * @see LockValidation
     */
    public releaseLock_args setValidation(LockValidation validation) {
      this.validation = validation;
      return this;
    }

    public void unsetValidation() {
      this.validation = null;
    }

    /** Returns true if field validation is set (has been assigned a value) and false otherwise */
    public boolean isSetValidation() {
      return this.validation != null;
    }

    public void setValidationIsSet(boolean value) {
      if (!value) {
        this.validation = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public releaseLock_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOCK:
        if (value == null) {
          unsetLock();
        } else {
          setLock((Lock)value);
        }
        break;

      case VALIDATION:
        if (value == null) {
          unsetValidation();
        } else {
          setValidation((LockValidation)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCK:
        return getLock();

      case VALIDATION:
        return getValidation();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOCK:
        return isSetLock();
      case VALIDATION:
        return isSetValidation();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseLock_args)
        return this.equals((releaseLock_args)that);
      return false;
    }

    public boolean equals(releaseLock_args that) {
      if (that == null)
        return false;

      boolean this_present_lock = true && this.isSetLock();
      boolean that_present_lock = true && that.isSetLock();
      if (this_present_lock || that_present_lock) {
        if (!(this_present_lock && that_present_lock))
          return false;
        if (!this.lock.equals(that.lock))
          return false;
      }

      boolean this_present_validation = true && this.isSetValidation();
      boolean that_present_validation = true && that.isSetValidation();
      if (this_present_validation || that_present_validation) {
        if (!(this_present_validation && that_present_validation))
          return false;
        if (!this.validation.equals(that.validation))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_lock = true && (isSetLock());
      builder.append(present_lock);
      if (present_lock)
        builder.append(lock);

      boolean present_validation = true && (isSetValidation());
      builder.append(present_validation);
      if (present_validation)
        builder.append(validation.getValue());

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(releaseLock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLock()).compareTo(other.isSetLock());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLock()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lock, other.lock);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValidation()).compareTo(other.isSetValidation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validation, other.validation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseLock_args(");
      boolean first = true;

      sb.append("lock:");
      if (this.lock == null) {
        sb.append("null");
      } else {
        sb.append(this.lock);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("validation:");
      if (this.validation == null) {
        sb.append("null");
      } else {
        sb.append(this.validation);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lock != null) {
        lock.validate();
      }
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseLock_argsStandardSchemeFactory implements SchemeFactory {
      public releaseLock_argsStandardScheme getScheme() {
        return new releaseLock_argsStandardScheme();
      }
    }

    private static class releaseLock_argsStandardScheme extends StandardScheme<releaseLock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, releaseLock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lock = new Lock();
                struct.lock.read(iprot);
                struct.setLockIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VALIDATION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.validation = LockValidation.findByValue(iprot.readI32());
                struct.setValidationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, releaseLock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lock != null) {
          oprot.writeFieldBegin(LOCK_FIELD_DESC);
          struct.lock.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.validation != null) {
          oprot.writeFieldBegin(VALIDATION_FIELD_DESC);
          oprot.writeI32(struct.validation.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class releaseLock_argsTupleSchemeFactory implements SchemeFactory {
      public releaseLock_argsTupleScheme getScheme() {
        return new releaseLock_argsTupleScheme();
      }
    }

    private static class releaseLock_argsTupleScheme extends TupleScheme<releaseLock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, releaseLock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLock()) {
          optionals.set(0);
        }
        if (struct.isSetValidation()) {
          optionals.set(1);
        }
        if (struct.isSetSession()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLock()) {
          struct.lock.write(oprot);
        }
        if (struct.isSetValidation()) {
          oprot.writeI32(struct.validation.getValue());
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, releaseLock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lock = new Lock();
          struct.lock.read(iprot);
          struct.setLockIsSet(true);
        }
        if (incoming.get(1)) {
          struct.validation = LockValidation.findByValue(iprot.readI32());
          struct.setValidationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class releaseLock_result implements org.apache.thrift.TBase<releaseLock_result, releaseLock_result._Fields>, java.io.Serializable, Cloneable, Comparable<releaseLock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("releaseLock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new releaseLock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new releaseLock_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(releaseLock_result.class, metaDataMap);
    }

    public releaseLock_result() {
    }

    public releaseLock_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseLock_result(releaseLock_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public releaseLock_result deepCopy() {
      return new releaseLock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public releaseLock_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseLock_result)
        return this.equals((releaseLock_result)that);
      return false;
    }

    public boolean equals(releaseLock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(releaseLock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseLock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseLock_resultStandardSchemeFactory implements SchemeFactory {
      public releaseLock_resultStandardScheme getScheme() {
        return new releaseLock_resultStandardScheme();
      }
    }

    private static class releaseLock_resultStandardScheme extends StandardScheme<releaseLock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, releaseLock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, releaseLock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class releaseLock_resultTupleSchemeFactory implements SchemeFactory {
      public releaseLock_resultTupleScheme getScheme() {
        return new releaseLock_resultTupleScheme();
      }
    }

    private static class releaseLock_resultTupleScheme extends TupleScheme<releaseLock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, releaseLock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, releaseLock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class replaceCronTemplate_args implements org.apache.thrift.TBase<replaceCronTemplate_args, replaceCronTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<replaceCronTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replaceCronTemplate_args");

    private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("lock", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replaceCronTemplate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replaceCronTemplate_argsTupleSchemeFactory());
    }

    private JobConfiguration config; // required
    private Lock lock; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIG((short)1, "config"),
      LOCK((short)2, "lock"),
      SESSION((short)3, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIG
            return CONFIG;
          case 2: // LOCK
            return LOCK;
          case 3: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobConfiguration.class)));
      tmpMap.put(_Fields.LOCK, new org.apache.thrift.meta_data.FieldMetaData("lock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Lock.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replaceCronTemplate_args.class, metaDataMap);
    }

    public replaceCronTemplate_args() {
    }

    public replaceCronTemplate_args(
      JobConfiguration config,
      Lock lock,
      SessionKey session)
    {
      this();
      this.config = config;
      this.lock = lock;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replaceCronTemplate_args(replaceCronTemplate_args other) {
      if (other.isSetConfig()) {
        this.config = new JobConfiguration(other.config);
      }
      if (other.isSetLock()) {
        this.lock = new Lock(other.lock);
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public replaceCronTemplate_args deepCopy() {
      return new replaceCronTemplate_args(this);
    }

    @Override
    public void clear() {
      this.config = null;
      this.lock = null;
      this.session = null;
    }

    public JobConfiguration getConfig() {
      return this.config;
    }

    public replaceCronTemplate_args setConfig(JobConfiguration config) {
      this.config = config;
      return this;
    }

    public void unsetConfig() {
      this.config = null;
    }

    /** Returns true if field config is set (has been assigned a value) and false otherwise */
    public boolean isSetConfig() {
      return this.config != null;
    }

    public void setConfigIsSet(boolean value) {
      if (!value) {
        this.config = null;
      }
    }

    public Lock getLock() {
      return this.lock;
    }

    public replaceCronTemplate_args setLock(Lock lock) {
      this.lock = lock;
      return this;
    }

    public void unsetLock() {
      this.lock = null;
    }

    /** Returns true if field lock is set (has been assigned a value) and false otherwise */
    public boolean isSetLock() {
      return this.lock != null;
    }

    public void setLockIsSet(boolean value) {
      if (!value) {
        this.lock = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public replaceCronTemplate_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIG:
        if (value == null) {
          unsetConfig();
        } else {
          setConfig((JobConfiguration)value);
        }
        break;

      case LOCK:
        if (value == null) {
          unsetLock();
        } else {
          setLock((Lock)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIG:
        return getConfig();

      case LOCK:
        return getLock();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIG:
        return isSetConfig();
      case LOCK:
        return isSetLock();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replaceCronTemplate_args)
        return this.equals((replaceCronTemplate_args)that);
      return false;
    }

    public boolean equals(replaceCronTemplate_args that) {
      if (that == null)
        return false;

      boolean this_present_config = true && this.isSetConfig();
      boolean that_present_config = true && that.isSetConfig();
      if (this_present_config || that_present_config) {
        if (!(this_present_config && that_present_config))
          return false;
        if (!this.config.equals(that.config))
          return false;
      }

      boolean this_present_lock = true && this.isSetLock();
      boolean that_present_lock = true && that.isSetLock();
      if (this_present_lock || that_present_lock) {
        if (!(this_present_lock && that_present_lock))
          return false;
        if (!this.lock.equals(that.lock))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_config = true && (isSetConfig());
      builder.append(present_config);
      if (present_config)
        builder.append(config);

      boolean present_lock = true && (isSetLock());
      builder.append(present_lock);
      if (present_lock)
        builder.append(lock);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(replaceCronTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLock()).compareTo(other.isSetLock());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLock()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lock, other.lock);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replaceCronTemplate_args(");
      boolean first = true;

      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lock:");
      if (this.lock == null) {
        sb.append("null");
      } else {
        sb.append(this.lock);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (config != null) {
        config.validate();
      }
      if (lock != null) {
        lock.validate();
      }
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replaceCronTemplate_argsStandardSchemeFactory implements SchemeFactory {
      public replaceCronTemplate_argsStandardScheme getScheme() {
        return new replaceCronTemplate_argsStandardScheme();
      }
    }

    private static class replaceCronTemplate_argsStandardScheme extends StandardScheme<replaceCronTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replaceCronTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.config = new JobConfiguration();
                struct.config.read(iprot);
                struct.setConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lock = new Lock();
                struct.lock.read(iprot);
                struct.setLockIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replaceCronTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.config != null) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lock != null) {
          oprot.writeFieldBegin(LOCK_FIELD_DESC);
          struct.lock.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replaceCronTemplate_argsTupleSchemeFactory implements SchemeFactory {
      public replaceCronTemplate_argsTupleScheme getScheme() {
        return new replaceCronTemplate_argsTupleScheme();
      }
    }

    private static class replaceCronTemplate_argsTupleScheme extends TupleScheme<replaceCronTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replaceCronTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfig()) {
          optionals.set(0);
        }
        if (struct.isSetLock()) {
          optionals.set(1);
        }
        if (struct.isSetSession()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetConfig()) {
          struct.config.write(oprot);
        }
        if (struct.isSetLock()) {
          struct.lock.write(oprot);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replaceCronTemplate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.config = new JobConfiguration();
          struct.config.read(iprot);
          struct.setConfigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lock = new Lock();
          struct.lock.read(iprot);
          struct.setLockIsSet(true);
        }
        if (incoming.get(2)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class replaceCronTemplate_result implements org.apache.thrift.TBase<replaceCronTemplate_result, replaceCronTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<replaceCronTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replaceCronTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replaceCronTemplate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replaceCronTemplate_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replaceCronTemplate_result.class, metaDataMap);
    }

    public replaceCronTemplate_result() {
    }

    public replaceCronTemplate_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replaceCronTemplate_result(replaceCronTemplate_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public replaceCronTemplate_result deepCopy() {
      return new replaceCronTemplate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public replaceCronTemplate_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replaceCronTemplate_result)
        return this.equals((replaceCronTemplate_result)that);
      return false;
    }

    public boolean equals(replaceCronTemplate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(replaceCronTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replaceCronTemplate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replaceCronTemplate_resultStandardSchemeFactory implements SchemeFactory {
      public replaceCronTemplate_resultStandardScheme getScheme() {
        return new replaceCronTemplate_resultStandardScheme();
      }
    }

    private static class replaceCronTemplate_resultStandardScheme extends StandardScheme<replaceCronTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replaceCronTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replaceCronTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replaceCronTemplate_resultTupleSchemeFactory implements SchemeFactory {
      public replaceCronTemplate_resultTupleScheme getScheme() {
        return new replaceCronTemplate_resultTupleScheme();
      }
    }

    private static class replaceCronTemplate_resultTupleScheme extends TupleScheme<replaceCronTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replaceCronTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replaceCronTemplate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class startJobUpdate_args implements org.apache.thrift.TBase<startJobUpdate_args, startJobUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<startJobUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startJobUpdate_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startJobUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startJobUpdate_argsTupleSchemeFactory());
    }

    private JobUpdateRequest request; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request"),
      SESSION((short)2, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          case 2: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobUpdateRequest.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startJobUpdate_args.class, metaDataMap);
    }

    public startJobUpdate_args() {
    }

    public startJobUpdate_args(
      JobUpdateRequest request,
      SessionKey session)
    {
      this();
      this.request = request;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startJobUpdate_args(startJobUpdate_args other) {
      if (other.isSetRequest()) {
        this.request = new JobUpdateRequest(other.request);
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public startJobUpdate_args deepCopy() {
      return new startJobUpdate_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.session = null;
    }

    public JobUpdateRequest getRequest() {
      return this.request;
    }

    public startJobUpdate_args setRequest(JobUpdateRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public startJobUpdate_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((JobUpdateRequest)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startJobUpdate_args)
        return this.equals((startJobUpdate_args)that);
      return false;
    }

    public boolean equals(startJobUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_request = true && (isSetRequest());
      builder.append(present_request);
      if (present_request)
        builder.append(request);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(startJobUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startJobUpdate_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startJobUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public startJobUpdate_argsStandardScheme getScheme() {
        return new startJobUpdate_argsStandardScheme();
      }
    }

    private static class startJobUpdate_argsStandardScheme extends StandardScheme<startJobUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startJobUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new JobUpdateRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startJobUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startJobUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public startJobUpdate_argsTupleScheme getScheme() {
        return new startJobUpdate_argsTupleScheme();
      }
    }

    private static class startJobUpdate_argsTupleScheme extends TupleScheme<startJobUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startJobUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetSession()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startJobUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.request = new JobUpdateRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class startJobUpdate_result implements org.apache.thrift.TBase<startJobUpdate_result, startJobUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<startJobUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startJobUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startJobUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startJobUpdate_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startJobUpdate_result.class, metaDataMap);
    }

    public startJobUpdate_result() {
    }

    public startJobUpdate_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startJobUpdate_result(startJobUpdate_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public startJobUpdate_result deepCopy() {
      return new startJobUpdate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public startJobUpdate_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startJobUpdate_result)
        return this.equals((startJobUpdate_result)that);
      return false;
    }

    public boolean equals(startJobUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(startJobUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startJobUpdate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startJobUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public startJobUpdate_resultStandardScheme getScheme() {
        return new startJobUpdate_resultStandardScheme();
      }
    }

    private static class startJobUpdate_resultStandardScheme extends StandardScheme<startJobUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startJobUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startJobUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startJobUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public startJobUpdate_resultTupleScheme getScheme() {
        return new startJobUpdate_resultTupleScheme();
      }
    }

    private static class startJobUpdate_resultTupleScheme extends TupleScheme<startJobUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startJobUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startJobUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pauseJobUpdate_args implements org.apache.thrift.TBase<pauseJobUpdate_args, pauseJobUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<pauseJobUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pauseJobUpdate_args");

    private static final org.apache.thrift.protocol.TField JOB_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("jobKey", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pauseJobUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pauseJobUpdate_argsTupleSchemeFactory());
    }

    private JobKey jobKey; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_KEY((short)1, "jobKey"),
      SESSION((short)2, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_KEY
            return JOB_KEY;
          case 2: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_KEY, new org.apache.thrift.meta_data.FieldMetaData("jobKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobKey.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pauseJobUpdate_args.class, metaDataMap);
    }

    public pauseJobUpdate_args() {
    }

    public pauseJobUpdate_args(
      JobKey jobKey,
      SessionKey session)
    {
      this();
      this.jobKey = jobKey;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pauseJobUpdate_args(pauseJobUpdate_args other) {
      if (other.isSetJobKey()) {
        this.jobKey = new JobKey(other.jobKey);
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public pauseJobUpdate_args deepCopy() {
      return new pauseJobUpdate_args(this);
    }

    @Override
    public void clear() {
      this.jobKey = null;
      this.session = null;
    }

    public JobKey getJobKey() {
      return this.jobKey;
    }

    public pauseJobUpdate_args setJobKey(JobKey jobKey) {
      this.jobKey = jobKey;
      return this;
    }

    public void unsetJobKey() {
      this.jobKey = null;
    }

    /** Returns true if field jobKey is set (has been assigned a value) and false otherwise */
    public boolean isSetJobKey() {
      return this.jobKey != null;
    }

    public void setJobKeyIsSet(boolean value) {
      if (!value) {
        this.jobKey = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public pauseJobUpdate_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_KEY:
        if (value == null) {
          unsetJobKey();
        } else {
          setJobKey((JobKey)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_KEY:
        return getJobKey();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_KEY:
        return isSetJobKey();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pauseJobUpdate_args)
        return this.equals((pauseJobUpdate_args)that);
      return false;
    }

    public boolean equals(pauseJobUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_jobKey = true && this.isSetJobKey();
      boolean that_present_jobKey = true && that.isSetJobKey();
      if (this_present_jobKey || that_present_jobKey) {
        if (!(this_present_jobKey && that_present_jobKey))
          return false;
        if (!this.jobKey.equals(that.jobKey))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_jobKey = true && (isSetJobKey());
      builder.append(present_jobKey);
      if (present_jobKey)
        builder.append(jobKey);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(pauseJobUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobKey()).compareTo(other.isSetJobKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobKey, other.jobKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pauseJobUpdate_args(");
      boolean first = true;

      sb.append("jobKey:");
      if (this.jobKey == null) {
        sb.append("null");
      } else {
        sb.append(this.jobKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (jobKey != null) {
        jobKey.validate();
      }
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pauseJobUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public pauseJobUpdate_argsStandardScheme getScheme() {
        return new pauseJobUpdate_argsStandardScheme();
      }
    }

    private static class pauseJobUpdate_argsStandardScheme extends StandardScheme<pauseJobUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pauseJobUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jobKey = new JobKey();
                struct.jobKey.read(iprot);
                struct.setJobKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pauseJobUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobKey != null) {
          oprot.writeFieldBegin(JOB_KEY_FIELD_DESC);
          struct.jobKey.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pauseJobUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public pauseJobUpdate_argsTupleScheme getScheme() {
        return new pauseJobUpdate_argsTupleScheme();
      }
    }

    private static class pauseJobUpdate_argsTupleScheme extends TupleScheme<pauseJobUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pauseJobUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobKey()) {
          optionals.set(0);
        }
        if (struct.isSetSession()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetJobKey()) {
          struct.jobKey.write(oprot);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pauseJobUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.jobKey = new JobKey();
          struct.jobKey.read(iprot);
          struct.setJobKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class pauseJobUpdate_result implements org.apache.thrift.TBase<pauseJobUpdate_result, pauseJobUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<pauseJobUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pauseJobUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pauseJobUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pauseJobUpdate_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pauseJobUpdate_result.class, metaDataMap);
    }

    public pauseJobUpdate_result() {
    }

    public pauseJobUpdate_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pauseJobUpdate_result(pauseJobUpdate_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public pauseJobUpdate_result deepCopy() {
      return new pauseJobUpdate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public pauseJobUpdate_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pauseJobUpdate_result)
        return this.equals((pauseJobUpdate_result)that);
      return false;
    }

    public boolean equals(pauseJobUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(pauseJobUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pauseJobUpdate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pauseJobUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public pauseJobUpdate_resultStandardScheme getScheme() {
        return new pauseJobUpdate_resultStandardScheme();
      }
    }

    private static class pauseJobUpdate_resultStandardScheme extends StandardScheme<pauseJobUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pauseJobUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pauseJobUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pauseJobUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public pauseJobUpdate_resultTupleScheme getScheme() {
        return new pauseJobUpdate_resultTupleScheme();
      }
    }

    private static class pauseJobUpdate_resultTupleScheme extends TupleScheme<pauseJobUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pauseJobUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pauseJobUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class resumeJobUpdate_args implements org.apache.thrift.TBase<resumeJobUpdate_args, resumeJobUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<resumeJobUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeJobUpdate_args");

    private static final org.apache.thrift.protocol.TField JOB_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("jobKey", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resumeJobUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resumeJobUpdate_argsTupleSchemeFactory());
    }

    private JobKey jobKey; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_KEY((short)1, "jobKey"),
      SESSION((short)2, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_KEY
            return JOB_KEY;
          case 2: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_KEY, new org.apache.thrift.meta_data.FieldMetaData("jobKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobKey.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeJobUpdate_args.class, metaDataMap);
    }

    public resumeJobUpdate_args() {
    }

    public resumeJobUpdate_args(
      JobKey jobKey,
      SessionKey session)
    {
      this();
      this.jobKey = jobKey;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeJobUpdate_args(resumeJobUpdate_args other) {
      if (other.isSetJobKey()) {
        this.jobKey = new JobKey(other.jobKey);
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public resumeJobUpdate_args deepCopy() {
      return new resumeJobUpdate_args(this);
    }

    @Override
    public void clear() {
      this.jobKey = null;
      this.session = null;
    }

    public JobKey getJobKey() {
      return this.jobKey;
    }

    public resumeJobUpdate_args setJobKey(JobKey jobKey) {
      this.jobKey = jobKey;
      return this;
    }

    public void unsetJobKey() {
      this.jobKey = null;
    }

    /** Returns true if field jobKey is set (has been assigned a value) and false otherwise */
    public boolean isSetJobKey() {
      return this.jobKey != null;
    }

    public void setJobKeyIsSet(boolean value) {
      if (!value) {
        this.jobKey = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public resumeJobUpdate_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_KEY:
        if (value == null) {
          unsetJobKey();
        } else {
          setJobKey((JobKey)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_KEY:
        return getJobKey();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_KEY:
        return isSetJobKey();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resumeJobUpdate_args)
        return this.equals((resumeJobUpdate_args)that);
      return false;
    }

    public boolean equals(resumeJobUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_jobKey = true && this.isSetJobKey();
      boolean that_present_jobKey = true && that.isSetJobKey();
      if (this_present_jobKey || that_present_jobKey) {
        if (!(this_present_jobKey && that_present_jobKey))
          return false;
        if (!this.jobKey.equals(that.jobKey))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_jobKey = true && (isSetJobKey());
      builder.append(present_jobKey);
      if (present_jobKey)
        builder.append(jobKey);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(resumeJobUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobKey()).compareTo(other.isSetJobKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobKey, other.jobKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resumeJobUpdate_args(");
      boolean first = true;

      sb.append("jobKey:");
      if (this.jobKey == null) {
        sb.append("null");
      } else {
        sb.append(this.jobKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (jobKey != null) {
        jobKey.validate();
      }
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeJobUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public resumeJobUpdate_argsStandardScheme getScheme() {
        return new resumeJobUpdate_argsStandardScheme();
      }
    }

    private static class resumeJobUpdate_argsStandardScheme extends StandardScheme<resumeJobUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeJobUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jobKey = new JobKey();
                struct.jobKey.read(iprot);
                struct.setJobKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeJobUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobKey != null) {
          oprot.writeFieldBegin(JOB_KEY_FIELD_DESC);
          struct.jobKey.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeJobUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public resumeJobUpdate_argsTupleScheme getScheme() {
        return new resumeJobUpdate_argsTupleScheme();
      }
    }

    private static class resumeJobUpdate_argsTupleScheme extends TupleScheme<resumeJobUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resumeJobUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobKey()) {
          optionals.set(0);
        }
        if (struct.isSetSession()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetJobKey()) {
          struct.jobKey.write(oprot);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resumeJobUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.jobKey = new JobKey();
          struct.jobKey.read(iprot);
          struct.setJobKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class resumeJobUpdate_result implements org.apache.thrift.TBase<resumeJobUpdate_result, resumeJobUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<resumeJobUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeJobUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resumeJobUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resumeJobUpdate_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeJobUpdate_result.class, metaDataMap);
    }

    public resumeJobUpdate_result() {
    }

    public resumeJobUpdate_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeJobUpdate_result(resumeJobUpdate_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public resumeJobUpdate_result deepCopy() {
      return new resumeJobUpdate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public resumeJobUpdate_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resumeJobUpdate_result)
        return this.equals((resumeJobUpdate_result)that);
      return false;
    }

    public boolean equals(resumeJobUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(resumeJobUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resumeJobUpdate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeJobUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public resumeJobUpdate_resultStandardScheme getScheme() {
        return new resumeJobUpdate_resultStandardScheme();
      }
    }

    private static class resumeJobUpdate_resultStandardScheme extends StandardScheme<resumeJobUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeJobUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeJobUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeJobUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public resumeJobUpdate_resultTupleScheme getScheme() {
        return new resumeJobUpdate_resultTupleScheme();
      }
    }

    private static class resumeJobUpdate_resultTupleScheme extends TupleScheme<resumeJobUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resumeJobUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resumeJobUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class abortJobUpdate_args implements org.apache.thrift.TBase<abortJobUpdate_args, abortJobUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<abortJobUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("abortJobUpdate_args");

    private static final org.apache.thrift.protocol.TField JOB_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("jobKey", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new abortJobUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new abortJobUpdate_argsTupleSchemeFactory());
    }

    private JobKey jobKey; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_KEY((short)1, "jobKey"),
      SESSION((short)2, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_KEY
            return JOB_KEY;
          case 2: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_KEY, new org.apache.thrift.meta_data.FieldMetaData("jobKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JobKey.class)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(abortJobUpdate_args.class, metaDataMap);
    }

    public abortJobUpdate_args() {
    }

    public abortJobUpdate_args(
      JobKey jobKey,
      SessionKey session)
    {
      this();
      this.jobKey = jobKey;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public abortJobUpdate_args(abortJobUpdate_args other) {
      if (other.isSetJobKey()) {
        this.jobKey = new JobKey(other.jobKey);
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public abortJobUpdate_args deepCopy() {
      return new abortJobUpdate_args(this);
    }

    @Override
    public void clear() {
      this.jobKey = null;
      this.session = null;
    }

    public JobKey getJobKey() {
      return this.jobKey;
    }

    public abortJobUpdate_args setJobKey(JobKey jobKey) {
      this.jobKey = jobKey;
      return this;
    }

    public void unsetJobKey() {
      this.jobKey = null;
    }

    /** Returns true if field jobKey is set (has been assigned a value) and false otherwise */
    public boolean isSetJobKey() {
      return this.jobKey != null;
    }

    public void setJobKeyIsSet(boolean value) {
      if (!value) {
        this.jobKey = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public abortJobUpdate_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_KEY:
        if (value == null) {
          unsetJobKey();
        } else {
          setJobKey((JobKey)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_KEY:
        return getJobKey();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_KEY:
        return isSetJobKey();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof abortJobUpdate_args)
        return this.equals((abortJobUpdate_args)that);
      return false;
    }

    public boolean equals(abortJobUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_jobKey = true && this.isSetJobKey();
      boolean that_present_jobKey = true && that.isSetJobKey();
      if (this_present_jobKey || that_present_jobKey) {
        if (!(this_present_jobKey && that_present_jobKey))
          return false;
        if (!this.jobKey.equals(that.jobKey))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_jobKey = true && (isSetJobKey());
      builder.append(present_jobKey);
      if (present_jobKey)
        builder.append(jobKey);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(abortJobUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobKey()).compareTo(other.isSetJobKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobKey, other.jobKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("abortJobUpdate_args(");
      boolean first = true;

      sb.append("jobKey:");
      if (this.jobKey == null) {
        sb.append("null");
      } else {
        sb.append(this.jobKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (jobKey != null) {
        jobKey.validate();
      }
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class abortJobUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public abortJobUpdate_argsStandardScheme getScheme() {
        return new abortJobUpdate_argsStandardScheme();
      }
    }

    private static class abortJobUpdate_argsStandardScheme extends StandardScheme<abortJobUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, abortJobUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.jobKey = new JobKey();
                struct.jobKey.read(iprot);
                struct.setJobKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, abortJobUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobKey != null) {
          oprot.writeFieldBegin(JOB_KEY_FIELD_DESC);
          struct.jobKey.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class abortJobUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public abortJobUpdate_argsTupleScheme getScheme() {
        return new abortJobUpdate_argsTupleScheme();
      }
    }

    private static class abortJobUpdate_argsTupleScheme extends TupleScheme<abortJobUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, abortJobUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobKey()) {
          optionals.set(0);
        }
        if (struct.isSetSession()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetJobKey()) {
          struct.jobKey.write(oprot);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, abortJobUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.jobKey = new JobKey();
          struct.jobKey.read(iprot);
          struct.setJobKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class abortJobUpdate_result implements org.apache.thrift.TBase<abortJobUpdate_result, abortJobUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<abortJobUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("abortJobUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new abortJobUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new abortJobUpdate_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(abortJobUpdate_result.class, metaDataMap);
    }

    public abortJobUpdate_result() {
    }

    public abortJobUpdate_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public abortJobUpdate_result(abortJobUpdate_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public abortJobUpdate_result deepCopy() {
      return new abortJobUpdate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public abortJobUpdate_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof abortJobUpdate_result)
        return this.equals((abortJobUpdate_result)that);
      return false;
    }

    public boolean equals(abortJobUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(abortJobUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("abortJobUpdate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class abortJobUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public abortJobUpdate_resultStandardScheme getScheme() {
        return new abortJobUpdate_resultStandardScheme();
      }
    }

    private static class abortJobUpdate_resultStandardScheme extends StandardScheme<abortJobUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, abortJobUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, abortJobUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class abortJobUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public abortJobUpdate_resultTupleScheme getScheme() {
        return new abortJobUpdate_resultTupleScheme();
      }
    }

    private static class abortJobUpdate_resultTupleScheme extends TupleScheme<abortJobUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, abortJobUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, abortJobUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pulseJobUpdate_args implements org.apache.thrift.TBase<pulseJobUpdate_args, pulseJobUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<pulseJobUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pulseJobUpdate_args");

    private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pulseJobUpdate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pulseJobUpdate_argsTupleSchemeFactory());
    }

    private String updateId; // required
    private SessionKey session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPDATE_ID((short)1, "updateId"),
      SESSION((short)2, "session");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPDATE_ID
            return UPDATE_ID;
          case 2: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionKey.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pulseJobUpdate_args.class, metaDataMap);
    }

    public pulseJobUpdate_args() {
    }

    public pulseJobUpdate_args(
      String updateId,
      SessionKey session)
    {
      this();
      this.updateId = updateId;
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pulseJobUpdate_args(pulseJobUpdate_args other) {
      if (other.isSetUpdateId()) {
        this.updateId = other.updateId;
      }
      if (other.isSetSession()) {
        this.session = new SessionKey(other.session);
      }
    }

    public pulseJobUpdate_args deepCopy() {
      return new pulseJobUpdate_args(this);
    }

    @Override
    public void clear() {
      this.updateId = null;
      this.session = null;
    }

    public String getUpdateId() {
      return this.updateId;
    }

    public pulseJobUpdate_args setUpdateId(String updateId) {
      this.updateId = updateId;
      return this;
    }

    public void unsetUpdateId() {
      this.updateId = null;
    }

    /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateId() {
      return this.updateId != null;
    }

    public void setUpdateIdIsSet(boolean value) {
      if (!value) {
        this.updateId = null;
      }
    }

    public SessionKey getSession() {
      return this.session;
    }

    public pulseJobUpdate_args setSession(SessionKey session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPDATE_ID:
        if (value == null) {
          unsetUpdateId();
        } else {
          setUpdateId((String)value);
        }
        break;

      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((SessionKey)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPDATE_ID:
        return getUpdateId();

      case SESSION:
        return getSession();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPDATE_ID:
        return isSetUpdateId();
      case SESSION:
        return isSetSession();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pulseJobUpdate_args)
        return this.equals((pulseJobUpdate_args)that);
      return false;
    }

    public boolean equals(pulseJobUpdate_args that) {
      if (that == null)
        return false;

      boolean this_present_updateId = true && this.isSetUpdateId();
      boolean that_present_updateId = true && that.isSetUpdateId();
      if (this_present_updateId || that_present_updateId) {
        if (!(this_present_updateId && that_present_updateId))
          return false;
        if (!this.updateId.equals(that.updateId))
          return false;
      }

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_updateId = true && (isSetUpdateId());
      builder.append(present_updateId);
      if (present_updateId)
        builder.append(updateId);

      boolean present_session = true && (isSetSession());
      builder.append(present_session);
      if (present_session)
        builder.append(session);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(pulseJobUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pulseJobUpdate_args(");
      boolean first = true;

      sb.append("updateId:");
      if (this.updateId == null) {
        sb.append("null");
      } else {
        sb.append(this.updateId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (session != null) {
        session.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pulseJobUpdate_argsStandardSchemeFactory implements SchemeFactory {
      public pulseJobUpdate_argsStandardScheme getScheme() {
        return new pulseJobUpdate_argsStandardScheme();
      }
    }

    private static class pulseJobUpdate_argsStandardScheme extends StandardScheme<pulseJobUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pulseJobUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPDATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.updateId = iprot.readString();
                struct.setUpdateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.session = new SessionKey();
                struct.session.read(iprot);
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pulseJobUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.updateId != null) {
          oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
          oprot.writeString(struct.updateId);
          oprot.writeFieldEnd();
        }
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pulseJobUpdate_argsTupleSchemeFactory implements SchemeFactory {
      public pulseJobUpdate_argsTupleScheme getScheme() {
        return new pulseJobUpdate_argsTupleScheme();
      }
    }

    private static class pulseJobUpdate_argsTupleScheme extends TupleScheme<pulseJobUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pulseJobUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUpdateId()) {
          optionals.set(0);
        }
        if (struct.isSetSession()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUpdateId()) {
          oprot.writeString(struct.updateId);
        }
        if (struct.isSetSession()) {
          struct.session.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pulseJobUpdate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.updateId = iprot.readString();
          struct.setUpdateIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.session = new SessionKey();
          struct.session.read(iprot);
          struct.setSessionIsSet(true);
        }
      }
    }

  }

  public static class pulseJobUpdate_result implements org.apache.thrift.TBase<pulseJobUpdate_result, pulseJobUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<pulseJobUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pulseJobUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pulseJobUpdate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pulseJobUpdate_resultTupleSchemeFactory());
    }

    private Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pulseJobUpdate_result.class, metaDataMap);
    }

    public pulseJobUpdate_result() {
    }

    public pulseJobUpdate_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pulseJobUpdate_result(pulseJobUpdate_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public pulseJobUpdate_result deepCopy() {
      return new pulseJobUpdate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Response getSuccess() {
      return this.success;
    }

    public pulseJobUpdate_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pulseJobUpdate_result)
        return this.equals((pulseJobUpdate_result)that);
      return false;
    }

    public boolean equals(pulseJobUpdate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(pulseJobUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pulseJobUpdate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pulseJobUpdate_resultStandardSchemeFactory implements SchemeFactory {
      public pulseJobUpdate_resultStandardScheme getScheme() {
        return new pulseJobUpdate_resultStandardScheme();
      }
    }

    private static class pulseJobUpdate_resultStandardScheme extends StandardScheme<pulseJobUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pulseJobUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pulseJobUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pulseJobUpdate_resultTupleSchemeFactory implements SchemeFactory {
      public pulseJobUpdate_resultTupleScheme getScheme() {
        return new pulseJobUpdate_resultTupleScheme();
      }
    }

    private static class pulseJobUpdate_resultTupleScheme extends TupleScheme<pulseJobUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pulseJobUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pulseJobUpdate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
